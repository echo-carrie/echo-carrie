<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>echo-carrie</title><description>Blog</description><link>https://echo-carrie.github.io/</link><language>zh_CN</language><item><title>AI-agnet.md</title><link>https://echo-carrie.github.io/posts/ai-agnet/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/ai-agnet/</guid><description>AI agent及主流框架总结</description><pubDate>Mon, 12 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;AI agent及主流框架总结&lt;/h1&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2&gt;AI Agent是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Agent&lt;strong&gt;英文直译是代理，又称智能体。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;从技术角度看,&lt;strong&gt;&lt;code&gt;AI Agent&lt;/code&gt; 是一个能够接收输入、进行有限决策并执行预设动作的智能程序。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;与传统的 AI 模型相比，AI Agent 增加了任务规划和执行能力,但目前的自主性和适应性仍有限。它更像是一个”智能助手”，需要在明确的规则和边界下工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;主要架构&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AI Agent&lt;/code&gt; 架构主要包含三个基础模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**输入处理模块：**负责解析用户需求和环境数据。&lt;/li&gt;
&lt;li&gt;**推理模块：**基于预设规则和模型进行判断。&lt;/li&gt;
&lt;li&gt;**执行模块：**按照既定流程完成具体任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://stable-learn.com/_astro/agent-summary.CjI1llOB.png&quot; alt=&quot;agent&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;其他解释&lt;/h3&gt;
&lt;p&gt;Agent由三个组件组成：一个&lt;strong&gt;大型语言模型 (LLM)&lt;/strong&gt;、一套可供其使用的&lt;strong&gt;工具&lt;/strong&gt;以及一个提供指令的&lt;strong&gt;提示&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;LLM 在一个循环中运行。在每次迭代中，它选择一个工具来调用，提供输入，接收结果（观察），并使用该观察来指导下一个动作。循环持续进行，直到满足停止条件——通常是当代理收集到足够的信息来响应用户时。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.langchain.ac.cn/langgraphjs/agents/assets/agent.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;代理循环：LLM 选择工具并使用它们的输出来满足用户请求。&lt;/p&gt;
&lt;h1&gt;智能体&lt;/h1&gt;
&lt;h2&gt;智能体的宏观机会&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;image-20250507155504253&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;image-20250507155600860&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;智能体重要构件&lt;/h2&gt;
&lt;p&gt;智能体与其环境互动，通常由几个重要组件构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境（Environment）&lt;/strong&gt;：智能体所感知和影响的外部世界。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传感器（Sensors）&lt;/strong&gt;：感知环境状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行器（Actuators）&lt;/strong&gt;：与环境交互的物理或虚拟接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效应器（Effectors）/策略大脑（Policy/Planner）&lt;/strong&gt;：负责从感知转化为行动的逻辑模块，包括记忆、规则、规划等。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对应到增强型LLM，可以将“环境”理解为文本世界或插件系统，“执行器”就是工具，“效应器”是模型本身的推理能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-81060150dbfe7c4724201302eaf56c39_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这一框架适用于各种与环境交互的智能体，例如机器人与其物理环境互动，或AI智能体与软件环境互动。&lt;/p&gt;
&lt;h2&gt;关键构件&lt;/h2&gt;
&lt;p&gt;​		我们可以将“增强型LLM智能体”视为一个基于大型语言模型（LLM）构建的认知系统，其关键在于：&lt;strong&gt;感知 → 推理/规划 → 行动 → 记忆&lt;/strong&gt; 的闭环。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e641c5e11ee9f90ea69083ec4b65f5f4_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;1. 感知&lt;/h3&gt;
&lt;p&gt;LLM通过&lt;strong&gt;自然语言输入&lt;/strong&gt;观察环境。这种输入可以来自用户提问、传感器信息的文本化描述，或其他外部系统的语言输出。&lt;/p&gt;
&lt;h3&gt;2. 推理与规划&lt;/h3&gt;
&lt;p&gt;为了决定接下来的行动步骤，LLM需要具备推理能力。通过“思维链”（Chain-of-Thought, CoT）等技术，模型能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逐步分析当前环境状态&lt;/li&gt;
&lt;li&gt;拆解复杂问题&lt;/li&gt;
&lt;li&gt;制定多步行动计划&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ff455cfb2d8d6d1cdb2b0f71f20407c6_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这部分是智能体行为的核心，体现了模型的“智能性”。&lt;/p&gt;
&lt;h3&gt;3. 工具使用&lt;/h3&gt;
&lt;p&gt;LLM本身并不能直接与世界交互，因此需要通过调用工具来执行计划的行动。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用搜索引擎获取实时信息&lt;/li&gt;
&lt;li&gt;使用计算工具处理数据&lt;/li&gt;
&lt;li&gt;发送请求给外部API&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 记忆&lt;/h3&gt;
&lt;p&gt;为了跟踪过去的观察与行动，LLM需要维持&lt;strong&gt;内部状态&lt;/strong&gt;或接入外部记忆模块。这使其能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回顾先前的对话和操作&lt;/li&gt;
&lt;li&gt;维持任务上下文&lt;/li&gt;
&lt;li&gt;在多轮交互中保持连贯性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种规划行为使智能体能够感知（LLM）、规划下一步（规划）、采取行动（工具），并跟踪已采取的行动（记忆）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c58523438b9a919ceddba0e717bb9724_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;LLM智能体的自主性&lt;/h2&gt;
&lt;p&gt;根据系统的不同，LLM智能体可以拥有不同程度的自主性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ba9de73d9839c0316b6098c35430ba97_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;LLM智能体三大组件&lt;/h2&gt;
&lt;h3&gt;记忆&lt;/h3&gt;
&lt;h4&gt;短期记忆（工作记忆）&lt;/h4&gt;
&lt;p&gt;​		LLM是健忘的系统，或者更准确地说，与它们交互时它们根本不进行任何记忆。例如，当你向LLM提出一个问题，然后接着提出另一个问题时，它不会记住之前的问题。我们通常将此称为&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=255862913&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%E7%9F%AD%E6%9C%9F%E8%AE%B0%E5%BF%86&amp;amp;zhida_source=entity&quot;&gt;短期记忆&lt;/a&gt;，也称为工作记忆，它作为（近乎）即时上下文的缓冲区。这包括LLM智能体最近采取的行动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-f268c435e5f6c8604816df84ae16acd3_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于跟踪最近的上下文和行动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;上下文窗口&lt;/h5&gt;
&lt;p&gt;​	&lt;strong&gt;启用短期记忆的最直接方法是使用模型的上下文窗口（context window），它本质上是LLM可以处理的词数（token）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5f36d210ca21ac2b2f7d7ea215178de9_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		上下文窗口通常至少有8192个词，有时甚至可以扩展到数十万个词！&lt;/p&gt;
&lt;p&gt;一个大的上下文窗口可以用来跟踪完整的对话历史，作为输入提示的一部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3256d89ab2be8488dd33e79dceeaa739_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		只要对话历史适合LLM的上下文窗口，这种方法就能很好地模拟记忆。然而，与其说是真正记住对话，我们实际上是“告诉”LLM对话内容是什么。&lt;/p&gt;
&lt;h5&gt;用另一个LLM总结&lt;/h5&gt;
&lt;p&gt;​		对于&lt;strong&gt;上下文窗口较小&lt;/strong&gt;的模型，或者&lt;strong&gt;当对话历史较长时，我们可以使用另一个LLM来总结迄今为止的对话。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pica.zhimg.com/v2-b1fd18ed212001b15b6f997e0eeeb25e_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		通过持续总结对话，我们可以保持对话内容的精简。它会减少词数，同时仅保留最重要的信息。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;长期记忆&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;用于保留智能体在多个回合、多个任务、多个会话中的知识与经验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		LLM智能体还需要跟踪可能多达数十个步骤，而不仅仅是最新的行动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-39e10dbbce6bc85221ef71aa3ea026bf_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		这被称为&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=255862913&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%E9%95%BF%E6%9C%9F%E8%AE%B0%E5%BF%86&amp;amp;zhida_source=entity&quot;&gt;长期记忆&lt;/a&gt;，因为LLM智能体理论上可能需要记住几十甚至数百个步骤。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-33898609081ae2f1c51082a417347850_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;外部向量数据库&amp;amp;RAG&lt;/h5&gt;
&lt;p&gt;​		&lt;strong&gt;LLM智能体的长期记忆包括智能体过去的行动空间，这些需要在较长时间内保留。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;启用长期记忆的常见技术是将所有先前的交互、行动和对话存储在外部向量数据库中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;要构建这样的数据库，首先将对话嵌入到捕捉其含义的数字表示中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pica.zhimg.com/v2-b3cff3643db4f8e6d357197fa853ed7c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		在构建数据库后，我们可以嵌入任何给定的提示，&lt;strong&gt;并通过比较提示嵌入与数据库嵌入&lt;/strong&gt;，找到向量数据库中最相关的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-36047435a14c515cf6262d89da9fb75c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		这种方法通常被称为&lt;strong&gt;检索增强生成（Retrieval-Augmented Generation, RAG）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		**长期记忆还可以涉及保留不同会话的信息。**例如，你可能希望LLM智能体记住它在之前会话中进行过的任何研究。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;不同类型的信息也可以与不同类型的记忆相关联以存储。在&lt;/strong&gt;心理学中，有许多类型的记忆需要区分，但《语言智能体的认知架构》论文将其中四种与LLM智能体结合起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eef73f8ab917cd6e962b068505bc01e6_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		这种区分有助于构建智能体框架。语义记忆（关于世界的事实）可能存储在与工作记忆（当前和最近的情况）不同的数据库中。&lt;/p&gt;
&lt;h3&gt;工具&lt;/h3&gt;
&lt;p&gt;​		工具&lt;strong&gt;允许LLM与外部环境（例如数据库）交互，或使用外部应用程序（例如运行自定义代码）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-cc48edef3c4841c19a42dfda3d7e3828_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;用途&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;获取数据&lt;/strong&gt;：访问最新信息（如天气、新闻等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;采取行动&lt;/strong&gt;：如安排会议、下订单。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工具使用&lt;/h4&gt;
&lt;h5&gt;函数调用&lt;/h5&gt;
&lt;p&gt;要实际使用工具，**LLM必须生成符合给定工具API的文本。**我们通常期望生成可以格式化为JSON的字符串，以便轻松输入代码解释器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bf9b2ffbc6f8ee6b367a2a75c4299d70_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：LLM 生成 &lt;code&gt;{&quot;tool&quot;: &quot;multiply&quot;, &quot;args&quot;: {&quot;x&quot;: 5, &quot;y&quot;: 3}}&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**如果正确且详尽地提示，一些LLM可以使用任何工具。**工具使用是当前大多数LLM都具备的能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-c05f75662f9867cd09f5105471feea7b_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;访问工具的更稳定方法是通过微调LLM（稍后会详细介绍！)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;顺序调用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工具可以按固定顺序或由 LLM &lt;strong&gt;自主决定&lt;/strong&gt;调用顺序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-74a48ee933b9ec383eaf5d9f74b48a73_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本质上构成一个&lt;strong&gt;Agent 智能体框架&lt;/strong&gt;：LLM 决策 → 工具执行 → 结果反馈 → 下次决策。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-01dcecf5e37576222cf8ec9f11a7fb43_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;换句话说，中间步骤的输出会反馈给LLM以继续处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-77c3955fa66c1134ec0b3c02d28ea041_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工具使用的训练范式-Toolformer&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：让大语言模型（LLM）&lt;strong&gt;学会自主判断何时、如何调用工具&lt;/strong&gt;，增强其处理复杂任务的能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;[ tool_name:input → output ]&lt;/code&gt; 格式标记训练样本。&lt;/li&gt;
&lt;li&gt;利用少样本提示生成调用样本，再基于输出质量筛选构建训练集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;意义&lt;/strong&gt;：无需手动微调代码，只需标注即可训练具备工具使用能力的模型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键设计&lt;/strong&gt;：生成流程详解&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;输入提示&lt;/td&gt;
&lt;td&gt;如：“5乘3是多少？”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生成 [ 符号&lt;/td&gt;
&lt;td&gt;表示即将调用工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生成工具名与输入&lt;/td&gt;
&lt;td&gt;如 &lt;code&gt;calculator: 5*3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生成 → 符号&lt;/td&gt;
&lt;td&gt;表示调用结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插入输出&lt;/td&gt;
&lt;td&gt;工具返回的输出如 &lt;code&gt;15&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;继续生成文本&lt;/td&gt;
&lt;td&gt;模型可继续后续自然语言生成&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​		工具使用是增强LLM能力并弥补其不足的强大技术。因此，过去几年中关于工具使用和学习的研究迅速激增。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-10e9172e2a31a304f9f66cd9c8b065ac_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		《大语言模型的工具学习：综述》论文的注释和裁剪图片。随着对工具使用的日益关注，（智能体性）LLM预计将变得更加强大。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;这些研究不仅涉及提示LLM使用工具，还包括专门训练它们以使用工具。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;首批这样做的技术之一被称为Toolformer，这是一个训练来决定调用哪些API以及如何调用的模型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		它使用 [ 和 ] 标记来表示调用工具的开始和结束。例如，当给出提示“5乘3是多少？”时，它会开始生成词，直到遇到 [ 标记。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e0f8687727a3d948efed0de071c36115_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​	之后，它会生成词直到遇到 → 标记，表示LLM停止生成词。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-101aa1da5b1db453af6ebb20c750cf1f_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​	然后，工具将被调用，输出将被添加到迄今为止生成的词中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pica.zhimg.com/v2-42bdd7bee91223c28385c6d255c98590_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		 符号表示LLM现在可以继续生成，如果有必要的话。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;Toolformer通过精心生成一个包含大量工具使用的数据集来创建这种行为，模型可以在此数据集上进行训练。对于每种工具，手动创建少样本提示，并用于采样使用这些工具的输出。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-aa257c75c14a71e9271d63c41792efaa_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;根据工具使用的正确性、输出和损失减少来过滤输出。所得数据集用于训练LLM遵循这种工具使用格式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		自Toolformer发布以来，出现了许多激动人心的新技术，例如可以使用数千种工具的LLM（ToolLLM）或可以轻松检索最相关工具的LLM（Gorilla）。&lt;/p&gt;
&lt;h4&gt;模型上下文协议（MCP）&lt;/h4&gt;
&lt;h5&gt;痛点&lt;/h5&gt;
&lt;p&gt;​		工具是智能体框架的重要组成部分，&lt;strong&gt;工具（Tools）是关键组件&lt;/strong&gt;，允许LLM与世界互动并扩展其能力，但其集成存在三大挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;手动跟踪并输入给LLM&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手动描述（包括其预期的JSON模式）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每次API更改时手动更新&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e03d2cfd41afe29c9cb2578b19cc9a4b_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;功能&lt;/h5&gt;
&lt;p&gt;​		&lt;strong&gt;为了使工具更容易在任何给定的智能体框架中实现，Anthropic开发了模型上下文协议（MCP）。通过MCP协议，标准化LLM使用工具的方式，让接入与调用更加通用、模块化和自动化。&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;组件&lt;/h5&gt;
&lt;p&gt;它包括三个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MCP主机&lt;/strong&gt; —— &lt;strong&gt;管理连接的LLM应用程序&lt;/strong&gt;（例如Cursor）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MCP客户端&lt;/strong&gt; —— 与MCP服务器&lt;strong&gt;保持1:1连接&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MCP服务器&lt;/strong&gt; —— 为&lt;strong&gt;LLM提供上下文、工具和能力&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a2e7488111ffb3e7df64a9a83c807646_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;流程&lt;/h5&gt;
&lt;p&gt;​		以希望LLM获取 GitHub 最新 5 次提交为例：&lt;/p&gt;
&lt;p&gt;​		MCP主机询问MCP服务器：&lt;strong&gt;我有哪些工具可以用？&lt;/strong&gt; &lt;strong&gt;MCP服务器返回工具列表（带调用方法、模式、功能描述等）&lt;/strong&gt;。示例如下：&lt;/p&gt;
&lt;p&gt;​		1、**工具发现阶段：**MCP主机（与客户端一起）首先会调用MCP服务器，询问有哪些工具可用。：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b7b79f11dc95785d0d0e8f0a4df31fd0_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		**2、工具调用阶段：**LLM接收到信息后可能会选择使用某个工具。它通过主机向MCP服务器发送请求，然后接收结果，包括使用的工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a479c0de67801b0706ffc78260d9ba9c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		**3、响应整合阶段：**最后，LLM接收结果并可以向用户解析答案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c4278b726ce107ce5e0b2bb15920d1a8_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;优势&lt;/h5&gt;
&lt;p&gt;​		&lt;strong&gt;这个框架通过连接到任何LLM应用程序都可以使用的MCP服务器，使创建工具变得更加容易。因此，当你创建一个与Github交互的MCP服务器时，任何支持MCP的LLM应用程序都可以使用它。&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;优势&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;统一标准&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;不同服务的工具接口被标准化（如天气、GitHub等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;即插即用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;工具一旦注册，&lt;strong&gt;任意支持MCP的LLM客户端都能用&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;自动适配API变化&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;工具定义集中在MCP服务器端，变更无需手动通知LLM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;提高工具复用性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;同一工具可被多个LLM共享，降低重复开发成本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;规划&lt;/h3&gt;
&lt;h4&gt;意义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LLM 使用工具（如插件、API）时，需要&lt;strong&gt;判断何时调用哪个工具&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;智能体要完成复杂任务，必须能将其&lt;strong&gt;拆解成可操作的步骤&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这类&lt;strong&gt;任务分解能力&lt;/strong&gt;正是“规划”的核心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d08e4d64bef0a6d3a8042e9cde52fd9c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;推理&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;推理 ≈ 在行动前“思考”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;推理是规划的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推理让 LLM 不只是直接回答问题，而是&lt;strong&gt;层层拆解、逐步接近目标&lt;/strong&gt;。&lt;strong&gt;“推理”LLM是那些在回答问题之前倾向于“思考”的模型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fc7ef9b0c324b0dbb5fa9fe05ea1c2cd_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推理的激活/启用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微调（Fine-tuning）&lt;/li&gt;
&lt;li&gt;提示工程（Prompt Engineering）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;微调&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;微调的意义如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、从模型的训练过程来理解：一般来说分成三个阶段，&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=252256436&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%E9%A2%84%E8%AE%AD%E7%BB%83&amp;amp;zhida_source=entity&quot;&gt;预训练&lt;/a&gt; Pre-training，&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=252256436&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%E6%9C%89%E7%9B%91%E7%9D%A3%E5%BE%AE%E8%B0%83&amp;amp;zhida_source=entity&quot;&gt;有监督微调&lt;/a&gt; Supervised finetuning、&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=252256436&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=%E5%AF%B9%E9%BD%90&amp;amp;zhida_source=entity&quot;&gt;对齐&lt;/a&gt; Alignment。其中后两个阶段都是微调的阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预训练阶段，模型会学习来自海量、无标注文本数据集的知识。&lt;/li&gt;
&lt;li&gt;然后使用有监督微调的方式来细化模型，以便后期在推理的过程中更好地遵守特定指令。&lt;/li&gt;
&lt;li&gt;最后使用对齐技术使 &lt;a href=&quot;https://zhida.zhihu.com/search?content_id=252256436&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=LLMs&amp;amp;zhida_source=entity&quot;&gt;LLMs&lt;/a&gt;LLMs 可以更有用且更安全地响应用户的提示 Prompt。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**2、让模型具备特定能力：**预训练的模型只是具备通用能力，要处理某个特定领域的问题，必须要灌给这个领域的知识，让模型学习到新的知识。&lt;/p&gt;
&lt;p&gt;**3、从成本降低视角：**从趋势来看，LLM的参数量只会越来越大。这对AI集群和算力的消耗就会更多，成本不断提升。所以需要允许少量地重新调整预训练大模型的权重参数，有助于降低训练大模型的复杂性，降低重新进行训练的成本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过模型的微调，可以达到如下目的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**1、定制化模型：**通过微调大型，可以根据用户自身的具体需求定制模型，从而提高准确性和性能。&lt;/p&gt;
&lt;p&gt;**2、提高资源利用率：**通过减少从头开始构建新模型的方式进行预训练，从而来节省时间、算力资源和其他带来的成本。&lt;/p&gt;
&lt;p&gt;**3、性能提升：**微调的过程，可以使用用户的独特数据集，来增强预训练模型的性能。&lt;/p&gt;
&lt;p&gt;**4、数据优化：**可以充分利用客户的数据，调整大模型以更好地适应用特定数据场景，甚至在需要时合并新数据。&lt;/p&gt;
&lt;h5&gt;提示工程&amp;amp;“思维链COT”&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过提供 &lt;strong&gt;思考步骤的示例&lt;/strong&gt;，让 LLM 学会如何推理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;少样本提示&lt;/strong&gt;（提供示例）&lt;strong&gt;这种提供思维过程示例的方法被称为“思维链”（Chain-of-Thought），它能够实现更复杂的推理行为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-39966dc46941bfe37eac9d012f58dee5_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;零样本提示&lt;/strong&gt;（如：“让我们一步步思考”）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思维链也可以在没有任何示例的情况下启用（零样本提示）&lt;/strong&gt;，只需简单地说“让我们一步步思考”。&lt;/p&gt;
&lt;p&gt;在训练LLM时，我们可以给它提供足够多的包含类似思维示例的数据集，或者让LLM发现自己的思考过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a6a95a319806f585505d7de39f373fa7_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个很好的例子是DeepSeek-R1，它使用奖励来指导思考过程的使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7ba905e867906a1f6ae3c9f058b09997_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;推理与行动&lt;/h4&gt;
&lt;h5&gt;现有痛点&lt;/h5&gt;
&lt;p&gt;在大多数 LLM 应用中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;思维链（Chain-of-Thought, CoT）&lt;/strong&gt; 主要用于&lt;strong&gt;推理&lt;/strong&gt;，帮助模型一步步解决复杂问题；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具调用等系统&lt;/strong&gt;主要用于&lt;strong&gt;行动&lt;/strong&gt;，即模型与外部环境的交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;但单独的推理或行动并不能实现完整、灵活的智能体行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pica.zhimg.com/v2-c251449ff8b192f1097a4b47ef57a5cc_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;ReAct&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;首批结合这两个过程的技术之一被称为ReAct（推理与行动）。&lt;/strong&gt; &lt;strong&gt;ReAct（Reason + Act）框架&lt;/strong&gt;通过精心设计的提示，使LLM能在一个统一流程中完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;思考（Thought）&lt;/strong&gt;
模型对当前问题或环境进行推理，得出下一步计划。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行动（Action）&lt;/strong&gt;
执行具体操作，如调用工具、搜索、查询等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观察（Observation）&lt;/strong&gt;
获取并理解行动结果，为下一轮推理提供依据。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;LLM 在“思考 → 行动 → 观察”循环中不断调整决策，直到任务完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e3e858367402ef6206df6143b4a9af2c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;提示示例&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-770d934d7bf7daa97d2c9e85b88e4678_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;LLM使用这个提示（可以用作系统提示）来引导其行为，以思考、行动和观察的循环方式工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-086a96b294ee6d8955b79b698e0a0826_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;它会持续这种行为，&lt;strong&gt;直到某个行动指定返回结果为止。通过迭代思考和观察，LLM可以规划行动，观察其输出，并相应调整。&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;优势&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态规划&lt;/strong&gt;：不像传统系统那样固定步骤，LLM可根据观察结果灵活调整行动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强自主性&lt;/strong&gt;：使模型具备一定“自主决策”能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具结合自然&lt;/strong&gt;：支持 LLM在自然语言推理中灵活调用外部资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;反思&lt;/h4&gt;
&lt;h5&gt;痛点&lt;/h5&gt;
&lt;p&gt;尽管 ReAct 强调 “推理+行动” 的循环，但它仍存在一个显著缺陷：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❌ &lt;strong&gt;无法从失败中学习&lt;/strong&gt; —— 每次任务都是“从头开始”，无“记忆”与“反思”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;定义&lt;/h5&gt;
&lt;p&gt;这个过程在ReAct中缺失，而Reflexion填补了这一空白。&lt;strong&gt;Reflexion是一种使用口头强化帮助智能体从先前失败中学习的技术。&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;三种角色&lt;/h5&gt;
&lt;p&gt;该方法假设三种LLM角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行动者&lt;/strong&gt; —— 根据状态观察选择并执行行动。我们可以使用诸如思维链或ReAct等方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;评估者&lt;/strong&gt; —— 对行动者产生的输出评分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自我反思&lt;/strong&gt; —— 反思行动者采取的行动和评估者生成的分数。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Reflexion &lt;strong&gt;添加记忆模块来跟踪行动（短期）和自我反思（长期），帮助智能体从错误中学习并识别改进的行动。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4bc72556c3fdca005b754e6f9696170c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;SELF-REFINE&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;SELF-REFINE&lt;/strong&gt; 是一种更精炼的迭代优化方法，特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个 LLM 充当多个角色：
&lt;ul&gt;
&lt;li&gt;生成初始输出&lt;/li&gt;
&lt;li&gt;自我评价输出&lt;/li&gt;
&lt;li&gt;基于反馈进行优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多轮循环迭代，直到满足质量标准或达到预设轮数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-838f58878f4459a00213c68db4fd6a0c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同一个LLM负责生成初始输出、优化输出和反馈。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1caf0567d69deaf9ad30db5f7288c88f_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;有趣的是，&lt;strong&gt;这种自我反思行为（Reflexion和SELF-REFINE）与强化学习非常相似，其中根据输出的质量给予奖励。&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;Reflexion&lt;/th&gt;
&lt;th&gt;SELF-REFINE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;自我反馈能力&lt;/td&gt;
&lt;td&gt;✅ 强&lt;/td&gt;
&lt;td&gt;✅ 强&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多角色支持&lt;/td&gt;
&lt;td&gt;✅（行动者/评估者/反思者）&lt;/td&gt;
&lt;td&gt;❌（全部由LLM一人扮演）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否支持多轮优化&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否结合记忆模块&lt;/td&gt;
&lt;td&gt;✅ 支持短期+长期记忆&lt;/td&gt;
&lt;td&gt;❌（偏静态）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;类似强化学习中的“奖励信号”&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;多智能体&lt;/h1&gt;
&lt;h2&gt;定义与解决的问题&lt;/h2&gt;
&lt;p&gt;​		在传统的&lt;strong&gt;单一智能体系统&lt;/strong&gt;中，存在以下挑战：&lt;strong&gt;工具过多可能使选择复杂化，上下文变得过于复杂，任务可能需要专业化。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工具冗杂&lt;/strong&gt;：太多工具令决策路径变得复杂&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上下文超载&lt;/strong&gt;：长上下文导致理解与处理困难&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通才能力不足&lt;/strong&gt;：一些任务需要高度专业化的知识与处理方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		相反，我们可以&lt;strong&gt;转向多智能体框架，其中多个智能体（每个都有工具、记忆和规划能力）相互交互并与环境交互：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-83a0805d238c6578355072e3323c7976_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;构成&lt;/h2&gt;
&lt;p&gt;​		这些多智能体系统通常由专业化的智能体组成，每个智能体配备自己的工具集，并由一个监督者监督。监督者管理智能体之间的通信，并可以将特定任务分配给专业化智能体。每个智能体可能拥有不同类型的工具，但也可能有不同的记忆系统。&lt;/p&gt;
&lt;p&gt;多智能体系统通常包括以下组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;专业化智能体&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每个&lt;strong&gt;智能体负责特定任务&lt;/strong&gt;（如写作、检索、规划）&lt;/li&gt;
&lt;li&gt;配备&lt;strong&gt;独立的工具集、记忆系统与决策逻辑&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监督者&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理任务的分配与智能体之间的通信&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;决定哪个智能体处理哪个子任务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负责协调与融合输出结果&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具与记忆系统&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;智能体可以拥有不同的工具（API、搜索器、计算器等）&lt;/li&gt;
&lt;li&gt;记忆系统也可细分为短期记忆、长期记忆或共享记忆库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-136cc63f36b434dfa15d5bd3cc856cdb_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;核心问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;智能体初始化&lt;/strong&gt; —— &lt;strong&gt;如何创建个体（专业化）智能体&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;智能体编排&lt;/strong&gt; —— 如何&lt;strong&gt;协调所有智能体&lt;/strong&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-07c4a3f60c2d4c3523c4cd92a2af894c_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;多智能体分类&lt;/h2&gt;
&lt;p&gt;两种最流行的多智能体架构是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.langchain.ac.cn/langgraphjs/agents/multi-agent/#supervisor&quot;&gt;协调者&lt;/a&gt;——&lt;strong&gt;个体智能体由一个中央协调者智能体协调&lt;/strong&gt;。协调者控制所有的通信流和任务委托，根据当前上下文和任务要求决定调用哪个智能体。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.langchain.ac.cn/langgraphjs/agents/multi-agent/#swarm&quot;&gt;集群&lt;/a&gt;——&lt;strong&gt;智能体根据其专业性动态地将控制权相互移交&lt;/strong&gt;。系统会记住上一个活跃的智能体，确保在后续交互中与该智能体恢复对话。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;协调者&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.langchain.ac.cn/langgraphjs/agents/assets/supervisor.png&quot; alt=&quot;Supervisor&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;集群&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.langchain.ac.cn/langgraphjs/agents/assets/swarm.png&quot; alt=&quot;Swarm&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;人类行为的交互性模拟&lt;/h2&gt;
&lt;p&gt;​		可以说最具影响力且非常酷的多智能体论文之一是《生成智能体：人类行为的交互式模拟》。&lt;/p&gt;
&lt;p&gt;​		在该论文中，他们&lt;strong&gt;创建了模拟可信人类行为的计算软件智能体&lt;/strong&gt;，称之为&lt;strong&gt;生成智能体（Generative Agents）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pica.zhimg.com/v2-3362699ee55848f6e98b11efdb7aa014_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		每个生成智能体的配置文件使它们以独特的方式行事，并有助于创造更有趣和动态的行为。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;每个智能体通过三个模块（记忆、规划和反思）初始化&lt;/strong&gt;，这与我们之前看到的ReAct和Reflexion的核心组件非常相似。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-cd8d38bfaa9babc2f50033ad001333cb_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		记忆模块是该框架中最关键的组件之一。它存储规划和反思行为，以及迄今为止的所有事件。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;对于任何给定的下一步或问题，会检索记忆并根据其最近性、重要性和相关性评分。得分最高的记忆会与智能体共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-948f2f44869706d8a40eac1e4c80b5a3_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;《生成智能体：人类行为的交互式模拟》论文的注释图表。&lt;/p&gt;
&lt;p&gt;它们&lt;strong&gt;共同允许智能体自由地进行行为并相互交互。因此，智能体编排很少，因为它们没有特定的目标要努力实现&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d53ab55c4963f7df924be488bf8f9763_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Annotated image from the interactive demo.&lt;/p&gt;
&lt;h3&gt;评估指标&lt;/h3&gt;
&lt;p&gt;这篇论文中有太多令人惊叹的信息片段，但我想强调它们的评估指标。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他们的评估涉及智能体行为的可信度作为主要指标，由人类评估者评分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-2f0f4302934d4f3df854c77a9a43c67b_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;《生成智能体：人类行为的交互式模拟》论文的注释图表。&lt;/p&gt;
&lt;p&gt;它&lt;strong&gt;展示了观察、规划和反思共同在这些生成智能体的性能中是多么重要。正如之前探索的，规划若没有反思行为是不完整的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;模块化框架&lt;/h2&gt;
&lt;h3&gt;构成&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;环境感知+配置文件+记忆+规划+可用行动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无论你选择哪种框架来创建多智能体系统，&lt;strong&gt;它们通常由几个成分组成，包括其配置文件、对环境的感知、记忆、规划和可用行动&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1e17302cb91480fdd14240bf6fb6df0e_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;主流框架&lt;/h2&gt;
&lt;p&gt;依据主流博客总结，整理出目前主流的agent框架：langgraph, AutoGen, MetaGPT, ChatDev, Swarm, uagents。&lt;/p&gt;
&lt;h3&gt;对比&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;框架名称&lt;/th&gt;
&lt;th&gt;技术特点&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;th&gt;社区活跃度&lt;/th&gt;
&lt;th&gt;学习曲线&lt;/th&gt;
&lt;th&gt;部署难度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;langgraph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;循环控制、状态管理、人机交互&lt;/td&gt;
&lt;td&gt;复杂工作流、多轮对话&lt;/td&gt;
&lt;td&gt;⭐⭐⭐⭐&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AutoGen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多代理协作、模块化设计&lt;/td&gt;
&lt;td&gt;团队协作、复杂任务分解&lt;/td&gt;
&lt;td&gt;⭐⭐⭐⭐⭐&lt;/td&gt;
&lt;td&gt;较高&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MetaGPT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;角色分工、软件开发流程&lt;/td&gt;
&lt;td&gt;软件开发、项目管理&lt;/td&gt;
&lt;td&gt;⭐⭐⭐⭐⭐&lt;/td&gt;
&lt;td&gt;较高&lt;/td&gt;
&lt;td&gt;较难&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ChatDev&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;开发流程自动化、多角色协作&lt;/td&gt;
&lt;td&gt;软件开发、团队协作&lt;/td&gt;
&lt;td&gt;⭐⭐⭐⭐&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;td&gt;中等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Swarm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;轻量级、高度可控&lt;/td&gt;
&lt;td&gt;独立功能开发、原型验证&lt;/td&gt;
&lt;td&gt;⭐⭐⭐⭐&lt;/td&gt;
&lt;td&gt;较低&lt;/td&gt;
&lt;td&gt;简单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uagents&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;去中心化、轻量级&lt;/td&gt;
&lt;td&gt;分布式应用、物联网&lt;/td&gt;
&lt;td&gt;⭐⭐⭐&lt;/td&gt;
&lt;td&gt;较低&lt;/td&gt;
&lt;td&gt;简单&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;适用领域&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;若要开发智能客服，需重点关注框架的对话管理与多轮交互能力&lt;/strong&gt;，像 &lt;code&gt;AutoGen&lt;/code&gt; 的多代理对话模式、ChatDev 基于 LLM 的问答能力便能大放异彩，它们能让客服与客户流畅沟通，精准解答疑问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要是致力于数据分析挖掘&lt;/strong&gt;，&lt;code&gt;Swarm&lt;/code&gt; 的集群智能、LangChain 的数据连接与处理能力就派上用场，可助力快速处理海量数据，洞察数据价值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;而开发智能写作辅助工具时&lt;/strong&gt;，&lt;code&gt;MetaGPT&lt;/code&gt; 的内容生成、ShortGPT 的自动化创作优势凸显，能为创作者提供灵感、优化文案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;开发资源&amp;amp;文档支持&lt;/h4&gt;
&lt;p&gt;开发资源也是关键考量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小型团队或个人开发者&lt;/strong&gt;：上手容易、文档丰富的 LangChain 是优选，其简洁的 API 与大量示例，能助开发者快速搭建原型；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大型团队&lt;/strong&gt;有定制化、拓展需求：&lt;strong&gt;&lt;code&gt;AutoGen&lt;/code&gt; 的模块化设计、ChatDev 的高度可定制性&lt;/strong&gt;，则提供了广阔的发挥空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;社区支持&lt;/h4&gt;
&lt;p&gt;社区支持不容忽视。活跃的社区意味着丰富的教程、及时的问题解答与持续的更新。&lt;strong&gt;&lt;code&gt;LangChain+langgraph&lt;/code&gt; 在 GitHub 超 100k star，海量资源随时可取；&lt;code&gt;MetaGPT&lt;/code&gt; 超 4万star，开发者交流频繁，能紧跟前沿趋势。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;安全性&lt;/h4&gt;
&lt;p&gt;安全性更是重中之重。处理敏感数据，要确保框架有严格的数据加密、访问控制机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一些框架经大公司或权威机构验证，安全性有保障；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新出现框架则需深入研究代码、评估漏洞风险，&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;langgraph&lt;/h3&gt;
&lt;h4&gt;核心特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;状态管理&lt;/strong&gt;：提供有状态的多参与者应用程序构建能力&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环控制&lt;/strong&gt;：支持复杂的循环和条件流程定义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;细粒度控制&lt;/strong&gt;：对应用程序流程和状态提供精确控制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置持久性&lt;/strong&gt;：支持高级人机循环和记忆功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技术优势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基于 DAG 的解决方案&lt;/li&gt;
&lt;li&gt;与 LangChain 和 LangSmith 无缝集成&lt;/li&gt;
&lt;li&gt;支持流式输出和令牌流&lt;/li&gt;
&lt;li&gt;完整的开发工具链（API、SDK、CLI、Studio）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;复杂工作流程自动化&lt;/li&gt;
&lt;li&gt;多轮对话系统&lt;/li&gt;
&lt;li&gt;人机协作场景&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub 星标：8k+ | 地址：github.com/langchain-ai/langgraph&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;AutoGen&lt;/h3&gt;
&lt;h4&gt;核心特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多代理协作&lt;/strong&gt;：支持自主、可扩展的 AI 代理团队构建&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;：可定制特定功能的代理组件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨语言支持&lt;/strong&gt;：同时支持 .NET 和 Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事件驱动&lt;/strong&gt;：基于事件的代理系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技术架构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心 API&lt;/strong&gt;：实现消息传递和分布式运行时&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AgentChat API&lt;/strong&gt;：适用于快速原型设计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展 API&lt;/strong&gt;：支持第一方和第三方功能扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;团队协作系统&lt;/li&gt;
&lt;li&gt;自动化翻译服务&lt;/li&gt;
&lt;li&gt;智能内容生成&lt;/li&gt;
&lt;li&gt;代码辅助开发&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub 星标：37K+ | 地址：github.com/microsoft/autogen&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;MetaGPT&lt;/h3&gt;
&lt;h4&gt;核心特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;角色抽象&lt;/strong&gt;：模拟完整软件开发团队角色&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流程自动化&lt;/strong&gt;：覆盖从需求分析到代码生成的全流程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协同决策&lt;/strong&gt;：多角色智能体协作决策机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;开发流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;需求分析&lt;/strong&gt;：产品经理进行市场调研和需求定义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构设计&lt;/strong&gt;：架构师负责系统架构规划&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目管理&lt;/strong&gt;：项目经理进行资源调配和进度管理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码实现&lt;/strong&gt;：工程师团队协作开发&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;软件项目自动化开发&lt;/li&gt;
&lt;li&gt;技术方案生成&lt;/li&gt;
&lt;li&gt;代码审查和优化&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub 星标：46K+ | 地址：github.com/geekan/MetaGPT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;ChatDev&lt;/h3&gt;
&lt;h4&gt;核心特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流程自动化&lt;/strong&gt;：自动化软件开发全生命周期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多角色协作&lt;/strong&gt;：支持不同角色智能体的协同工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原子化任务&lt;/strong&gt;：将复杂任务分解为原子级对话&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;开发阶段&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设计阶段&lt;/strong&gt;：需求分析和技术选型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编码阶段&lt;/strong&gt;：代码实现和界面设计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试阶段&lt;/strong&gt;：功能测试和质量保证&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档阶段&lt;/strong&gt;：技术文档和用户手册生成&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub 星标：26K+ | 地址：github.com/OpenBMB/ChatDev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Swarm&lt;/h3&gt;
&lt;h4&gt;核心特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;轻量级设计&lt;/strong&gt;：简洁高效的框架结构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高度可控&lt;/strong&gt;：精确的代理协调和执行控制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端运行&lt;/strong&gt;：几乎完全在客户端执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无状态设计&lt;/strong&gt;：类似 Chat Completions API 的无状态特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技术优势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简单的代理抽象和移交机制&lt;/li&gt;
&lt;li&gt;易于测试和调试&lt;/li&gt;
&lt;li&gt;灵活的功能扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub 星标：17K+ | 地址：github.com/openai/swarm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;uagents&lt;/h3&gt;
&lt;h4&gt;核心特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;去中心化&lt;/strong&gt;：支持分布式智能体部署&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻量级&lt;/strong&gt;：高效的资源利用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台&lt;/strong&gt;：支持多种设备环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技术优势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;简洁的开发接口&lt;/li&gt;
&lt;li&gt;灵活的部署选项&lt;/li&gt;
&lt;li&gt;强大的扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;分布式应用开发&lt;/li&gt;
&lt;li&gt;物联网智能控制&lt;/li&gt;
&lt;li&gt;去中心化社交网络&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub 星标：1.2K+ | 地址：github.com/fetchai/uAgents&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item><item><title>OpenManus产品分析报告.md</title><link>https://echo-carrie.github.io/posts/openmanus%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/openmanus%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</guid><description>OpenManus产品分析报告</description><pubDate>Fri, 09 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;OpenManus产品分析报告&lt;/h1&gt;
&lt;h2&gt;一、产品概述&lt;/h2&gt;
&lt;p&gt;OpenManus是由MetaGPT团队开发的开源AI智能体平台，于2025年3月发布。该项目旨在复刻并改进Manus的核心功能，提供无需邀请码、可本地化部署的智能体解决方案，迅速在GitHub上获得超过一万个星标，成为AI领域的热门开源项目。其官网地址为：https://github.com/mannaandpoem/OpenManus 。&lt;/p&gt;
&lt;h2&gt;二、产品定位&lt;/h2&gt;
&lt;h3&gt;目标用户群体&lt;/h3&gt;
&lt;p&gt;OpenManus主要针对开发者、研究人员等技术用户。它为这些人群提供了一个高度自定义和本地化控制的平台，让他们能够在本地设备上运行，随时听候差遣，完成各种复杂任务。无论是独立开发者，还是大型团队的一员，都能借助OpenManus实现诸如代码生成、数据分析、网络信息检索等复杂任务的自动化处理，从而专注于创造性的核心工作，而非将时间浪费在重复性任务上。&lt;/p&gt;
&lt;h3&gt;市场定位&lt;/h3&gt;
&lt;p&gt;在当前智能体技术日趋复杂的形势下，OpenManus致力于提供一个灵活、高效且易于扩展的平台。它打破了技术领域的高墙，让每一位开发者都有机会站在同一起跑线上，利用其开源性和模块化设计的优势，在AI领域占据一席之地。与其他同类产品相比，OpenManus的开放性使得它成为不同开发者集成各类语言模型的理想平台，强化了用户体验，让每个开发者都能享受到个性化服务。&lt;/p&gt;
&lt;h2&gt;三、核心功能&lt;/h2&gt;
&lt;h3&gt;代码执行&lt;/h3&gt;
&lt;p&gt;OpenManus能够执行Python代码，实现数据处理、系统交互、自动化等任务。例如处理Excel表格、生成图表，计算数学问题或统计分析，读写本地文件或操作文件系统等。这一功能为开发者提供了强大的工具，能够快速实现各种自动化任务。&lt;/p&gt;
&lt;h3&gt;文件保存&lt;/h3&gt;
&lt;p&gt;该平台支持将文本、代码、网页内容等保存为本地文件，如.txt、.py、.html等。比如保存生成的代码到.py文件，将网页内容保存为.html文件，记录重要信息到笔记文件等，方便用户对数据和结果进行管理和存储。&lt;/p&gt;
&lt;h3&gt;浏览器操作&lt;/h3&gt;
&lt;p&gt;OpenManus可以模拟浏览器操作，支持网页导航、元素交互、内容提取等。具体支持的动作包括访问指定URL、与网页元素交互、提取页面内容、截图当前页面等。这使得它能够在网络信息检索和数据采集方面发挥重要作用。&lt;/p&gt;
&lt;h3&gt;网络搜索&lt;/h3&gt;
&lt;p&gt;它具备实时搜索网络信息的功能，能够获取最新数据或研究资料。用户可以使用它查询新闻事件、技术文档，获取产品价格对比，翻译语言或解释专业术语等，为任务提供最新的信息支持。&lt;/p&gt;
&lt;h3&gt;工作流程管理&lt;/h3&gt;
&lt;p&gt;OpenManus支持分步执行任务，能够逐步调用工具。例如先用google_search找到数据源，再用browser_use提取数据，最后用python_execute处理并保存结果。并且在每步执行后会展示输出，并提示下一步建议，方便用户跟踪任务进度和进行调整。&lt;/p&gt;
&lt;h3&gt;测试相关功能&lt;/h3&gt;
&lt;p&gt;对于测试工程师而言，OpenManus还具有一些特定的功能。它可以基于代码逻辑和需求文档，快速生成多维度测试用例；智能解析运行日志，定位可能的错误根源；结合测试用例，自动生成脚本代码，支持常见测试框架（如Selenium、Pytest）；还能快速生成测试报告、需求文档等，提高测试效率和质量。&lt;/p&gt;
&lt;h2&gt;四、技术架构&lt;/h2&gt;
&lt;h3&gt;模块化设计&lt;/h3&gt;
&lt;p&gt;OpenManus采用了先进的模块化设计理念，通过可插拔的工具（Tools）和系统指令（System Prompt）组合，实现了功能模块的快速扩展。开发者可以根据自己的需求，轻松地添加或调整各种功能模块，如浏览器自动化工具、数据分析工具等，让智能体完美适配不同的工作场景。&lt;/p&gt;
&lt;h3&gt;基于LLM的规划系统&lt;/h3&gt;
&lt;p&gt;其规划系统基于强大的语言模型（LLM），并采用了ReAct（推理与行动）框架。这一框架能够将复杂的任务巧妙地分解为一系列可执行的子步骤，例如先收集信息，再进行分析，最后生成报告，并且能够动态地协调各个工具的调用，确保任务的高效执行。&lt;/p&gt;
&lt;h3&gt;多模型集成&lt;/h3&gt;
&lt;p&gt;OpenManus默认支持GPT - 4o这一主流语言模型，但通过简单的配置文件修改，用户可以轻松切换到其他模型，如Claude 3.5、Qwen VL Plus等。这种多模型集成的方式，让用户能够充分利用不同模型的优势，根据具体任务选择最合适的工具，从而达到最佳的效果。&lt;/p&gt;
&lt;h2&gt;五、竞品分析&lt;/h2&gt;
&lt;h3&gt;主要竞品&lt;/h3&gt;
&lt;h4&gt;1. Manus&lt;/h4&gt;
&lt;p&gt;Manus是由中国初创公司Monica.im开发的全球首款通用型AI智能体。它采用邀请内测制，用户需通过高价购买的邀请码才能体验。其核心定位是自主执行复杂任务并交付成果，采用“规划 - 执行 - 验证”三代理协同模式，能够将复杂任务自主拆解并并行处理。在功能深度和稳定性上表现较强，尤其是在处理复杂任务时。然而，其封闭的内测模式引发了一些质疑，且技术实现细节未公开。&lt;/p&gt;
&lt;h4&gt;2. OWL&lt;/h4&gt;
&lt;p&gt;OWL项目是基于CAMEL - AI Framework搭建的多智能体协作框架。该项目团队喊出了“0天复刻Manus”的口号，在GAIA Benchmark测试中取得了58.18的平均分，在开源框架中排名第一。它支持在线搜索、多模态处理、浏览器操作、文件解析、代码执行等功能，还支持自定义工作流和离线环境运行。&lt;/p&gt;
&lt;h4&gt;3. OpenHands&lt;/h4&gt;
&lt;p&gt;OpenHands（曾用名OpenDevin）是一个由人工智能驱动的软件开发代理平台。它能执行人类开发人员可以执行的操作，如修改代码、运行命令、浏览网页、调用API，甚至从StackOverflow复制代码片段。具有代码生成与修改、任务自动化、多语言支持、多代理协作、安全沙箱环境、Docker部署等特点，在软件开发领域有着独特的应用价值。&lt;/p&gt;
&lt;h3&gt;竞争优势与劣势&lt;/h3&gt;
&lt;h4&gt;优势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开源免费&lt;/strong&gt;：OpenManus完全开源且免费，无需邀请码即可使用，用户可直接在GitHub获取代码并自行部署。这使得更多的开发者能够参与到项目中来，进行二次开发和定制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地化运行&lt;/strong&gt;：支持直接在用户本地电脑运行，提供实时反馈机制，允许用户查看任务执行中的思考日志和进度，保障了数据隐私和安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多模型支持&lt;/strong&gt;：能够兼容多种主流语言模型，用户可以根据具体任务选择最合适的模型，提高了任务执行的效果和灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块化设计&lt;/strong&gt;：便于开发者根据自己的需求组合和扩展功能模块，创造出独特的AI助手，提高了开发效率和产品的适应性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;劣势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能成熟度&lt;/strong&gt;：当前版本功能较基础，演示效果与Manus等竞品存在差距，例如任务执行细致度不足。虽然团队公布了后续优化路线，但在短期内可能无法满足一些对功能要求较高的用户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高Token消耗&lt;/strong&gt;：单次任务可能消耗高达24万Token，运行成本较高，这对于一些预算有限的用户来说可能是一个限制因素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;六、市场模式&lt;/h2&gt;
&lt;h3&gt;开源社区驱动&lt;/h3&gt;
&lt;p&gt;OpenManus依托开源社区快速迭代，GitHub上线首日即获8.1k + Star。开发者可自由修改代码或集成其他工具，形成生态协作。社区成员可以提交问题或代码贡献来参与项目发展，这种开放的开发模式加速了项目的迭代，并为AI爱好者和开发者提供了参与技术创新的机会。&lt;/p&gt;
&lt;h3&gt;应用场景多元化&lt;/h3&gt;
&lt;p&gt;其应用场景几乎涵盖了工作和生活的方方面面，包括自动化办公、开发者辅助、教育与研究、企业级工具、创意实现等。不同的应用场景为其带来了广泛的用户群体和市场需求。例如在自动化办公方面，它可以生成周计划、整理会议纪要、处理Excel数据等；在开发者辅助方面，能够快速生成代码片段、协助调试程序、规划项目架构等。&lt;/p&gt;
&lt;h3&gt;盈利模式展望&lt;/h3&gt;
&lt;p&gt;目前OpenManus本身是免费开源的，但未来可能存在多种盈利模式。例如提供企业级定制服务，根据企业的特定需求进行功能定制和优化；提供技术支持和培训服务，帮助企业和用户更好地使用和集成OpenManus；还可以通过与模型提供商合作，获取一定的分成收益等。&lt;/p&gt;
&lt;h2&gt;七、总结与展望&lt;/h2&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;OpenManus作为一款开源AI智能体平台，具有诸多优势，如开源免费、本地化运行、多模型支持和模块化设计等，为开发者和研究人员提供了一个强大而灵活的工具。然而，它也存在一些不足之处，如功能成熟度有待提高和高Token消耗等问题。在市场竞争中，它与Manus、OWL、OpenHands等竞品各有优劣。&lt;/p&gt;
&lt;h3&gt;展望&lt;/h3&gt;
&lt;p&gt;根据MetaGPT团队公布的路线图，OpenManus将重点突破强化学习微调、动态规划系统、可视化界面和性能基准测试等方面。随着技术的不断发展和完善，相信OpenManus将在AI领域发挥更大的作用，为用户带来更多的价值，同时也有望推动整个开源AI社区的发展。&lt;/p&gt;
</content:encoded></item><item><title>数据产品-BI.md</title><link>https://echo-carrie.github.io/posts/%E6%95%B0%E6%8D%AE%E4%BA%A7%E5%93%81-bi/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/%E6%95%B0%E6%8D%AE%E4%BA%A7%E5%93%81-bi/</guid><description>数据产品-BI产品的介绍及BI产品经理的主要职责</description><pubDate>Mon, 28 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;数据产品-BI产品&lt;/h1&gt;
&lt;h2&gt;BI&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;p&gt;BI（Business Inteligence）是一种主要&lt;strong&gt;由数据仓库、数据分析、查询报表、数据可视化&lt;/strong&gt;等组成的&lt;strong&gt;数据类技术解决方案&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-83355b97ecc3d2054061b287da591469_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;主要结构-三个层次&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可视化分析展现层&lt;/strong&gt;：BI的需求层。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一方面代表了用户的需求，&lt;strong&gt;用户想看什么、要看什么&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;另一方面也代表了&lt;strong&gt;用户要分析什么&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据模型层&lt;/strong&gt;：BI数据仓库。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主要负责企业数据的分析模型，&lt;strong&gt;完成从业务计算规则向数据计算规则的转变&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据源层&lt;/strong&gt;：BI的数据层。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不同部门、业务线的业务信息系统，其底层数据库的数据通过抽取到BI的数据仓库中，建模分析等等，最终支撑到前端的可视化分析展现。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;作用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;打破数据孤岛：&lt;strong&gt;BI可以将企业不同业务信息系统（ERP、CRM、OA）中的数据&lt;/strong&gt;打通&lt;/strong&gt;并进行有效的&lt;strong&gt;整合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提供信息支撑：&lt;strong&gt;BI可以借助合适的查询和分析工具快速准确的提供可视化分析或报表，为企业提供&lt;/strong&gt;决策支持&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;业务信息化 vs 数据信息化&lt;/h2&gt;
&lt;h3&gt;比较&lt;/h3&gt;
&lt;p&gt;企业的 IT 信息化分为两个阶段：一个是业务信息化，一个是数据信息化。这样对比讲，一般的用户更容易理解一些。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-edd4b13a555d9d15bb7771f0216db6d2_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;业务信息化&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;企业使用的ERP、CRM、OA、自建的业务系统等，业务系统的建设都统称为业务信息化。&lt;/li&gt;
&lt;li&gt;**（降本增效）：&lt;strong&gt;主要作用是管理企业的业务流程，提高业务运转效率&lt;/strong&gt;、降低企业人力、时间、精力等成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为BI的建设打下数据基础，是业务管理思路的体现，也是现代的企业管理方式。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据信息化&lt;/strong&gt; ：
&lt;ul&gt;
&lt;li&gt;大数据、BI、数据分析、数据挖掘等都统称为数据信息化。&lt;/li&gt;
&lt;li&gt;**（优化决策）：**数据信息化可以帮助企业全面的了解企业的经营管理，从经验驱动到数据驱动，降低情绪、心理等主观影响，&lt;strong&gt;形成以数据为基础的业务决策支撑，提高决策的准确性&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;目标人群&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;业务信息化的主要使用对象&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一线业务执行层&lt;/strong&gt;--从业务视角出发，录入数据、记录流程、查看业务信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据信息化的主要使用对象&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管理决策层&lt;/strong&gt;--从管理视角通过BI可视化分析去&lt;strong&gt;定位问题、分析问题，最终形成业务决策。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d5d93032d8235173083601c4a644664a_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;数据孤岛&lt;/h2&gt;
&lt;h3&gt;现象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;现象：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数据孤岛一般指的是&lt;strong&gt;只有一部分人能够访问的数据集&lt;/strong&gt;，比如企业不同部门、不同业务信息系统数据库中的数据往往无法互通，只能在各自数据库中储存，无法统一进行利用，没有针对企业整体的全局视角。&lt;/li&gt;
&lt;li&gt;这样一来，&lt;strong&gt;每个部门、每个业务系统的数据都相互分隔，就像海外一座座孤岛，彼此无法连接，无法交流&lt;/strong&gt;，这就是平时经常听到的数据孤岛。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-da0cdaaec00dc96fcc0bf589c2ed8fad_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;解决方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BI作为数据类技术解决方案，在面对数据孤岛问题时，就能通过&lt;strong&gt;数据仓库和数据可视化解决企业面临的“数据孤岛”“信息孤岛”问题&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;所以BI需要企业管理人员来进行规划，并&lt;strong&gt;主要为企业管理人员提供决策信息，辅助进行决策。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;BI获取数据方式&lt;/h3&gt;
&lt;p&gt;​		&lt;strong&gt;BI是通过访问和连接业务系统数据源数据库的方式来进行取数的&lt;/strong&gt;，BI&lt;strong&gt;通过ETL连接数据库抽取业务系统原表数据到数据仓库中加工处理&lt;/strong&gt;，最后支撑到前端的可视化分析报表展现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picx.zhimg.com/v2-83355b97ecc3d2054061b287da591469_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		软件系统的接口对接是因为有的业务软件是 JAVA 开发的，有的是 .NET 开发的，有的是 B/S 架构，有的是 C/S 架构。软件系统之间的接口是需要开发参与的，主要是串联不同软件的业务流程，这种接口是需要动代码的。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;BI在获取数据的接口不一样，是与业务系统软件自身无关的，是只需要访问和连接业务系统背后的数据库就可以的&lt;/strong&gt;，直接从数据库取数，因此是不需要软件接口，或者没有软件接口访问这种概念的。&lt;/p&gt;
&lt;h2&gt;BI vs 数据中台 vs 大数据&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;大数据&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是&lt;strong&gt;技术基础设施&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;指的是对&lt;strong&gt;海量、多样性、高速变化&lt;/strong&gt;的数据进行采集、存储、计算和处理的一整套技术体系。&lt;/li&gt;
&lt;li&gt;核心是分布式存储（如HDFS）、分布式计算（如Spark、Flink）和多源数据接入（如Kafka）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;数据中台&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是&lt;strong&gt;企业的数据能力平台&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;基于大数据架构，围绕&lt;strong&gt;数据采集 → 数据建模 → 数据资产管理 → 数据服务&lt;/strong&gt;搭建的一套&lt;strong&gt;支撑多业务部门复用数据&lt;/strong&gt;的中台系统。&lt;/li&gt;
&lt;li&gt;核心是构建标准化、共享化的数据服务体系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;image-20250427211807805&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;BI（Business Intelligence）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是&lt;strong&gt;应用层工具&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;通过调用数据中台或数据仓库中处理好的数据，进行&lt;strong&gt;数据分析、数据展现、数据可视化&lt;/strong&gt;，辅助业务决策。&lt;/li&gt;
&lt;li&gt;核心是&lt;strong&gt;数据呈现与分析&lt;/strong&gt;，工具如派可数据、Tableau、PowerBI等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;关系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大数据架构&lt;/strong&gt;提供了底层&lt;strong&gt;采集、存储、计算能力&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据中台&lt;/strong&gt;在大数据架构基础上，增加了&lt;strong&gt;建模、资产管理、服务化输出&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BI&lt;/strong&gt;作为上层应用，&lt;strong&gt;连接数据中台或数据仓库提供的数据服务&lt;/strong&gt;，进行&lt;strong&gt;可视化分析&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**简单理解：**大数据是地基，数据中台是房子结构，BI是房子里的窗户、灯光和装饰，面向业务人员使用。&lt;/p&gt;
&lt;h2&gt;BI误区&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、BI就是报表可视化，就是一堆可视化图表，BI 就是前端可视化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		BI是一套完整的有数据仓库、数据分析、数据报表等组成的数据技术类的解决方案，在一个BI项目中，20% 的时间做前端分析报表，80% 的时间都在底层数据仓库的设计、ETL 的开发、取数开发等工作。&lt;/p&gt;
&lt;p&gt;​		所以可视化报表只是BI的最终呈现，但不是 BI 的全部。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、BI就是一个拖拉拽的分析工具产品。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		拖拉拽的可视化分析工具准确来讲只能解决 BI 的一部分，即可视化分析。但其实 BI 所包括的技术范围还是比较广的，涉及到从底层数据取数到前端展现分析的各个方面。&lt;/p&gt;
&lt;p&gt;​		单&lt;strong&gt;纯拖拉拽的BI可视化分析工具严格来讲只能定位于个人和部门级，和企业级的BI 有很大的不同&lt;/strong&gt;，所以单纯的上一个BI分析工具发挥不了BI的真正作用，也替代不了BI的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、以前也总有人说BI就是业务驱动，BI就是 BI，跟数据仓库没有关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	这个问题很有深度，在以前我也这么认为过，总觉得有了BI就不需要数据仓库建模，业务人员就可以自己做 BI分析，就可以拖拉拽做 BI分析，不需要IT人员支撑，敏捷BI不需要 IT 介入，不需要建数据仓库。&lt;/p&gt;
&lt;h2&gt;BI数据产品经理&lt;/h2&gt;
&lt;h3&gt;职责&lt;/h3&gt;
&lt;p&gt;​		**对数据进行采集、整理、分析，以对业务进行测量及建议，最终形成BI数据产品。**数据产品不仅限于一张张报表，更是一个通过数据得到结论的工具。&lt;/p&gt;
&lt;h3&gt;输出&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指标字典，这是一个需求池，需分析的各种指标及指标计算方式都在此详尽的列出来。&lt;/li&gt;
&lt;li&gt;源数据字典，指标都是由源数据计算得来，使用了哪些源数据及对源数据的要求在此清晰的列出来。&lt;/li&gt;
&lt;li&gt;BI数据产品，比如数据后台，数据展示屏或者数据报表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;常见工作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;整理需求&lt;/strong&gt;。需求既来自各部门，也来自数据部门自身对指标的全局规划，&lt;strong&gt;白话的需求被定义为专业的数据指标进而被加入指标字典。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义指标计算方式&lt;/strong&gt;，有些指标的计算方式业界有通用标准，而有的指标，则是强业务相关，需要数据部门自己定义，没有对业务的深入理解是无法准确定义指标及其计算方式的，&lt;strong&gt;指标定义与指标计算方式是指标字典中最重要的内容&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;整理源数据&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;整理数据：源数据一般有三大来源，&lt;strong&gt;移动端和Web端的埋点上报，业务数据库和第三方数据&lt;/strong&gt;。业务数据库相对准确，且为结构化数据，埋点上报和第三方数据则往往杂乱不堪，而且是半结构化数据，但是无论哪种源数据，都&lt;strong&gt;必须经过清洗才能够使用，直接用未清洗的数据，不可避免会garbage in garbage out&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;清洗数据：定义出清晰可用的数据清洗规则，最终形成源数据字典。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计并推动完成数据报表产品&lt;/strong&gt;：据产品经理也是产品经理，产品经理要做的事情一件都没少，好在数据产品多是后台，对美观和易用性的要求不像C端产品那么高，但是&lt;strong&gt;数据可视化是必修课&lt;/strong&gt;，免得做出用柱状图来标示比例这样不专业的事情。AntV的墨者学院对各种图表的使用场景做了非常好的梳理，推荐给大家（http://antv.alipay.com/zh-cn/vis/chart/index.html）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应对临时一次性需求&lt;/strong&gt;：这种需求总是不可避免，而好听的数据民主化又是那么遥不可及，所以临时的一次性分析经常还是需要专业数据人员来做，用些方便的工具事半功倍，推荐&lt;strong&gt;BDP&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;岗位要求&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;不会写代码的数据分析师不是好产品经理！&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;写代码&lt;/h4&gt;
&lt;p&gt;​	做数据产品经理，多少&lt;strong&gt;对大数据和数据仓库的概念要了解，Hadoop生态，Hive，Spark，Flume，Kafka，结构化，半结构化，星型模型，OLAP&lt;/strong&gt;，至少都知道这些是什么东西，&lt;strong&gt;SQL能简单写写&lt;/strong&gt;，不至于每次查数都叫研发帮忙。如果想玩的更6，多写些&lt;strong&gt;相对复杂的SQL脚本自动跑分析&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;数据分析&lt;/h4&gt;
&lt;p&gt;​	 数据分析是一个看似高大上的工作，可是真正做数据分析的时候有一多半的时间是在清洗数据。什么是清洗数据？这个字段格式不对，那里多了一个空格，即使写好了脚本自动清洗，但是总会有新的情况出现需要加入新的清洗规则。&lt;/p&gt;
&lt;p&gt;​	 当然数据分析也的确是一个考验逻辑思维能力的工作，如果只是做做数据统计那最多算是“取数的人”，&lt;strong&gt;只有通过数字的表象看到背后的客观原因才算是真正的做数据分析&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;产品经理&lt;/h4&gt;
&lt;p&gt;​	产品经理不是一个好做的工作，天天被各方怼，需求方怼产品不好用，研发怼产品需求太傻。**而数据产品经理经常会被怀疑，这数字对么？**我觉得产品经理最重要的能力是长期在各方压力下解决问题并保持心态乐观向上。想做到这一点，绝对是修为超脱常人的高手，我还在向这种境界努力。&lt;strong&gt;另外互联网时代做产品有一个很重要的思路是“小步快跑”，不求每个版本多加了多少黑科技，而是要求产品快速迭代跟上需求变化。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;引用文献&lt;/h2&gt;
&lt;p&gt;1 https://www.jianshu.com/p/be8546de396c 怎样做一个BI方向的数据产品经理宫胖子想瘦&lt;/p&gt;
&lt;p&gt;2 https://zhuanlan.zhihu.com/p/613531582 BI 是什么？BI 的服务对象是谁？一篇万字长文全方位解析BI ! - 知乎&lt;/p&gt;
</content:encoded></item><item><title>数据产品-面试.md</title><link>https://echo-carrie.github.io/posts/%E6%95%B0%E6%8D%AE%E4%BA%A7%E5%93%81-%E9%9D%A2%E8%AF%95/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/%E6%95%B0%E6%8D%AE%E4%BA%A7%E5%93%81-%E9%9D%A2%E8%AF%95/</guid><description>数据产品-面试</description><pubDate>Mon, 28 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;数据产品回答思路&lt;/h1&gt;
&lt;h2&gt;面试问题思考流程和角度&lt;/h2&gt;
&lt;p&gt;​		首先，拿到一个面试题，就像做高考题一样，&lt;strong&gt;要系统化地思考这个问题，而不是上来就直接回答，想哪说哪，没有逻辑（俗称产品思维）&lt;/strong&gt;，对于这种情景模拟题，面试官是会允许你思考1~2分钟再回答的，会给你思考和准备的时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://uploadfiles.nowcoder.com/images/20231101/146329491_1698833727453/4A47A0DB6E60853DEDFCFDF08A5CA249&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;千万不能拿到问题就口若悬河，这样会被直接打上不严谨，缺乏思考的标签。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.审题环节&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	为什么要问这个问题，面试官问的问题是带着特定的考察点的，就像中学做阅读理解，你的答案命中的出题者设计点越多得分越高，踩点给分嘛。&lt;/p&gt;
&lt;p&gt;​	以这个题目为例，主要考察点：&lt;strong&gt;数据分析思路、产品规划设设计能力、数据基础知识（如数据源、数据埋点采集到产品化的流程）、其他软性的逻辑和表达能力、思考的角度、深度&lt;/strong&gt;等。&lt;/p&gt;
&lt;h3&gt;2.思考环节&lt;/h3&gt;
&lt;p&gt;​	有一本适合产品经理看的书叫《学会提问》，作为回答者，需要针对问题进行分析，麦肯锡咨询顾问芭芭拉·明托在《金字塔原理》中提出，SCQA模型是一个典型的结构化思考和表达的工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://uploadfiles.nowcoder.com/images/20231101/146329491_1698833733444/FB5C81ED3A220004B71069645F112867&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;S：问题的情景&lt;/p&gt;
&lt;p&gt;美妆品牌公司的生产部门想要推出新品类（新产品），比如面霜，产品定位的目标消费者是95后年轻女性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C :冲突或矛盾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在经济大环境不好，试错成本非常高，生产部门不知道该推出什么产品才能热销&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是否可以通过大数据、AI的能力，帮助生产部门快速确定推出哪一款产品才能取得成功&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A：答案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	先跳出问题文字的本身，思考想要成功推出一款新产品，需要具备哪些条件？天时、地利、人和的本质是供需关系。新产品的需求怎么样（市场潜力、用户需求），新产品的供给如何（竞争格局、4P因素（产品、价格、渠道、营销）。对于新产品的决策者，需要从战略到落地执行都能够有数据分析或产品的支持。就像现在很多人创业无门或者失败，主要原因是不了解目前市场缺什么，用户需要什么，怎样才能找到目标用户，把产品成功销售给目标客户。&lt;/p&gt;
&lt;p&gt;梳理需要解决的痛点问题如下：&lt;/p&gt;
&lt;p&gt;所以，针对怎样推出新产品业务需求，梳理需要解决的痛点问题如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）市场空间与增长潜力&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;市场空间是万亿千亿还是几百万的生意，是处于高速增长期，还是已经开始衰退了。如果市场已经萎缩了，不管不顾，还是直接推出新产品，失败的概率极大。所以任何商业的分析，大的前提都是市场方面的战略分析（PEST）&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&quot;https://uploadfiles.nowcoder.com/images/20231101/146329491_1698833832768/09DD8C2662B96CE14928333F055C5580&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）竞争格局怎么样&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;市场大，增长快，但是现在竞争对手有哪些，各自在什么细分领域有优劣势，知彼知己才能百战不殆。不了解竞对，推出新产品，用户凭什么买你的，价格战现如今已经不香了，现在90后、Z时代购物，融入了很多情怀因素。&lt;/p&gt;
&lt;p&gt;（3）用户是谁需求是什么&lt;/p&gt;
&lt;p&gt;现在年轻人流行什么面霜？哪些属性的面霜卖的比较好？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）产品如何匹配用户需求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;95后、年轻用户在哪里，喜欢什么功效、包装、肤质的面霜？他们的购物习惯、消费能力是什么&lt;/p&gt;
&lt;p&gt;针对这些具体的问题的解决方案，就是数据产品所需要的功能点，该产品用户侧的核心功能是趋势分析，功能主要包括：&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;新品推荐&lt;/p&gt;
&lt;p&gt;基于业务规则或算法模型，推荐市场空间大、增长潜力快的面霜产品属性，如包装、功效、适用肤质、净含量、成分等，任何智能化的产品都是锦上添花，前期产品迭代需要把基础的分析能力建设好，中长期版本再开始一些规则沉淀或者智能化推荐。因为职责不同，新品引入需要商业分析&amp;amp;战略分析人员大量的分析工作，数据产品本质是工具，提升他们的工作效率，如果直接拿来注意，如果算法推荐不准，带来的决策失误，是谁的锅?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;市场分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对应待解决的问题就是帮助生产部门了解现在市场空间是否够大，是告诉增长还是已经衰退，可以从面霜产品GMV及增长率（同比、环比），以及不同属性（肤质、功效等）的面霜市场占比及增速来提供一些数据可视化的展现形式，支持筛选、排序等常用的交互操作。&lt;/p&gt;
&lt;p&gt;竞争格局：&lt;/p&gt;
&lt;p&gt;现在生意不好做本质就是你能想到的赚钱的方法，别人已经早就做过千百万次了，想要成功，只能尽量找差异化，人无我有，人有我优。所以产品功能上，需要能够支持分析面霜产品主要竞对，各自的销量、增速、用户群体。&lt;/p&gt;
&lt;p&gt;用户需求&lt;/p&gt;
&lt;p&gt;市场营销理论从4P转向4C核心就是从产品为中心到用户为中心，也就是过去是先有产品，再卖给用户，现在是先有用户需求，再去造产品。所以数据需要具备识别用户需求的能力，比如分析面霜产品不同属性的销量占比、销量增速，挖掘高潜需求空间&lt;/p&gt;
&lt;p&gt;用户画像&lt;/p&gt;
&lt;p&gt;虽然题目中的目标用户是95后女性群体，但是从产品功能上需要考虑扩展性，所以需要具备针对不同属性面霜产品的用户群体画像，比如：面霜产品的用户性别、年龄、地域、肤质、消费水平（价格带）、购物渠道偏好（线下、电商、直播等）、功效偏好、包装偏好、成分偏好&lt;/p&gt;
&lt;p&gt;商品清单&lt;/p&gt;
&lt;p&gt;基于市场、竞对数据提供头部或竞对热门商品清单，可以帮助生产部门快速定位具体的竞品，进行跟进。&lt;/p&gt;
&lt;p&gt;​		此外，&lt;strong&gt;数据产品需要考虑数据的采集和获取，否则就是无源之水，巧妇难为无米之炊&lt;/strong&gt;。&lt;strong&gt;数据采集、权限管理是数据产品必须要要考虑的因素&lt;/strong&gt;，而新品效果监控是为了产品上线后进行跟踪监控，形成产品闭环。否则只是提供上新工具，但是上线后，效果如何不知道，就不能进行PDCA的持续迭代。&lt;/p&gt;
&lt;h2&gt;产品表达的逻辑&lt;/h2&gt;
&lt;p&gt;介绍产品或者项目时，通用的结构化的逻辑线是：Who、Why、How、What&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Who：&lt;strong&gt;产品的&lt;/strong&gt;核心用户是谁，在什么情况下，遇到了什么问题，提了什么样的需求。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why：&lt;strong&gt;为什么要做这个产品，&lt;strong&gt;业务背景及对应的痛点问题是什么&lt;/strong&gt;？也就是要能&lt;/strong&gt;一句话清楚地描述产品地核心定位&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;**How：**针对这些痛点问题，你是怎么做的，头痛不能医脚，需要针对问题（需求），&lt;strong&gt;按照优先级重要程度一一给出对应的解决方案&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;**What：**最后才是产品功能，&lt;strong&gt;按照用户体验五要素理论，表现层是最后一个层级&lt;/strong&gt;，所以如果一上来就讲这个产品主要包括：A、B、C功能，就缺少了灵魂和骨架，而且枚举地功能越多，越容易听走神、记不住，&lt;strong&gt;一般能够记住地要点为3-5个&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://uploadfiles.nowcoder.com/images/20231101/146329491_1698833813771/8266E4BFEDA1BD42D8F9794EB4EA0A13&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;案例&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;Step 1：问题的澄清和产品用户、定位介绍&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;您提的这个问题，是想要帮助业务部门构建一个快速辅助决策推出新产品的数据产品/工具。这个数据产品核心用户是业务生产部门，产品定位是为他们日常新品引入提供数据决策能力支持，我们可以先把这个产品叫做：新品趋势洞察。&lt;/p&gt;
&lt;h4&gt;Step2：待解决的业务问题总结&lt;/h4&gt;
&lt;p&gt;对于新品引入这个场景来说，需要解决业务部门以下几个问题：&lt;/p&gt;
&lt;p&gt;（1）市场环境分析&lt;/p&gt;
&lt;p&gt;XXXX&lt;/p&gt;
&lt;p&gt;（2）竞争对手分析&lt;/p&gt;
&lt;p&gt;XXX&lt;/p&gt;
&lt;h4&gt;Step3：产品规划及功能介绍&lt;/h4&gt;
&lt;p&gt;​		&lt;strong&gt;针对需要解决的主要痛点，新品趋势洞察分析将包含&lt;/strong&gt;新品推荐、市场分析、竞对分析、用户画像、用户需求、商品清单等数据分析能力。&lt;/p&gt;
&lt;p&gt;​		此外，需要通过&lt;strong&gt;权限管理控制页面、数据、功能权限，保障数据安全&lt;/strong&gt;，最后考虑到新品推出后，需要跟进效果来不断优化投入、运营策略，还可以在&lt;strong&gt;V2、V3的版本中，增加新品效果分析等功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		接下来，我将对趋势分析的&lt;strong&gt;核心页面做个系统的介绍&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		第一个，&lt;strong&gt;市场分析主要解决的问题是，核心功能点包括XXX，可以通过XX可视化方式进行呈现；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		第二个页面是XX，XXX&lt;/p&gt;
&lt;h4&gt;Step4：数据获取思路介绍&lt;/h4&gt;
&lt;p&gt;​		产品功能规划的同时，要考虑数据的可得、可用情况，例如，&lt;strong&gt;可以通过外部数据爬取、内部数据采集、XX等渠道获取产品销量、用户相关的数据&lt;/strong&gt;，作为后期分析的数据源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step5：总结收尾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		总结下来，想要为业务部门构建一款&lt;strong&gt;辅助新品推出决策的数据产品&lt;/strong&gt;，需要&lt;strong&gt;从业务场景、分析流程、要解决的痛点角度&lt;/strong&gt;，进行数据产品功能的规划和设计，同时需要考虑&lt;strong&gt;数据获取、数据安全&lt;/strong&gt;等问题。有了初步方案后，可以和业务进行评审确认，最终推动产品进入开发排期流程。&lt;/p&gt;
&lt;p&gt;​		以上是我的设计思路，谢谢。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;必问问题&lt;/h2&gt;
&lt;p&gt;你为什么做产品经理，为什么想要选择数据产品经理？&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;个人能力+经历+行业展望&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.个人能力：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	我具备较强的数据理解力和结构化分析能力，擅长从数据中提取关键信息，抽象成指标体系和业务洞察。比如说我在学校期间有参加过4次建模比赛，积累了丰富的数据分析经验。&lt;/p&gt;
&lt;p&gt;​	同时，我善于沟通，比如说我曾经主导过3个比赛项目，在这其中需要和前后端、算法进行沟通协作。这有利于实际的跨部门沟通，可以把业务需求准确地转化为数据需求，并推动数据资产的建设与落地。&lt;/p&gt;
&lt;p&gt;​	这种&lt;strong&gt;对业务和数据的双向理解能力&lt;/strong&gt;，非常符合BI数据产品经理对“业务理解+数据能力”并重的要求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.行业展望：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 介绍一下你自己吧：&lt;/strong&gt;
我具备扎实的数据理解能力和良好的结构化思考习惯，对数据驱动业务增长有浓厚的兴趣。&lt;/p&gt;
&lt;p&gt;​	在过往的项目经历中，我参与了数据指标体系搭建、用户行为数据分析等工作，熟悉从需求调研、数据建模、报表开发到数据可视化落地的完整流程。同时，在与数据开发、业务团队的跨部门协作中，我积累了较强的需求挖掘、数据梳理和项目推进能力。&lt;/p&gt;
&lt;p&gt;​	我选择BI数据产品经理这个方向，是因为我认为未来企业对数据驱动决策的依赖会越来越深，BI作为数据到业务价值的重要连接器，既需要懂数据也需要懂业务，这正好契合了我的能力结构和职业规划。&lt;/p&gt;
&lt;p&gt;​	接下来，我希望能继续深耕BI方向，不断提升自己在数据建模、指标体系优化、可视化体验设计等方面的专业能力，帮助业务更好地用数据提升决策效率和竞争力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.介绍一下你做过的项目吧。你在这个项目遇到最大的问题/困难是什么，你是如何解决的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&quot;C:\Users\52212\AppData\Roaming\Typora\typora-user-images\image-20250428205923852.png&quot; alt=&quot;image-20250428205923852&quot; style=&quot;zoom: 25%;&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;那我来简要介绍诈骗终结者项目，这个项目是我在参加中国软件杯中完成的项目，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**市场背景：**前涉诈电信案件频发，目前电信网络诈骗的作案手法从电话、短信转向利用APP等网络工具，约占整体案发量的70%。&lt;/li&gt;
&lt;li&gt;**目标用户：**涉诈相关案件办案员。&lt;/li&gt;
&lt;li&gt;**痛点：**集中解决目前大部分软件存在的apk解析信息繁杂、难以理解；无法较好存档；没有相关通联分析的问题。&lt;/li&gt;
&lt;li&gt;**功能：**提出apk静动态相结合分析、威胁情报通联分析、基于大语言模型的apk解析文档解读、apk文档导出、黑白名单库的功能，方便办案人员进行案件存档。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遇到的最大困难：&lt;/p&gt;
&lt;p&gt;在完成这个项目的过程中，我们主要困难有两个，一点是时间安排方面的，另外一点则在于数据收集方面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时间安排方面&lt;/strong&gt;，因为我们的比赛时间相对紧迫，7/19要完成的赛题，我们组从7/1才组好队。所以我们面临的是十分紧迫的技术选择以及开发时间。那么对于这一点，我们项目主要调研了行业白皮书以及相关论文，比较快的完成了技术选择；在功能开发方面，我们主要是选择了排优先级的方式（主要考量投入、产出）完成了优先级的安排；此外我们还使用了notion进行项目排期，以顺利推荐项目完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于数据收集方面&lt;/strong&gt;，由于模型训练需要，我们需要收集一定的黑白名单信息进行apk检测模型训练。
&lt;ul&gt;
&lt;li&gt;那么一般的白名单软件相对来说是比较好收集的，通过爬虫的方式就可以进行收集。&lt;/li&gt;
&lt;li&gt;遇到的最大问题是&lt;strong&gt;黑灰产APP的数据收集困难&lt;/strong&gt;。这类APP分布隐蔽、不公开发布，且更新频繁，单纯依靠传统应用市场爬虫很难获取到有效样本。&lt;/li&gt;
&lt;li&gt;我们还设计了&lt;strong&gt;社交渠道爬取机制&lt;/strong&gt;，在灰产常用传播渠道（如论坛、社交群组、分享盘）上，结合关键词、特征爬取策略，自动化抓取潜在黑灰产应用，并结合现有特征库进行初步筛选。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4.你这个项目有上线吗？数据从哪里来的，你是如何收集数据的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&quot;我们通过问卷星和技术社群发放问卷，共回收200多份有效样本。问卷设计了针对操作体验的痛点问题，发现有68%的用户反馈操作复杂，52%的用户反馈报告术语理解困难。这些数据通过多选题统计得出，并结合后续竞品分析进一步印证了用户痛点的普遍性。&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.你这里的数据指标是如何确定的，是如何计算的？如何计算用户满意度。。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;清醒派：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标类别&lt;/th&gt;
&lt;th&gt;指标名称&lt;/th&gt;
&lt;th&gt;指标定义&lt;/th&gt;
&lt;th&gt;计算方法参考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用户调研指标&lt;/td&gt;
&lt;td&gt;检测准确性差异率&lt;/td&gt;
&lt;td&gt;用户反馈疲劳检测产品存在识别不准确的问题比例&lt;/td&gt;
&lt;td&gt;不准确反馈人数 ÷ 总调查人数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户调研指标&lt;/td&gt;
&lt;td&gt;干扰性反馈率&lt;/td&gt;
&lt;td&gt;用户反馈提示干扰性太强的问题比例&lt;/td&gt;
&lt;td&gt;反馈干扰过强人数 ÷ 总调查人数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户调研指标&lt;/td&gt;
&lt;td&gt;干预效果差反馈率&lt;/td&gt;
&lt;td&gt;用户反馈现有干预措施无效的比例&lt;/td&gt;
&lt;td&gt;反馈干预无效人数 ÷ 总调查人数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户调研指标&lt;/td&gt;
&lt;td&gt;用户接受度&lt;/td&gt;
&lt;td&gt;愿意使用疲劳检测产品的用户比例&lt;/td&gt;
&lt;td&gt;愿意使用人数 ÷ 总调查人数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户调研指标&lt;/td&gt;
&lt;td&gt;使用场景认知度&lt;/td&gt;
&lt;td&gt;用户识别主要适用场景（如长途驾驶）的比例&lt;/td&gt;
&lt;td&gt;指定场景用户人数 ÷ 总调查人数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户调研指标&lt;/td&gt;
&lt;td&gt;提醒方式偏好比例&lt;/td&gt;
&lt;td&gt;用户对不同提醒方式（声音、震动等）的偏好占比&lt;/td&gt;
&lt;td&gt;各提醒方式选择人数 ÷ 总调查人数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户调研指标&lt;/td&gt;
&lt;td&gt;干预内容偏好比例&lt;/td&gt;
&lt;td&gt;用户偏好不同干预内容（音乐、冷风等）的占比&lt;/td&gt;
&lt;td&gt;各干预方式选择人数 ÷ 总调查人数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;产品体验指标&lt;/td&gt;
&lt;td&gt;检&lt;strong&gt;测延迟时间&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;系统从疲劳状态发生到提醒的响应时间&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;平均响应时长（秒）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;产品体验指标&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;误报率（False Positive Rate）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;正常状态被错误识别为疲劳的比例&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;误报次数 ÷ 总检测次数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;产品体验指标&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;漏报率（False Negative Rate）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;疲劳状态未被识别的比例&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;漏报次数 ÷ 总疲劳事件数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;产品体验指标&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;干预生效率&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;干预后成功改善疲劳状态的比例&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;成功干预事件数 ÷ 总干预事件数 × 100%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;项目推进指标&lt;/td&gt;
&lt;td&gt;版本迭代次数&lt;/td&gt;
&lt;td&gt;产品正式发布前的迭代轮数&lt;/td&gt;
&lt;td&gt;记录每次功能或体验版本更新数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;项目推进指标&lt;/td&gt;
&lt;td&gt;需求评审次数&lt;/td&gt;
&lt;td&gt;围绕需求召开评审会议的次数&lt;/td&gt;
&lt;td&gt;记录正式评审会数量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如何判定是否存在疲劳：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准化测评法&lt;/strong&gt;+&lt;strong&gt;人工标注&lt;/strong&gt;+&lt;strong&gt;脑电设备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	我们在实验阶段收集了部分真实驾驶视频，并通过人工标注（如打哈欠、闭眼时长、头部动作）+被试自评量表（KSS 1-9分）+脑电设备三重确认，构建了疲劳事件 Ground Truth 数据集，作为后续计算误报率、漏报率的依据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;极度清醒，非常警觉&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;清醒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;有点清醒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;稍微有点困倦&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;有点困倦，不是很清醒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;有困意，偶尔闭眼&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;困倦，容易闭眼&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;非常困倦，挣扎着保持睁眼&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;极度困倦，几乎无法保持清醒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;公式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;误报率（FPR）&lt;/td&gt;
&lt;td&gt;正常状态被系统误判为疲劳的比例&lt;/td&gt;
&lt;td&gt;误报次数 ÷ 总检测次数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;漏报率（FNR）&lt;/td&gt;
&lt;td&gt;疲劳状态未被系统检测到的比例&lt;/td&gt;
&lt;td&gt;漏报次数 ÷ 总疲劳事件数 × 100%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;但是，&lt;strong&gt;关键在于实际环境下&lt;/strong&gt; ——&lt;strong&gt;系统检测结果&lt;/strong&gt;是客观的（基于摄像头、模型输出）； &lt;strong&gt;&quot;真实状态&quot;怎么确定&lt;/strong&gt;就成了问题。&lt;/p&gt;
&lt;p&gt;后期视频复核+KSS量表辅助&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全程录像，疲劳检测系统打出结果。&lt;/li&gt;
&lt;li&gt;赛后找专业标注员回放视频，根据表情、闭眼、打哈欠、驾驶异常判断疲劳事件。&lt;/li&gt;
&lt;li&gt;以人工审核结果作为真值。&lt;/li&gt;
&lt;li&gt;优点：准确；缺点：费时费力，主观性也存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6.有没有参考什么技术白皮书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2023-2029年全球与中国疲劳驾驶预警系统市场深度调研与发展趋势分析报告&lt;/p&gt;
&lt;h2&gt;数据产品经理-xhs&lt;/h2&gt;
&lt;h3&gt;数据采集方法&lt;/h3&gt;
&lt;p&gt;一、内部主动采集&lt;/p&gt;
&lt;p&gt;1、数据库查询&lt;/p&gt;
&lt;p&gt;2、日志收集&lt;/p&gt;
&lt;p&gt;3、传感器收集&lt;/p&gt;
&lt;p&gt;二、内部被动采集&lt;/p&gt;
&lt;p&gt;1、ETL（estract，transformer，load）&lt;/p&gt;
&lt;p&gt;三、外部主动采集&lt;/p&gt;
&lt;p&gt;1、调查文件&lt;/p&gt;
&lt;p&gt;2、网络爬虫&lt;/p&gt;
&lt;p&gt;3、公开数据集&lt;/p&gt;
&lt;p&gt;四、外部被动采集&lt;/p&gt;
&lt;p&gt;1、外部数据源合作&lt;/p&gt;
&lt;p&gt;2、公开数据集&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&quot;C:\Users\52212\AppData\Roaming\Typora\typora-user-images\image-20250428224659930.png&quot; alt=&quot;image-20250428224659930&quot; style=&quot;zoom:50%;&quot; /&amp;gt;&lt;/p&gt;
&lt;h3&gt;埋点的方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;代码埋点：代码埋点是指在代码中手动添加埋点代码，通过监控用户行为事件，收集用户数据。这种方式需要开发人员配合，一般适用于网站或应用开发过程中。代码埋点也称自定义埋点。
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;优点：灵活性高，准确。缺点是维护难。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;举例:在电商网站中，可以在商品详情页的购买按钮处添加一个点击事件的埋点，记录用户点击了该按钮的时间、位置和商品信息等数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可视化埋点：可视化埋点是指通过可视化工具，&lt;strong&gt;如GoogleAnalytics、Mixpanel、Amplitude等&lt;/strong&gt;，在页面上&lt;strong&gt;选择需要埋点的元素，即可自动生成代码，并收集相应的数据。&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;可视化埋点是较多产商、自研轮子兵家必争之地，&lt;strong&gt;希望通过可视化埋点平台为业务提供一站式埋点方案。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点是标准化程度高，缺点是不灵活，覆盖场景有限。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;举例:在SaaS平台中，可以使用GoogleAnalytics等工具，在注册页面的“提交”按钮处添加一个点击事件的埋点，记录用户的注册行为、来源渠道和注册成功率等数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;无埋点：无埋点（全埋点）是指通过前端技术，自动收集用户的行为数据，无需手动添加埋点代码。
&lt;ol&gt;
&lt;li&gt;这种方式适用于简单的数据采集需求，例如页面停留时间、滚动深度、搜索关键词等数据。&lt;/li&gt;
&lt;li&gt;适用于&lt;strong&gt;简单的数据采集，在实际业务上用的不多&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一是因为&lt;strong&gt;数据上报量级大，二是因为存储成本&lt;/strong&gt;大，在降本增效大前提下，几乎没有用武之地。&lt;/li&gt;
&lt;li&gt;举例:在新闻网站中，可以&lt;strong&gt;使用无埋点技术收集用户的页面停留时间、点击量和滚动深度等数据，了解用户对不同新闻类型和内容的兴趣和喜好。&lt;/strong&gt;
第一种:自己公司研发在产品中注入代码统计并搭建起相应的后台查询。
第二种:第三方统计工具，如友盟、神策、Talkingdata、GrowinglO等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;埋点设计&lt;/h3&gt;
&lt;p&gt;1、如何设计埋点需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**确定目标:**首先明确为什么要进行埋点，是为了分析用户行为、优化产品功能还是为了评估活动效果等。&lt;/li&gt;
&lt;li&gt;**梳理需求:**根据目标，梳理出需要哪些数据来支持分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、设计埋点原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**全：**埋点数据要尽量全面，不要遗漏关键的用户行为或事件。&lt;/li&gt;
&lt;li&gt;**细：**埋点的颗粒度要细，尽量到具体事件，以便后期进行深入的数据分析。&lt;/li&gt;
&lt;li&gt;**时：**埋点和数据记录、更新要及时、实时，以反映用户行为的最新动态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、设计埋点文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**梳理产品结构和业务流程：**明确产品的核心功能和业务流程，找出关键的用户行为或事件。&lt;/li&gt;
&lt;li&gt;**确定关键指标：**基于产品目标和需求，确定需要监控的关键指标，如用户活跃度、转化率等。&lt;/li&gt;
&lt;li&gt;**设计埋点框架：**基于产品功能的路径转化和重要指标链路，设计出可供记录的埋点框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数据报表产品经理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;接到业务部门的一个报表需求时，你的处理流程是什么？ 考察点：业务需求沟通、数据口径梳理、数据分析思路、产品工作流程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合过去的项目经验，你是怎么构建指标体系的 考察点：指标体系建设、数据分析思路&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对指标口径不统一的问题，你是怎么解决的 考察点：指标体系落地流程规范建立、数据产品的统筹协调能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过去的可视化产品中，都用过哪些图表类型，XX图使用场景是什么？ 考察点：可视化图表特征及的适用场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见的埋点方案有哪些，优劣势是什么 考察点：埋点数据采集基础理论，App&amp;amp;小程序数据可视化分析和埋点密切相关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;举一个你做过的数据可视化产品支持业务决策的例子 考察点：考察是只是被动的完成报表需求还是会主动思考，数据报表如何辅助业务决策&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务部门的XX指标下降了，你会如何分析？ 考察点：数据分析思路，以及分析思路和数据报表产品的整合能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过去做过最成功/最失败的一个数据可视化产品，为什么？ 考察点：产品思考/总结能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于XX场景，设计一个可视化分析产品（Dashboard），你会怎么做，可以画草图示意 考察点：情景模拟，给定新的场景考察产品规划、需求分析、数据可视化分析产品的综合处理流程，是否可以举一反三&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你认为数据报表需求的PRD文档需要具备哪些要素，才能和开发更有效地沟通和合作？ 考察点：PRD文档结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你们现在前端用的是什么可视化组件，数据查询响应性能是多长时间？查的是什么数据库？ 考察点：除了产品本身之外，是否关注技术实现，了解一些基础的概念和适用场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户行为分析类的产品了解哪些？优劣势是什么？ 考察点：产品经验，用户行为分析，对行业关注度，竞品分析&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1. 接到业务部门一个报表需求时，处理流程？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;需求理解&lt;/strong&gt; ➔ &lt;strong&gt;口径梳理&lt;/strong&gt; ➔ &lt;strong&gt;数据源确认&lt;/strong&gt; ➔ &lt;strong&gt;设计方案&lt;/strong&gt; ➔ &lt;strong&gt;开发联动&lt;/strong&gt; ➔ &lt;strong&gt;验收上线&lt;/strong&gt; ➔ &lt;strong&gt;持续迭代&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求阶段：先与业务充分沟通，理解【业务目标】和【使用场景】。不是只听需求，要问&quot;为什么要这张表&quot;，&quot;关键指标是什么&quot;。&lt;/li&gt;
&lt;li&gt;口径阶段：梳理所有指标定义，和业务、数据侧确认统一口径。&lt;/li&gt;
&lt;li&gt;数据源阶段：确认数据来源、字段是否齐全，必要时协调数据建设。&lt;/li&gt;
&lt;li&gt;方案阶段：初步设计表格、图表形式（Sketch草图），与业务评审。&lt;/li&gt;
&lt;li&gt;开发联动：写清楚PRD，特别是口径定义、交互逻辑。&lt;/li&gt;
&lt;li&gt;验收上线：对照需求验收，做一轮数据核对。&lt;/li&gt;
&lt;li&gt;迭代反馈：根据实际使用反馈进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;2. 结合项目经验，如何构建指标体系？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;业务目标拆解&lt;/strong&gt; ➔ &lt;strong&gt;核心指标识别&lt;/strong&gt; ➔ &lt;strong&gt;指标分层&lt;/strong&gt; ➔ &lt;strong&gt;定义标准化口径&lt;/strong&gt; ➔ &lt;strong&gt;指标归档管理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从业务目标出发（如增长、转化、活跃），向下拆分指标（漏斗、层级）。&lt;/li&gt;
&lt;li&gt;按照主指标（核心业务结果）➔ 辅助指标（过程监控）➔ 诊断指标（问题定位）分层。&lt;/li&gt;
&lt;li&gt;指标要有统一定义（维度、统计周期、口径公式）。&lt;/li&gt;
&lt;li&gt;指标需要建档（指标管理平台/文档管理），后续便于沉淀复用。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;3. 指标口径不统一怎么解决？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题识别&lt;/strong&gt; ➔ &lt;strong&gt;组织专项梳理&lt;/strong&gt; ➔ &lt;strong&gt;制定标准文档&lt;/strong&gt; ➔ &lt;strong&gt;推动上线共用&lt;/strong&gt; ➔ &lt;strong&gt;持续监控&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先收集具体口径不一的地方（字段定义？计算逻辑？时间归属？）。&lt;/li&gt;
&lt;li&gt;组织业务+数据多方开会，明确一套统一口径。&lt;/li&gt;
&lt;li&gt;把统一后的口径输出为《指标字典》《数据口径手册》。&lt;/li&gt;
&lt;li&gt;数据报表、API统一接入标准口径。&lt;/li&gt;
&lt;li&gt;后续新报表、新功能开发也要强制引用标准口径。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;4. 可视化产品用过哪些图表？XX图适合什么场景？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;列举常见图表&lt;/strong&gt; ➔ &lt;strong&gt;结合场景举例&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;折线图（趋势变化，常用于日活、GMV走势）&lt;/li&gt;
&lt;li&gt;柱状图（对比，适合多产品/地区销售额比较）&lt;/li&gt;
&lt;li&gt;饼图（占比，适合份额展示，但不适合多项对比）&lt;/li&gt;
&lt;li&gt;堆叠柱状图（结构变化，例如各渠道流量组成）&lt;/li&gt;
&lt;li&gt;散点图（相关性，比如用户活跃度 vs 留存率）&lt;/li&gt;
&lt;li&gt;漏斗图（转化流程分析，如注册➔下单➔支付）&lt;/li&gt;
&lt;li&gt;地图（地理分布，门店覆盖率、各省市流量）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;5. 常见埋点方案有哪些，优劣势是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;分类介绍&lt;/strong&gt; ➔ &lt;strong&gt;优缺点分析&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全埋点（无须提前埋字段，前端事件全采集，优点灵活，缺点数据量大，后端压力大）&lt;/li&gt;
&lt;li&gt;手动埋点（开发指定上报什么字段，优点精准，缺点开发量大且灵活性差）&lt;/li&gt;
&lt;li&gt;可视化埋点（拖拽式在页面上绑定事件，优点快速上线、灵活修改，缺点兼容性和准确率问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;6. 举一个数据可视化支持业务决策的例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt; ➔ &lt;strong&gt;行动&lt;/strong&gt; ➔ &lt;strong&gt;结果&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;背景：曾支持运营部门优化拉新渠道。&lt;/li&gt;
&lt;li&gt;行动：搭建了渠道拉新漏斗Dashboard（拉新曝光-点击-注册-次日活跃）。&lt;/li&gt;
&lt;li&gt;结果：快速发现某广告渠道注册率异常低，及时调整预算，提升整体注册转化率15%。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;7. 业务部门XX指标下降，怎么分析？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;确认指标下降情况&lt;/strong&gt; ➔ &lt;strong&gt;构建分析框架&lt;/strong&gt; ➔ &lt;strong&gt;拆解维度验证&lt;/strong&gt; ➔ &lt;strong&gt;定位问题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先确认指标下降的真实程度（数据异常？统计口径变化？）。&lt;/li&gt;
&lt;li&gt;按时间、地域、渠道、用户分群多维度拆分。&lt;/li&gt;
&lt;li&gt;结合业务节点（如促销活动变化）找出关键影响因素。&lt;/li&gt;
&lt;li&gt;最后形成【问题归因】➔【解决建议】。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;8. 最成功/失败的可视化产品？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;项目背景&lt;/strong&gt; ➔ &lt;strong&gt;做法/失误&lt;/strong&gt; ➔ &lt;strong&gt;结果&lt;/strong&gt; ➔ &lt;strong&gt;经验总结&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功例子：做过一次智能监控仪表盘，提前预警业务异常，提升处理效率。&lt;/li&gt;
&lt;li&gt;失败例子：早期版本过于复杂，图表太多，用户体验差，后来简化为关键指标卡片+趋势图。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;9. 设计一个可视化Dashboard，怎么做？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;理解场景需求&lt;/strong&gt; ➔ &lt;strong&gt;确定核心指标&lt;/strong&gt; ➔ &lt;strong&gt;设计布局&lt;/strong&gt; ➔ &lt;strong&gt;绘制草图&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如给一个“电商销售分析”场景，可以设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顶部：总GMV、订单数、客单价卡片&lt;/li&gt;
&lt;li&gt;中部：GMV趋势（折线图）、渠道构成（堆叠柱状图）&lt;/li&gt;
&lt;li&gt;底部：地域分布（地图）、商品Top10（表格）&lt;/li&gt;
&lt;li&gt;➔ 草图简单划分区块即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（如果你需要，我可以帮你画一个示例草图）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;10. 数据报表需求PRD要素有哪些？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本信息&lt;/strong&gt; ➔ &lt;strong&gt;核心指标定义&lt;/strong&gt; ➔ &lt;strong&gt;交互设计&lt;/strong&gt; ➔ &lt;strong&gt;数据口径与来源&lt;/strong&gt; ➔ &lt;strong&gt;权限与发布要求&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求背景、业务目标&lt;/li&gt;
&lt;li&gt;指标清单与详细定义&lt;/li&gt;
&lt;li&gt;报表结构（页面布局、图表类型）&lt;/li&gt;
&lt;li&gt;交互说明（筛选器、下钻、导出等功能）&lt;/li&gt;
&lt;li&gt;数据源说明、刷新频率&lt;/li&gt;
&lt;li&gt;权限控制需求（哪些人可以看）&lt;/li&gt;
&lt;li&gt;验收标准&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;11. 你们前端用什么可视化组件？查询性能？数据库？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答题思路：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前端组件库&lt;/strong&gt; ➔ &lt;strong&gt;响应性能指标&lt;/strong&gt; ➔ &lt;strong&gt;数据库类型&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端常用组件有 ECharts、AntV G2/G2Plot、Highcharts。&lt;/li&gt;
&lt;li&gt;响应性能一般控制在3s以内（常规查询），复杂大盘数据通过缓存或异步加载优化。&lt;/li&gt;
&lt;li&gt;数据库使用MySQL、ClickHouse（用于大数据量场景）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户行为分析类产品了解哪些？优劣势？&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答题结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;列举常见产品&lt;/strong&gt; ➔ &lt;strong&gt;简单比较优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;友盟+（基础功能全，适合中小应用，集成方便）&lt;/li&gt;
&lt;li&gt;神策分析（自定义事件强大，灵活，但集成成本高）&lt;/li&gt;
&lt;li&gt;GrowingIO（无埋点分析，快速，适合产品早期验证，但数据粒度有限）&lt;/li&gt;
&lt;li&gt;Mixpanel（国外产品，分析漏斗强，但本地化一般）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;产品通用能力&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;让你设计一个XX产品，你会怎么做？ 考察点：新需求处理的流程与方法论&lt;/li&gt;
&lt;li&gt;举一个你过去做需求挖掘或者转化业务需求的例子 考察点：分析和转化，而不是单纯完成业务需求，突出你做的转化&lt;/li&gt;
&lt;li&gt;你是怎么对需求的优先级进行管理的 考察点：需求管理与优先级判断&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;数据分析能力&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;举一个利用数据分析促进产品改进的例子 考察点：数据思维，数据分析思路&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;项目管理能力&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;为了保证项目按时上线，你会通过哪些手段来管理开发进度？ 考察点：项目管理能力&lt;/li&gt;
&lt;li&gt;过去项目中，最大的需求变更是什么，你是怎么处理的 考察点：变更管理，流程控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;学习意愿与方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;行业里面的数据产品最熟悉的是那几个？ 考察点：行业关注度&lt;/li&gt;
&lt;li&gt;最近数据圈发生的XX事情，你怎么看，如ChatGPT对数据产品经理有什么影响 考察点：主动接受新事物的意愿&lt;/li&gt;
&lt;li&gt;你一般通过什么方式学习数据产品经理相关的知识 考察点：学习方法与态度&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;沟通与逻辑表达&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;你和业务或开发团队最严重的冲突是什么问题，你是怎么处理的？ 考察点：冲突处理，沟通协调&lt;/li&gt;
&lt;li&gt;说一说你做过最成功或者失败的一个产品/项目？ 考察点：表达条例与逻辑性，注意使用STAR原则&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;【数据分析能力】&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 举一个利用数据分析促进产品改进的例子&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：有没有通过数据发现问题/机会、提出并落地优化方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;S（背景）：什么产品？什么问题？什么业务场景？&lt;/li&gt;
&lt;li&gt;T（任务）：你要解决什么问题？想提升哪个指标？&lt;/li&gt;
&lt;li&gt;A（行动）：用什么数据分析方法？比如漏斗分析、留存分析、A/B测试等。&lt;/li&gt;
&lt;li&gt;R（结果）：产品指标提升了多少？最终成效如何？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;【项目管理能力】&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 为了保证项目按时上线，你会通过哪些手段来管理开发进度？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：项目管理工具与方法论，比如甘特图、里程碑管理、每日站会、看板管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;制定详细里程碑计划（时间节点、责任人）&lt;/li&gt;
&lt;li&gt;每周同步（站会/日报/周报）&lt;/li&gt;
&lt;li&gt;风险预警机制（进度延期预警，资源冲突预警）&lt;/li&gt;
&lt;li&gt;版本控制（分阶段交付，确保小步快跑）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 过去项目中，最大的需求变更是什么，你是怎么处理的？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：如何面对变更（Scope Creep），有没有通过流程控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;变更来源（业务变化？市场变化？）&lt;/li&gt;
&lt;li&gt;如何评估影响（需求影响点、开发影响点、时间影响）&lt;/li&gt;
&lt;li&gt;如何协商（重新排期？资源调整？分阶段上线？）&lt;/li&gt;
&lt;li&gt;记录（需求变更文档、变更审批流程）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;【学习意愿与方法】&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 行业里面的数据产品最熟悉的是那几个？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：了解什么样的数据产品，侧面看行业视野。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;列举2-3个（比如：DataV、Looker、Tableau、GrowingIO、神策分析）&lt;/li&gt;
&lt;li&gt;简单讲一下各自特点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 最近数据圈发生的XX事情，你怎么看，比如ChatGPT对数据产品经理有什么影响？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：能否结合新趋势做思考。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;事实描述（例如：AI辅助数据分析兴起，AutoBI、智能洞察等）&lt;/li&gt;
&lt;li&gt;对数据产品经理的影响（例如：更重建模与决策引导，轻纯报表搬运）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 你一般通过什么方式学习数据产品经理相关的知识？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：有没有主动学习习惯。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;自学方式（看行业报告、实战练习、阅读经典书籍如《数据之美》、《精益数据分析》）&lt;/li&gt;
&lt;li&gt;社区学习（知乎、微信公众号、行业社群）&lt;/li&gt;
&lt;li&gt;课程学习（网易云课堂、Coursera数据分析、AICamp系列）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;【沟通与逻辑表达】&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 你和业务或开发团队最严重的冲突是什么问题，你是怎么处理的？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：冲突管理能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;冲突是什么（比如需求优先级不同、开发量评估不一致）&lt;/li&gt;
&lt;li&gt;你的处理方式（明确需求背景，站在对方角度沟通，找中间解）&lt;/li&gt;
&lt;li&gt;最后达成的共识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 说一说你做过最成功或者失败的一个产品/项目？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考察点&lt;/strong&gt;：逻辑表达，是否能用STAR讲清楚。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回答建议框架&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;S（背景）&lt;/li&gt;
&lt;li&gt;T（目标）&lt;/li&gt;
&lt;li&gt;A（行动）&lt;/li&gt;
&lt;li&gt;R（结果）&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>SaaS.md</title><link>https://echo-carrie.github.io/posts/saas/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/saas/</guid><description>SaaS学习笔记</description><pubDate>Mon, 14 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;SaaS&lt;/h1&gt;
&lt;h2&gt;定义&lt;/h2&gt;
&lt;p&gt;​		SaaS（Software as a Service，软件即服务）。业界一般认为，Salesforce的创始人兼CEO&lt;strong&gt;马克·贝尼奥夫&lt;/strong&gt;是SaaS商业模式最早的实践者。&lt;/p&gt;
&lt;p&gt;​		**一定有一种方式，让购买软件更加方便和便宜。**企业不再需要动辄数十万、上百万美元的投入，也不需要经历漫长的安装和实施周期，只要注册和付费，用户通过自行配置就可以使用软件，对软件进行维护和升级也不需要用户亲自动手。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;将软件作为一种服务来销售，而用户只需要每月缴纳固定的费用即可使用软件的模式&lt;/strong&gt;，在20世纪90年代就已经出现了，当时被称为按需（on-demand）服务，这就是SaaS的雏形。&lt;/p&gt;
&lt;h2&gt;类比&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对于大众群体而言&lt;/strong&gt;，我们用一个类比来解释SaaS：以前，每家每户都需要挖一口井解决吃水问题；后来改为集中供水，即由自来水公司供水，用户只要按时缴纳水费，打开水龙头就会有水。这省却了找水和打井的过程，也节省了工程成本。自来水公司的业务模式就变成了“供水即服务”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于软件技术人员而言&lt;/strong&gt;，SaaS是一种新的应用架构模式，引入了共享单个实例、多租户、权限模式、存储模式和计费模式等概念。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于SaaS服务商而言&lt;/strong&gt;，由于采用与传统软件不同的交付模式和订阅收入模式，SaaS意味着一种全新的商业模式和新的生意机会。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于客户而言&lt;/strong&gt;，SaaS相当于把IT设备、软件和运维服务，全部外包给了SaaS服务商。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;衍生（XaaS）&lt;/h2&gt;
&lt;p&gt;​		通过抽象和分层，IT行业出现了一切皆服务的概念，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PaaS&lt;/strong&gt;（Platform as a Service，&lt;strong&gt;平台即服务&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IaaS&lt;/strong&gt;（Infrastructure as a Service，&lt;strong&gt;基础设施即服务&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DaaS&lt;/strong&gt;（&lt;strong&gt;数据即服务&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OaaS&lt;/strong&gt;（&lt;strong&gt;运维即服务&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;总而言之，大多数新创的XaaS概念，都可以归结到SaaS、PaaS、laaS上面。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;相关概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ToB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ToB，即面向组织；&lt;/li&gt;
&lt;li&gt;ToC，即面向个人消费者；&lt;/li&gt;
&lt;li&gt;ToG，即面向政府机构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;企业服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**企业服务是一个面向组织的服务的统称。**实际上，企业服务有很多种类和形式，为企业提供诸如IT服务外包、人力资源、法律服务等。&lt;/li&gt;
&lt;li&gt;SaaS只是众多企业服务方式中的一种，SaaS领域所说的企业服务，特指以SaaS方式为企业提供的服务，如SaaS CRM、SaaS财税等。&lt;/li&gt;
&lt;li&gt;SaaS代表了一种服务的提供方式；而企业服务则代表服务的具体内容。也就是说，SaaS服务商看到的是SaaS，而企业客户看到的是服务。&lt;strong&gt;SaaS改变的是服务方式，并不是改变服务的内容。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件：软件和SaaS是两种不同的生意，&lt;strong&gt;一个卖产品，一个卖服务。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PaaS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按照PaaS业务模式的定义，&lt;strong&gt;大多数SaaS公司自己开发的PaaS都不是真正意义上的PaaS，这些PaaS其实都是SaaS。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;反过来说，所有SaaS必须具有PaaS的业务可定义和可扩展的能力，这是为了补偿SaaS个性化能力的不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演进&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-80daf3863934b114218bbc99e8d5eacc_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**终端设备：**通过远程终端访问集中式的主机机房，来处理或获取业务的信息和数据。现在还能在一些影片中看到这种终端设备的身影。&lt;/li&gt;
&lt;li&gt;**C/S应用：**即客户端/服务器的访问模式。通过桌面客户端访问独立服务器，处理或获取业务信息和数据。这是早期开发者和用户在局域网中常用的一种应用架构。
网页托管：通过网页托管访问分布式服务器，处理或获取业务信息和数据，也就是所&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ASP&lt;/strong&gt;（Application Service Provider，应用程序服务提供商）。这时已经出现了诸如多租户、应用共享、订阅收费等形式，有一点SaaS的雏形了。&lt;/li&gt;
&lt;li&gt;**云原生应用：**通过云原生应用，访问由软件定义的、虚拟化的服务器，也就是今天的SaaS模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		SaaS是一个系统性业务，单点致胜影响非常低，并且每个决策的回报周期都足够久、足够长，于是大部分提炼过的规律都值得复制。&lt;/p&gt;
&lt;p&gt;​		(有赞的主要产品正在从SaaS转换为智能系统，这应该是SaaS工作手册的最后-个版本)&lt;/p&gt;
&lt;h1&gt;SaaS分类&lt;/h1&gt;
&lt;p&gt;面向不同用户规模的Sass业务特点：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&quot;C:\Users\12253\AppData\Roaming\Typora\typora-user-images\image-20250414004430952.png&quot; alt=&quot;image-20250414004430952&quot; style=&quot;zoom: 25%;&quot; /&amp;gt;&lt;/p&gt;
&lt;h2&gt;基于行业分类&lt;/h2&gt;
&lt;p&gt;​		SasS行业细分分类：跨多行业（金数据、wps）/有聚焦行业（客户运营相关的有赞、人力资源相关的北森）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能型：PMF升级难；容易行业扩张。&lt;/li&gt;
&lt;li&gt;业务型：PMF升级平滑（溢出销售）；难行业扩张。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;基于客户规模分类&lt;/h2&gt;
&lt;h3&gt;特点&lt;/h3&gt;
&lt;p&gt;​		Sass根据用户规模分类如下：大、中、小、小微（少或无雇佣关系）&lt;/p&gt;
&lt;p&gt;客户规模大-&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可复制性差、通用性差。&lt;/li&gt;
&lt;li&gt;随着产品、商业模式稳定，利润稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户规模小-&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可复制性高（需求定义问题；服务商的”供给决定需求“）。&lt;/li&gt;
&lt;li&gt;即使产品、商业模式稳定，利润难以稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;大型客户&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一般界定：订阅费&amp;gt;100w，客户自身营收&amp;gt;10亿。&lt;/li&gt;
&lt;li&gt;需求：个性化强的产品（定制方案）+深度服务&lt;/li&gt;
&lt;li&gt;行业规划：
&lt;ul&gt;
&lt;li&gt;服务大型客户为主的SaaS模式暂时无法存在。（基础人才积累不足；产业发展不稳定；主要还是难以提炼出来稳定的的产品和商业模式，基本都是单独定制的）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;中小微企业&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一般界定：年订阅费在5000RMB以下、客户自身规模小、付费和运营能力弱、闭店率高。&lt;/li&gt;
&lt;li&gt;业务原则：“获客成本足够低、效率足够高，客户订阅的首年就必须给公司带来利润”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		&lt;strong&gt;这一类业务的长期价值也是存在的，它可以作为一个长期的漏斗，发现、沉淀未来的中型客户和引领行业的创新者。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;尤其是如果我们伴随了未来的引领者客户成长时，那个时候我们就具备了真正服务行业引领者的能力，客户也将是我们最忠诚的盟友。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::important&lt;/p&gt;
&lt;p&gt;​		年订阅费均价在10-50万RMB的中型客户、1-10万RMB的中小客户，&lt;strong&gt;给他们做SaaS服务的时候，底层认知和大原则上比较接近，仅在实际业务操作上有些差异。中小客户是中国市场最重要的核心客户群。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1&gt;SaaS业务+AI&lt;/h1&gt;
&lt;h2&gt;AIGC的路线&lt;/h2&gt;
&lt;p&gt;:::note&lt;/p&gt;
&lt;p&gt;​		AI的发展就是不断地自动化。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索引擎-&amp;gt;分类+归纳&lt;/li&gt;
&lt;li&gt;生成人工智能大模型-&amp;gt;理解演绎
&lt;ul&gt;
&lt;li&gt;创意供给&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型微调+针对性训练-&amp;gt;推理+建议
&lt;ul&gt;
&lt;li&gt;工作流包装、重复性劳动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Transformer&lt;/p&gt;
&lt;h2&gt;SaaS产品困境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;功能冗余：不断地增加功能-&amp;gt;90%功能仅服务于5%的用户，对95%用户造成骚扰&lt;/li&gt;
&lt;li&gt;培训服务不完善：用户产品学习成本高、需要学习、理解、组合功能解决问题。
&lt;ul&gt;
&lt;li&gt;负面例子：SaaS产品仅仅提供功能集合没有真正交付结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能数据不直观： &lt;strong&gt;基于GUI的交互方式+复杂的SaaS系统&lt;/strong&gt;  使得系统像迷宫一样，难以找到需要的功能和数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::note&lt;/p&gt;
&lt;p&gt;​		总之，细节体验的精致化不如产品功能的强大更重要、更好卖，可是产品越强，用户越难理解、使用成本越高，用户越难真正获得结果。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;​		基于AI大模型对用户意图的理解能力，AI某种程度上也改变了人机交互方式不再需要堆砌更多可见功能，而是通过命令式、对话式、建议式的交互直接交付结果。这种方式使产品变得越来越强大，同时保持了易用性。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;SaaS+AI 产品设计原则&lt;/h2&gt;
&lt;p&gt;1、交付可用结果：基于极简体验+工作流的方式，给用户交付可用结果。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;过程：TPF验证-&amp;gt;PMF阶段拿出未智能封装的工程版-&amp;gt;实际执行（大模型只用于输入时理解用户需求）&lt;/p&gt;
&lt;p&gt;理解：对用户来说就像变魔术，看似一瞬间，实际上做了很多内部工作。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;2、用纯文本思考基础逻辑。&lt;/p&gt;
&lt;p&gt;3、先呈现答案再做解释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让答案尽早呈现，确认满足用户需求。&lt;/li&gt;
&lt;li&gt;让阅读困难的人也能使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、能选择就不录入。&lt;/p&gt;
&lt;p&gt;5、让人类按回车。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尊重客户的决策权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::important&lt;/p&gt;
&lt;p&gt;​		“智能化”需要一个实现的过程，“流程重构”也是。我们需要先把AI放到现在的流程里面帮助某些“色提效，当重要角色的效率都在提升作业方式都发生了改变，作业流就会自然再造。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;SaaS+AI四个应用类型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.Copilot 辅助助手:&lt;/strong&gt;
是所有智能能力的一个快捷调用窗口，具备对话和通知能力。核心任务是通过搜索、查询、对话等方式帮助用户快速、简单使用产品，降低产品学习成本，提高用户使用效率。比如，功能查找、订单搜索、日报推送，等。
&lt;strong&gt;2.AIGC 创意生成:&lt;/strong&gt;
给用户更多的创意供给，最关键不是生成的结果，而是生成创作的视角和想法可以给人带来很多全新的想法。比如，生成营销文案，优化商品标题，设计营销推广海报，优化商品图片，等等。
&lt;strong&gt;3.Agent 自动执行:&lt;/strong&gt;
几乎所有重复的任务都可以通过Agent自动化完成，尤其是那些可以外包或者代运营的任务。比如，自动改库存、AI客服，等。
&lt;strong&gt;4.Insight 洞察建议:&lt;/strong&gt;
AI最大的价值可能就是辅助决策，分析客户特征、分析市场情况、结合洞察给出决策建议，提高用户决策的成功率、帮助用户更直接获得结果。比如，节日营销建议、会员体系设计建议等。&lt;/p&gt;
&lt;h2&gt;SaaS+AI，3个价值方向&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用户价值
&lt;ul&gt;
&lt;li&gt;更多创意供给&lt;/li&gt;
&lt;li&gt;自动执行重复任务&lt;/li&gt;
&lt;li&gt;辅助决策和建议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;商业价值&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Recommender System</title><link>https://echo-carrie.github.io/posts/recommender-system/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/recommender-system/</guid><description>推荐系统入门&amp;ABtest</description><pubDate>Wed, 09 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;推荐系统入门&lt;/h1&gt;
&lt;h2&gt;推荐系统的必要条件&lt;/h2&gt;
&lt;p&gt;​		做推荐系统需要在业务发展现阶段满足三个必要条件，分别是&lt;strong&gt;有货、有人、有场景&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有货&lt;/strong&gt;：保证&lt;strong&gt;业务发展的现阶段供应链齐全，有足够的商品用于推荐&lt;/strong&gt;，可以让用户“逛”起来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有人&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户量要足够多，足够多的用户会带来足够多的用户行为&lt;/strong&gt;，这些是推荐系统的数据和特征的来源。&lt;/li&gt;
&lt;li&gt;有合适的人才来做这件事儿，最完整的配比是**“算法工程师 + 研发工程师 + 数据工程师 + 产品经理”**，当然 &lt;strong&gt;MVP 的推荐系统通过研发工程师 + 产品经理&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有场景&lt;/strong&gt;：&lt;strong&gt;做推荐系统要立足于业务的发展阶段&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;业务在发展初期阶段正忙于系统功能的建设，所以推荐系统这类偏前端流量玩法的工作的价值凸显不出来。&lt;/li&gt;
&lt;li&gt;有&lt;strong&gt;合适的产品场景以及完善的系统，才能“接住”这样的需求&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		因此，&lt;strong&gt;在推荐系统的建设上，你要考虑到人、货、场这三个因素&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		拿我们部门举个例子，当&lt;strong&gt;我们要做推荐的系统时候，我们正处在用户高速增长的阶段，各条业务线产品的基础建设、供应链，以及用户体验都有了一定的积累和沉淀，业务发展战略的工作重心也逐渐从后台的基础建设，转移到了前台的用户流量运营&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有人：用户高速增长阶段、团队完善。&lt;/li&gt;
&lt;li&gt;有货：构建了各条业务线产品的基础建设、供应链。&lt;/li&gt;
&lt;li&gt;有场景：
&lt;ul&gt;
&lt;li&gt;业务发展由后台建设转至前台的用户流量经营。&lt;/li&gt;
&lt;li&gt;现在需要提高长尾商品的曝光度、挖掘用户潜在意图、优化用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		&lt;strong&gt;为了提高长尾商品的曝光率、挖掘用户潜在意图、优化用户体验，以达到提高购买转化率的目的&lt;/strong&gt;，我才临时组建了推荐系统团队，去做一个基于旅行商品的个性化推荐系统。&lt;/p&gt;
&lt;h2&gt;推荐系统的三个步骤&lt;/h2&gt;
&lt;p&gt;​		推荐系统将一个物品/内容推荐给用户主要会经历三个步骤，即商品召回、商品排序和综合调整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/cb18f9b4154d429ba2b5b90d84db4828.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;召回&lt;/h3&gt;
&lt;p&gt;​		举个例子，如果你是一个女生，你在浏览京东商城的时候，可能会关注一些美妆品牌，收藏一些奢饰品包包或者加购一些零食。这一系列的行为反映了你对某些商品的偏好，此时推荐系统就会根据你的操作行为大致勾勒出你的兴趣偏好。&lt;/p&gt;
&lt;p&gt;​		与此同时，推荐系统发现京东网站上还有很多与你兴趣偏好相似的用户，你们有着类似的喜好，她们喜欢的东西大概率你也会觉得不错。因此，推荐系统就会统计你们在京东商城的操作行为（如浏览、收藏、加购、下单），计算出你们之间的相似度，这样推荐系统就筛选出那些同类用户喜欢而你还没有接触过的商品。&lt;strong&gt;像这样推荐系统根据算法帮你初步筛选出你可能喜欢的商品的过程，叫做推荐系统的召回，你也可以把召回简单理解为商品的粗筛过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		在召回的阶段中，有很多成熟的策略和算法供我们选择，比如基于用户行为的协同过滤召回算法，基于内容标签的召回算法，以及当今很火的基于深度学习的召回算法。但是，不管你选择哪一种召回算法，它们最终返回的结果都是一个商品列表。&lt;/p&gt;
&lt;p&gt;​		一般来说，采用一个召回算法，我们&lt;strong&gt;只能得到一个商品列表&lt;/strong&gt;，这对于一个个性化的推荐系统来说远远不够。因此在实际工作中，&lt;strong&gt;为了提高召回商品的覆盖率和多样性，我们往往会应用多种召回算法进行商品召回，这也叫做多路召回&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		那么问题就来了，采用多路召回得到多个商品列表之后，我们该怎么对这些列表进行排序呢？&lt;/p&gt;
&lt;h3&gt;排序&lt;/h3&gt;
&lt;p&gt;​		这时就进入了推荐系统的&lt;strong&gt;排序阶段&lt;/strong&gt;。具体来说就是&lt;strong&gt;将召回阶段获取到的多个商品列表，结合多种因素进行考量（比如业务指标CTR、CVR、GMV、UV、已经商品的多样性、覆盖率等）融合成一个列表&lt;/strong&gt;，并&lt;strong&gt;精细筛选出Top100甚至更少的商品列表&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;调整&lt;/h3&gt;
&lt;p&gt;​		不过，商品列表在被展示给用户之前，还需要经过一道&lt;strong&gt;调整的工序。其实就是对排序后的商品列表做运营策略上的调整&lt;/strong&gt;，如广告坑位填充、特定商品置顶，这部分就和实际业务策略息息相关了。&lt;/p&gt;
&lt;p&gt;​		在经过这三个步骤之后，推荐系统才能将最终的商品列表展示到用户页面。&lt;/p&gt;
&lt;h2&gt;产品经理的工作职责&lt;/h2&gt;
&lt;h3&gt;背景&lt;/h3&gt;
&lt;p&gt;​		假设，你正在一家电商公司工作，部门领导让你牵头做一个推荐系统，它会应用在你们公司App“猜你喜欢”的页面中。&lt;/p&gt;
&lt;p&gt;​		当你拿到任务的第一时间，应该是明确推荐系统的整体架构与职责分工，这其实和大多数的产品设计初期并无二致。&lt;/p&gt;
&lt;p&gt;​		作为推荐系统的产品经理，当然不需要像算法工程师一样死磕算法模型，也不需要像研发工程师一样专注代码开发，那我们的工作职责到底是什么呢？&lt;/p&gt;
&lt;h3&gt;召回阶段&lt;/h3&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		召回：推荐系统根据算法帮你初步筛选出你可能喜欢的商品的过程，叫做推荐系统的召回，你也可以把召回简单理解为商品的粗筛过程。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;在召回阶段，产品经理要对召回策略进行评估&lt;/strong&gt;。实际工作中不需要产品经理设计召回策略，但你要了解常用召回策略的优缺点，以便根据实际场景做出合理的选择。&lt;/p&gt;
&lt;p&gt;​		我们知道，召回就是对商品进行初步筛选，过滤出用户可能感兴趣的商品列表。之所以说“可能”是因为在召回这一步，为了提高覆盖率，我们通常会使用多个算法进行召回。在这些召回算法中，产品经理需要了解的召回算法有&lt;strong&gt;基于用户行为的协同过滤召回算法&lt;/strong&gt;和&lt;strong&gt;基于内容标签的召回算法&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;基于用户行为的协同过滤召回算法&lt;/h4&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;协同过滤的基本思想很简单，就是基于用户对商品的偏好找到和用户最相近的一批人，然后把这批人喜欢的商品推荐给当前用户&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		比如说，现在有三个用户，分别是用户 A、用户 B 和用户 C，以及四个商品，分别是商品 A、商品 B、商品 C 和商品 D。我们对三个用户的行为进行分析，发现用户A喜欢商品 A 和 C，用户 B 喜欢商品 B，用户 C 喜欢商品 A、C 和 D，我们把这些信息整理到一个表格中。&lt;/p&gt;
&lt;p&gt;​		通过这个表格，我们能很直观地看到，用户 A 和用户 C 都喜欢商品 A 和商品 C。由此，我们可以猜测用户 A 和用户 C 的兴趣偏好可能相同。这个时候，我们就可以把商品 D 推荐给用户A。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/24eb5fe63c7445c494194d56f5098764.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		协同过滤策略的基本原理，&lt;strong&gt;在算法的实现上就是将用户对商品的操作行为，如浏览、收藏、加购和下单，变成向量形式的数学表达方式&lt;/strong&gt;，然后通过&lt;strong&gt;相似度算法&lt;/strong&gt;，常见地有通过&lt;strong&gt;余弦相似度算法&lt;/strong&gt;计算这些行为的相似度，最后得出一个相似度分数的排序。这样，就能找到和你行为最相近的其他用户，并过滤出他们喜欢而你没有接触过的商品。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;通过相似度计算，我们可以得到和某个用户最相似的其他用户的一个列表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		举一反三，我们就能得出&lt;strong&gt;和某个商品最相似的一个商品列表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/e49bf0d762784f93a2d1e8694b1e7e60.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;协同过滤算法需要有用户行为数据作为基础，才能根据行为计算用户之间的相似度以及商品之间的相似度，在系统冷启动阶段很难实施，所以在冷启动阶段，我们还需要考虑其他的召回策略&lt;/strong&gt;，比如我接下来要说的基于内容标签的召回策略。&lt;/p&gt;
&lt;h4&gt;基于内容标签的召回策略&lt;/h4&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;基于内容标签的召回算法（Content-based Recommendations，CB）是最早被使用的召回算法&lt;/strong&gt;，在现在的工业界中仍然被广泛使用，因为它的效果很好。&lt;/p&gt;
&lt;p&gt;​		它的基本思想就是给用户和商品分别打标签，然后召回同类标签的商品，最终把它们推荐给用户。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		比如说，现在有两个用户，分别是用户 A 和用户 B，还有四部电影，分别是《钢铁侠》《蜘蛛侠》《蝙蝠侠》和《神奇女侠》。我们给每部电影打上标签，《钢铁侠》是“科幻片”和“漫威”，《蜘蛛侠》是“科幻”和“漫威”，《蝙蝠侠》是“科幻片”和“DC”，《神奇女侠》是“科幻片”和“DC”。&lt;/p&gt;
&lt;p&gt;​		为了方便你理解，我简化了标签的数量，&lt;strong&gt;在实际工作中，我们可能会给每一个电影打上几十甚至是几百个标签。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;给电影打完标签之后，我们还要给每一个用户打上兴趣偏好标签&lt;/strong&gt;，如用户 A 刚看完《钢铁侠》，就给用户 A 打上“科幻片”和“漫威”的标签，用户 B 看过《蝙蝠侠》，就给用户 B 打上“科幻片”和“DC”的标签，我们把这些信息都整理到了下面的表格中，你可以看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/86e67276dda04cfe864c5c3fc2c9817e.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		通过这个表格，我们能很直观地看到，用户 A的偏好标签为“科幻片”“漫威”，正好和《钢铁侠》《蜘蛛侠》的标签相同。很显然，我们应该把《蜘蛛侠》推荐给用户 A，再把《神奇女侠》推荐给用户 B。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;这就是内容标签召回算法的基本原理，具体的算法实现就是将用户的偏好标签和电影的标签，变成向量形式的数学表达方式，然后通过相似度算法，常见地会通过余弦相似度算法，去计算这些行为的相似度，最后得出一个相似度分数的排序&lt;/strong&gt;。这样，我们就能找到和用户偏好最相似的TopN部电影了。&lt;/p&gt;
&lt;h4&gt;优缺点&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/a6beb11b6211410c9d2045ab22ee64f9.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;排序阶段&lt;/h3&gt;
&lt;p&gt;​		&lt;strong&gt;在推荐系统的排序环节中，产品经理要以目标为导向来确定排序的目标&lt;/strong&gt;。如果产品是以提高 CTR 为目标，那么推荐系统可以使用 **CTR（Click-Through Rate，点击率）**预估的方式来构建排序模型，&lt;strong&gt;根据用户历史的浏览记录，来预测用户的点击行为&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		但在电商场景中，还存在 &lt;strong&gt;CVR、GMV、UV&lt;/strong&gt; 等多个核心指标，所以产品规则并不是一个指标所能决定的，要根据业务目标来优化排序模型。也就是说，如果公司追求的是 GMV，那么单纯地提升 CTR ，在一定程度上只能代表着用户体验的提升。&lt;/p&gt;
&lt;p&gt;​		当然，你可以把这些指标的诉求抛给算法工程师，让算法同学给出 CTR 或 CVR 预估的方案。这个时候，你需要关注的就是如何评估算法同学交付的算法模型的性能和稳定性。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;由于冷启动阶段用户个性化和行为化特征过少，如果我们把评估的重心定位在“针对用户的精准化预测”就是不合理的。&lt;strong&gt;这个时候，你可以让算法工程师给出冷启动阶段的排序模型，如果没有更优的方案，你也可以给出&lt;/strong&gt;一套打分策略来进行商品列表的排序融合&lt;/strong&gt;，这也是面向策略的产品经理必须要具备的能力。&lt;/p&gt;
&lt;p&gt;​		我们使用了3种召回策略，分别得到了3个商品列表，以及每个商品所在列表中的评分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/81c4286ba6b84e309e0758fe56621b05.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;有3种排序策略可以供我们参考，它们分别是&lt;strong&gt;加权平均法、CTR 动态加权平均法和CTR 预估加权平均法。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;加权平均法&lt;/h4&gt;
&lt;p&gt;​		加权平均法是统计领域内常用来综合指标的基本方法，它的计算方法最简单。以商品A为例，我们根据专家经验，预先定义三种召回策略的权重：0.4、0.3、0.2，然后结合上面的评分列表，让商品的权重分别乘上每一种策略的权重，再除以策略权重之和，就能得到商品的评分。那么，商品A的评分就是：(\left(0.9^{\star} 0.4+0^{\star} 0.3+0^{\star} 0.2\right) /(0.4+0.3+0.2)=0.4)。同理，我们能够得到其他商品的评分，按照字母顺序分别是0.62、0.66、0.29、0.09。&lt;/p&gt;
&lt;p&gt;​		最终，根据分数排序，我们可以得到：C&amp;gt;B&amp;gt;A&amp;gt;D&amp;gt;E。这种排序策略的特点简单明确，每种排序策略可以根据业务规则预设权重。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;CTR 动态加权平均法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​		使用这种方法，&lt;strong&gt;我们需要每天离线计算三种召回策略的 CTR，把它们作为每天更新的动态权重，最终根据动态的权重做加权平均&lt;/strong&gt;。CTR 动态加权平均法可以看成是&lt;strong&gt;加权平均法的一种改进，每种召回策略的 CTR =每种召回源的点击数 / 每种召回源的展现数&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;CTR 预估加权平均法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​		&lt;strong&gt;通过 CTR 预估三种召回策略的权重，然后做加权平均&lt;/strong&gt;。因为需要用到前两种方法，所以它的实现方法是最复杂的。&lt;/p&gt;
&lt;p&gt;​		作为一个完整的推荐系统，它还要包括最后的调整的步骤，产品经理要与业务和运营人员充分沟通，以及结合实际的业务场景，把如广告商品、流量坑位、特殊扶持等相关的运营策略结合到推荐系统中。&lt;/p&gt;
&lt;p&gt;​		因此，产品经理还有一个非常重要的工作职责，那就是评估一个推荐系统的好坏。&lt;/p&gt;
&lt;h3&gt;推荐系统的评估&lt;/h3&gt;
&lt;p&gt;​		评估一个推荐系统有很多指标，比如准确率、召回率、覆盖率、多样性、体验度等等。这些指标看起来多，但是常用的有4个。&lt;/p&gt;
&lt;p&gt;​		首先是&lt;strong&gt;准确率&lt;/strong&gt;，它&lt;strong&gt;用来判断模型预测的商品列表有多少是用户感兴趣的&lt;/strong&gt;。举个例子，我们认为用户点击该商品，就表示用户对其感兴趣。通过推荐系统，我们给用户推荐了10个商品，其中用户点击了5个商品，那么，推荐系统的准确率就是5/10=50%&lt;/p&gt;
&lt;p&gt;​		其次是&lt;strong&gt;召回率&lt;/strong&gt;，即&lt;strong&gt;用户感兴趣的商品有多少是模型预测出来的商品&lt;/strong&gt;。举个例子，用户一共点击 了10个商品，其中有8个是通过推荐系统推送给用户的，那么推荐系统的召回率就是8/10=80%。&lt;/p&gt;
&lt;p&gt;​		然后是&lt;strong&gt;覆盖率&lt;/strong&gt;，是说&lt;strong&gt;推荐系统可以覆盖到多少用户&lt;/strong&gt;，或者说&lt;strong&gt;推荐系统可以给多少用户进行商品推荐&lt;/strong&gt;。假设我们有1000万的旅行用户，推荐系统可以为其中900万用户进行推荐，那么覆盖率就是900/1000=90%&lt;/p&gt;
&lt;p&gt;​		最后是&lt;strong&gt;多样性&lt;/strong&gt;，&lt;strong&gt;推荐系统为用户推荐商品的类型应该保持多样性&lt;/strong&gt;。这怎么理解呢？ 我们会发现，如果我们在某电商平台购买了薯片，这个电商平台后续就会一直给我们推荐薯片或者薯条产品。**从短期来看，这种推荐结果有助于提高用户转化，但从长期来看，它牺牲了用户的整体体验。**因此，我们在保证短期收益的基础上也要考虑长期的用户体验。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;产品经理还需要根据业务现状提出预期收益，大多数的推荐系统衡量指标都是CTR&lt;/strong&gt;，但是我不建议你直接使用这个指标来定义预期收益。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;你可以从业务的建设阶段来设定收益指标，我在下面给出了业务发展的三个阶段，提出推荐系统的预期收益的一般方法&lt;/strong&gt;，你可以作为参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对于业务建设阶段&lt;/strong&gt;，可以从&lt;strong&gt;流量的增长&lt;/strong&gt;入手，比如以DAU、MAU为核心指标衡量业务的增长；
&lt;ul&gt;
&lt;li&gt;DAU：&lt;strong&gt;日活跃用户数&lt;/strong&gt;；单日使用服务的独立用户数（去重）&lt;/li&gt;
&lt;li&gt;MAU：&lt;strong&gt;月活跃用户数&lt;/strong&gt;；单月使用服务的独立用户数（去重）
&lt;ul&gt;
&lt;li&gt;粘性指数 = DAU/MAU（健康值&amp;gt;0.3）&lt;/li&gt;
&lt;li&gt;流失率 = 1 - (当月MAU ∩ 次月MAU)/当月MAU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需定义&quot;活跃&quot;标准（如停留&amp;gt;30秒/触发点击）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于业务发展阶段&lt;/strong&gt;，可以从&lt;strong&gt;流量的转化&lt;/strong&gt;入手，比如以CTR、CVR为核心指标衡量流量的转化率；
&lt;ul&gt;
&lt;li&gt;CTR：点击量/曝光量 ×100%&lt;/li&gt;
&lt;li&gt;CVR：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转化率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;漏斗模型&lt;/strong&gt;：曝光→点击→详情页停留→转化（各环节流失分析）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于业务成熟阶段&lt;/strong&gt;，可以从GMV入手，比如以UV价值、RPM等为核心指标衡量用户价值。
&lt;ul&gt;
&lt;li&gt;GMV**（Gross Merchandise Volume）**：&lt;strong&gt;成交总额&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;含未支付订单，通常需配合&lt;strong&gt;支付成功率&lt;/strong&gt;使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UV（每用户价值）**：GMV/独立访客数&lt;/li&gt;
&lt;li&gt;RPM：&lt;strong&gt;千次展示收益&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实战项目&lt;/h2&gt;
&lt;p&gt;​		假设，你是一家电商平台公司的产品经理，公司经过一年多的供应链打造和用户运营的投入，业务已经发展到了一个高速增长的阶段。&lt;/p&gt;
&lt;p&gt;​		但问题也随之暴露了出来：之前产品首页是人工配置选品的，每个用户在浏览 App 的时候，看到的都是千篇一律的商品。这种无法体现用户对于商品兴趣的偏好情况，不但削减了用户的体验，也没法让供应商满意，因为随着接入的供应链多了起来，供应商也希望自己的商品能有更多的曝光。&lt;/p&gt;
&lt;p&gt;​		为了尽快解决这个问题，老板决定让你牵头打造一个个性化电商MVP推荐系统 （Minimum Viable Product，最小可行性产品）。已知，推荐系统的建设可以分为 4 个重要的阶段，分别是&lt;strong&gt;需求定义、数据准备、技术实现和评价标准&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;需求定义&lt;/h3&gt;
&lt;p&gt;​		&lt;strong&gt;在需求定义环节，我们最重要的工作就是产出需求文档&lt;/strong&gt;。具体来说，产品经理需要做的有3件事，分别是&lt;strong&gt;交代需求背景、描述交互逻辑，以及明确预期目标&lt;/strong&gt;。下面，我们一一来说。&lt;/p&gt;
&lt;h4&gt;构建需求背景&lt;/h4&gt;
&lt;p&gt;​		在需求背景部分，&lt;strong&gt;我们要重点交代清楚为什么要建设推荐系统，让协同部门能够理解背景，和我们对齐这个项目的价值&lt;/strong&gt;。一般来说，我们会和业务方进行频繁沟通，发掘他们最核心的诉求。&lt;/p&gt;
&lt;p&gt;​		那么，今天这个例子中的核心诉求其实就是要&lt;strong&gt;展现所有用户对商品的偏好，避免“千人一面”。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;描述交互逻辑&lt;/h4&gt;
&lt;p&gt;​		接下来，我们要&lt;strong&gt;对推荐系统的交互逻辑进行描述，主要包括描述用户的动线流程、模型诉求和产品功能上的逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		因为我们这次构建的是&lt;strong&gt;MVP推荐系统&lt;/strong&gt;，所以不需要通过算法模型来实现所有的推荐逻辑，而是分成两部分，&lt;strong&gt;一部分通过算法进行推荐，另一部分通过运营系统配置进行推荐。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首先，当用户进入商品主页的时候，推荐系统会检查是否已存在当前用户的画像信息。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如果存在就&lt;strong&gt;获取用户的商品偏好标签，执行商品召回的算法逻辑&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果不存在就把&lt;strong&gt;运营系统配置的商品数据&lt;/strong&gt;展示给用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**然后进入商品召回模块，由于只需要打造一个 MVP 的推荐系统，因此我们只设计一种召回策略就可以了，如“基于协同过滤的召回策略”。**这样，推荐系统就不涉及多路召回融合的问题，在产品需求中也就不用涉及“排序阶段”的需求了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所以我们直接进入“调整阶段”。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;这一阶段，推荐系统需要&lt;strong&gt;通过规则，将算法召回的商品列表和运营系统配置的商品列表进行融合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;常见的运营配置有，商品在第一周上新期内需要在展示列表中置顶等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最终，&lt;strong&gt;推荐系统会将融合后的商品列表展示给用户&lt;/strong&gt;。完整的交互逻辑如下，你可以看看。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/236dc9ad72ce4262bdbc08f335799de9.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;制定预期目标&lt;/h4&gt;
&lt;p&gt;​		&lt;strong&gt;最后就是制定电商推荐系统的预期目标了，这个目标是根据业务的实际情况而设定的。有了目标就要有衡量目标的指标，&lt;/strong&gt; 虽然大多数推荐系统的衡量指标都是 CTR，但我建议你从业务的建设阶段来设定衡量指标，就像我上节课讲的那样。这里，因为我们的业务发展属于成熟阶段，所以设定的衡量指标为 CVR。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/493cd1e0772e4f7cb31d930f9a0f1577.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		总的来说，产品经理要能够清晰地设计需求，&lt;strong&gt;需求定义要明确需求背景、描述交互逻辑，以及制定预期目标&lt;/strong&gt;，那么如何做才是清晰的设计需求呢？我为你准备了一份推荐系统需求模板，你可以作为参考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/02c26da0d8944c77a5456fefd75c72bd.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;数据准备&lt;/h3&gt;
&lt;p&gt;​		&lt;strong&gt;在推荐系统中，如果用户在某个环境下对某个商品做了某种操作，我们就认为这个操作表达了用户对这个商品的兴趣偏好。&lt;strong&gt;推荐系统要做的就是&lt;/strong&gt;挖掘这个偏好&lt;/strong&gt;，然后给这个用户推荐相同偏好的其他商品。&lt;/p&gt;
&lt;p&gt;​		**这些数据的来源一般包含三类：业务数据、埋点日志和外部数据。**并且每个来源的数据都有着详细的数据分类，这些数据会应用于机器学习的离线预估模型训练和实时模型预估计算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/187f9f6336754359b4bf9996c272d9ea.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;像是“用户数据”、“商品数据”和“上下文环境数据”本来就是存在于数据库中&lt;/strong&gt;的，产品经理只需告诉算法同学&lt;strong&gt;数据源在哪里即可&lt;/strong&gt;，后续算法同学会自行抽数。&lt;/p&gt;
&lt;p&gt;​		我们唯一提前要进行&lt;strong&gt;收集的就是用户的前端埋点日志&lt;/strong&gt;，如果系统之前没有做过埋点，那么势必会影响推荐系统的准确性。&lt;/p&gt;
&lt;p&gt;!!!warning&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在搭建推荐系统之前，我们要通过埋点尽可能地收集用户的前端行为日志。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		我们都需要埋哪些数据，把它们埋在哪些页面呢？这需要产品经理根据自己对业务的理解，整理出一套页面埋点文档，为算法同学提供数据支持。&lt;/p&gt;
&lt;p&gt;​		虽然根据业务的不同，具体的埋点策略会有差别，但我还是根据经验梳理出了一些用户行为与商品信息的数据埋点字段。&lt;/p&gt;
&lt;p&gt;​		首先是&lt;strong&gt;用户行为数据埋点字段&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/52e9f31193a84cb49b8cb5e5bb17ee12.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;然后是&lt;strong&gt;商品信息数据埋点字段&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/8b6daa94eeff4301a73f8774a81b40a0.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		有了数据之后，算法同学就可以根据数据建立特征工程，然后我们就可以进入到模型构建的环节了。&lt;/p&gt;
&lt;h3&gt;技术实现&lt;/h3&gt;
&lt;p&gt;​		从项目管控上来看，在推荐系统的项目建设过程中会涉及两波技术团队，分别是算法团队和工程团队，他们是并行进行的。&lt;/p&gt;
&lt;p&gt;​		 算法工程师在构建模型的同时，研发工程师也在进行系统功能的开发，最终系统工程与算法模型会通过 API 接口进行通信，这需要双方提前约定好接口协议。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;因此作为产品经理，我们除了要关注算法同学的模型构建，同时也要关注推荐系统工程的整体设计。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		对于系统工程的整体设计，产品经理要&lt;strong&gt;关注推荐系统进行一次完整推荐会涉及哪些系统模块，它们和算法模型是怎么交互的，数据流向什么样，产品的关键逻辑是在哪个模块中实现的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面，我们就来看下工程系统和算法模型的&lt;strong&gt;数据架构图，图中的箭头都是数据流向，方向是从左往右。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/746ee2bfd4224b378c7ae95a8deee39c.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		从架构图中，我们可以看到&lt;strong&gt;工程系统在进行推荐的时候，先后经过3个模块分别是召回模块、排序模块和调整模块，每个模块都调用了算法模型对应训练好的机器模型提供的服务。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;召回模块&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实时召回：&lt;/strong&gt;(用于用户召回信息计算；秒级)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时召回模型&lt;strong&gt;根据历史的用户行为数据，集合当前用户实时的浏览行为，计算并更新用户召回商品的列表信息。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时召回的计算是秒级运算&lt;/strong&gt;，比如你在京东 App 上&lt;strong&gt;搜索华为手机后，Feed 流就会推荐给你很多其他品牌手机。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;离线召回：&lt;/strong&gt;（用于用户偏好信息、热度榜单计算；定时脚本；存储到数据库）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每天通过定时脚本触发模型的计算&lt;/strong&gt;，如全量&lt;strong&gt;更新用户的偏好信息，计算热度榜单&lt;/strong&gt;等等不要求实时性的数据，&lt;strong&gt;这些数据会被存储到数据库中。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当工程系统调用某个用户的召回商品列表的时候，推荐系统&lt;strong&gt;直接查询数据库就能得到，不需要再计算一遍，从而提高了系统性能。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;排序模块&lt;/h4&gt;
&lt;p&gt;​		推荐系统会直接调用模型提供的排序服务。这&lt;/p&gt;
&lt;p&gt;​		里我们需要注意的是，在系统工程中排序服务可以&lt;strong&gt;通过规则（如加权平均、CTR 动态加权平均）的方式&lt;/strong&gt;实现，也可以&lt;strong&gt;基于机器学习模型的 CTR 预估方式&lt;/strong&gt;实现。&lt;/p&gt;
&lt;h4&gt;调整模块&lt;/h4&gt;
&lt;p&gt;​		调整模块是&lt;strong&gt;对排好序的商品列表进行运营策略上的调整&lt;/strong&gt;，它&lt;strong&gt;和业务规则强相关。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		最后，推荐系统会把最终的商品列表返回给产品客户端。&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		在实际情况下，技术同学还需要考虑很多非功能性的需求，比如系统响应时长、系统稳定性等等，但产品经理的重点还是要放在“召回”、“排序”和“调整”上面。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;h3&gt;评价标准&lt;/h3&gt;
&lt;p&gt;产品经理可以通过 AB 测试的方式进行评估，推荐系统要想做 AB 测试，有三点我们必须要注意：&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，&lt;strong&gt;推荐系统的工程代码要提前准备两套实现方案&lt;/strong&gt;，一套千人一面，一套千人千面；&lt;/li&gt;
&lt;li&gt;第二，&lt;strong&gt;推荐系统要能进行 AB 测试的切量配置&lt;/strong&gt;，也就是多少流量流向改造前的系统，多少流量流向改造后的系统，当然这个功能要让系统工程研发同学给予支持；&lt;/li&gt;
&lt;li&gt;第三，为了查看 AB 测试的效果，对比 &lt;strong&gt;CTR、UCTR、转化率&lt;/strong&gt;等指标，我们要生成最终的效果统计报表。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;但在 AB 测试切量的时候，我们要注意打上流量标志位，标识是哪种方案。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这样在统计报表的时候，我们才能分别计算指标，进而比较推荐系统在原有系统之上做到了多少提升。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/c8feb67214604f518ce4bedb80a8708d.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;实际的难点在于产品经理对指标的分析过程，以及最终给出的迭代计划，下面我们就来详细讲讲。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		因为我们的业务比较成熟，并且业务方的 &lt;strong&gt;PKI 是 GMV（Gross Merchandise Volume，成交总额）&lt;/strong&gt;，所以我们选用了 CVR 作为推荐系统的衡量标准。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;CVR的计算方式是转化数/点击数，也就是最终点击商品并且购买的转化率&lt;/strong&gt;，它通常在广告领域用的比较多。&lt;/p&gt;
&lt;p&gt;​		下表就是推荐指标的汇总，我们按照 0~3、3~6、6~9 对商品进行了分段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/9510c289cd1a42698be1649743654ee0.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		“传统方式”的 0~3 分的长尾商品没有曝光，这是因为我们之前一味地追求 GMV，所以运营同学对于低评分的长尾商品不做展示，把所有资源都倾向于头部品牌商的商品，让中小商家在平台上无法生存。&lt;strong&gt;因此，从长远的角度来看，一味的追求GMV并不健康。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		在对于推荐系统的迭代计划中，产品经理&lt;strong&gt;至少还要对不同人群、不同位置设置不同的评价指标&lt;/strong&gt;，最后&lt;strong&gt;再综合所有的评估指标来优化整体数据指标。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;整理&lt;/h3&gt;
&lt;p&gt;产品经理需要关注的内容可以从三方面概括，分别是能力、技术和岗位。&lt;/p&gt;
&lt;h4&gt;能力&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;能力可以总结为三点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，我们要能够清晰地设计需求：需求定义要明确需求背景、功能描述，以及预期的收益。&lt;/li&gt;
&lt;li&gt;第二，我们要能够理解数据：在推荐系统的数据准备阶段，产品经理要关注用户前端的埋点日志，提前设计埋点，以及给研发工程师提需求收集行为日志。&lt;/li&gt;
&lt;li&gt;第三，我们要能够对通过 AB 测试来评估推荐系统的效果，然后做出分析再给予持续的迭代计划。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技术&lt;/h4&gt;
&lt;p&gt;​		&lt;strong&gt;我们要重点掌握推荐系统中召回和排序模块的策略。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		这不仅包括我们这节课说的，工程系统进行一次完整推荐的时候各个系统模块的&lt;strong&gt;工作原理、交互逻辑&lt;/strong&gt;，还有我们上节课讲的常用&lt;strong&gt;协同过滤算法和相似度算法&lt;/strong&gt;的原理。&lt;/p&gt;
&lt;h4&gt;岗位&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/e293039a89df44b18c3a4c58a4e86057.jpg&quot; alt=&quot;img&quot; style=&quot;zoom: 67%;&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/410efd9b2e1d46868f8c691cad655355.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;冷启动&lt;/h1&gt;
&lt;p&gt;冷启动是指&lt;strong&gt;系统（如推荐系统、广告系统、用户增长等）在缺乏足够历史数据时，无法有效个性化推荐或决策的问题&lt;/strong&gt;。在推荐系统中，冷启动主要分为三类：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;用户冷启动&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;新用户无历史行为数据，难以个性化推荐&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OPPO应用商店的新注册用户&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;物品（内容）冷启动&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;新上架的商品/内容无曝光或互动数据&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;应用商店新发布的游戏&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;系统冷启动&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;全新平台或业务，无任何用户或内容数据&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;OPPO新推出的车机推荐系统&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户冷启动&lt;/strong&gt;：无法准确预测兴趣，可能导致推荐不相关，&lt;strong&gt;影响留存率。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物品冷启动&lt;/strong&gt;：新内容曝光少，难以进入推荐池，&lt;strong&gt;导致“马太效应”&lt;/strong&gt;（热门更热，冷门更冷）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统冷启动&lt;/strong&gt;：完全无数据，&lt;strong&gt;需依赖人工规则或外部数据&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;解决方案&lt;/h2&gt;
&lt;p&gt;总的来说主流冷启动策略可分为以下几类：&lt;/p&gt;
&lt;h3&gt;基于规则的冷启动&lt;/h3&gt;
&lt;p&gt;​		由于数据缺乏，个性化推荐引擎无法有效工作，自然可以让系统回退到“前推荐系统”时代，采用基于规则的方法。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;基于规则的冷启动方法更多依赖的是领域专家对业务的洞察。&lt;strong&gt;在制定冷启动规则时，需&lt;/strong&gt;充分了解公司的业务特点，充分利用已有数据&lt;/strong&gt;，才能让冷启动规则合理且高效。&lt;/p&gt;
&lt;h3&gt;丰富冷启动过程中获得的用户和物品特征&lt;/h3&gt;
&lt;p&gt;​		在历史数据特征缺失的情况下，推荐系统仍然可以凭借用户和物品的属性特征完成较粗粒度的推荐。这类属性特征包括以下几类：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;用户的注册信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.第三方DMP（&lt;strong&gt;Data Management Platform,数据管理平台&lt;/strong&gt;）提供的用户信息&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;物品的内容特征&lt;/strong&gt;（元数据）&lt;/p&gt;
&lt;p&gt;4.&lt;strong&gt;引导用户输入&lt;/strong&gt;的冷启动特征&lt;/p&gt;
&lt;h3&gt;“探索和利用机制”&lt;/h3&gt;
&lt;p&gt;​		探索和利用是在**“探索新数据”和“利用旧数据”之间进行平衡，使系统既能利用旧数据（捞鱼），又能高效地探索冷启动物品是否是优质物品（放鱼苗）。**&lt;/p&gt;
&lt;p&gt;​		这里以最经典的探索与&lt;strong&gt;利用方法UCB（Upper Confidence Bound，置信区间上界）为例&lt;/strong&gt;说明探索与利用的原理。&lt;/p&gt;
&lt;p&gt;​		使用UCB方法计算每个物品的得分的公式如下：&lt;/p&gt;
&lt;p&gt;$$UCB(j) = \overline{x_{j}} + \sqrt{\frac{2ln\ n}{n_{j}}}$$&lt;/p&gt;
&lt;p&gt;​		其中$x_{j}$为观测到的第j个物品的平均回报（这里平均回报可以是点击率、转化率、播放率等），$n_{j}$目前为止向用户曝光第$j$个物品的次数，$n$为到目前为止曝光所有物品的次数之和。&lt;/p&gt;
&lt;p&gt;​		通过简单的计算可知，**当物品的平均回报高时，UCB的得分会高；同时，当物品的曝光次数低时，UCB的得分也会高。**也就是说，&lt;strong&gt;使用UCB方法进行推荐，推荐系统会倾向于推荐“效果好”或者“冷启动”的物品。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;AB试验&lt;/h1&gt;
&lt;h2&gt;定义&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;A/B实验，又称为对照实验或随机实验，是一种在实验设计中常用的方法，用于比较两个或多个样本（通常是A和B）之间的差异。&lt;strong&gt;AB测试的&lt;/strong&gt;目的是评估不同变量对特定指标（转化率）的影响&lt;/strong&gt;，并确定哪个变量在给定条件下表现更好。&lt;/p&gt;
&lt;p&gt;​		现实业务使用中，我认为AB test就是&lt;strong&gt;保证2组或多组根据条件限制划分的用户在只有1个变量条件情况下，对分组用户的各项数据指标进行汇总，对比指标变化涨幅来确定试验好坏，并且伴随数据分析去发现问题，解决问题的一个过程&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;​		在AB测试中，&lt;strong&gt;参与者被随机分配到不同的组，每个组展示不同的变量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;统计功效组是对照组，通常是现有产品或设计的标准版本（如A）&lt;/strong&gt;，而&lt;strong&gt;其他组是实验组，展示不同产品或设计的其他版本（如B）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		通过在实验组和对照组之间比较特定指标**（如点击率、转化率、用户满意度等）**，可以评估不同版本之间的差异。&lt;/p&gt;
&lt;h2&gt;应用领域&lt;/h2&gt;
&lt;h3&gt;互联网&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;**内容推荐系统：**流媒体平台可以使用AB实验来优化推荐算法。
&lt;ul&gt;
&lt;li&gt;例如，一个推荐系统可能基于用户的历史观看记录（A组），而另一个则基于社交网络数据（B组）。通过比较两组用户的观看时长和满意度评分，可以确定哪种推荐方法更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**优化店铺网页设计：**在电子商务网站中，AB实验可以测试不同的网页布局、按钮颜色、导航栏设置等。
&lt;ul&gt;
&lt;li&gt;例如，A组使用现有的网页设计，B组使用修改后的版本，通过比较两组用户的购买率和页面停留时间来评估设计改进的有效性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;广告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优化广告图文效果：&lt;strong&gt;AB实验可以用于&lt;/strong&gt;测试不同广告文案、图像或视频的效果。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个版本的广告可能侧重于折扣信息（A组），而另一个版本则侧重于产品质量（B组）。通过比较两个广告版本的点击率和转化率，营销人员可以找到最能吸引目标受众的广告内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**广告播放策略： ** &lt;strong&gt;媒体公司可以测试不同的广告播放频率和时长&lt;/strong&gt;，A组用户可能看到较少的长广告，而B组看到较多的短广告。
&lt;ul&gt;
&lt;li&gt;通过观察用户的离开率和互动率，可以找出最佳的广告播放策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;政府&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;公共政策研究中，AB实验用于评估不同政策措施的效果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		例如，一组城市可能实施新的交通法规（A组），而另一组城市继续使用旧法规（B组）。通过比较两组城市的交通事故率和市民满意度，可以评估新法规的有效性。&lt;/p&gt;
&lt;h1&gt;A/B实验流程&lt;/h1&gt;
&lt;p&gt;1、分析现状，建立假设：分析业务，确定最高优先级的改进点，作出假设，提出优化建议。&lt;/p&gt;
&lt;p&gt;2、设定指标：设置主要指标来衡量版本的优劣；设置辅助指标来评估其他影响。&lt;/p&gt;
&lt;p&gt;3、设计与开发：设计优化版本的原型并完成开发。&lt;/p&gt;
&lt;p&gt;4、确定测试时长：确定测试进行的时长。&lt;/p&gt;
&lt;p&gt;5、确定分流方案：确定每个测试版本的分流比例及其他分流细节。&lt;/p&gt;
&lt;p&gt;6、采集并分析数据：收集实验数据，进行有效性和效果判断。&lt;/p&gt;
&lt;p&gt;7、给出结论：①确定发布新版本；②调整分流比例继续测试；③优化迭代方案重新开发，回到步骤1。&lt;/p&gt;
&lt;h2&gt;注意&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 测试时长：&lt;/strong&gt;  &lt;strong&gt;测试的时长不宜过短&lt;/strong&gt;，否则参与试验的用户几乎都是产品的高频用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 分流（或者说抽样）：&lt;strong&gt;应该保证&lt;/strong&gt;样本的同时性、同质性、唯一性、均匀性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;①同时性：&lt;/strong&gt;  &lt;strong&gt;分流应该是同时的，测试的进行也应该是同时的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;②同质性：&lt;strong&gt;也可以说是相似性，是要求&lt;/strong&gt;分出的用户群，在各维度的特征都相似&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​				可以基于&lt;strong&gt;用户的设备特征&lt;/strong&gt;（例如手机机型、操作系统版本号、手机语言等）和&lt;strong&gt;用户的其他标签&lt;/strong&gt;（例如性别、年龄、新老用户、会员等级等）进行分群，每一个A/B测试试验都可以选定特定的用户群进行试验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思考：如何判断是不是真的同质？&lt;strong&gt;可以采用AAB测试。抽出两份流量进行A版本的测试，进行AA测试，并分别与B版本进行AB测试。通过&lt;/strong&gt;考察A1和A2组是否存在显著性差异&lt;/strong&gt;，就可以确定试验的分流是否同质了。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;③唯一性：&lt;strong&gt;即要求用户&lt;/strong&gt;不被重复计入测试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;④均匀性：&lt;strong&gt;要求&lt;/strong&gt;各组流量是均匀的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​				Hash算法。现在一般由专用的A/B测试工具负责。也有看到一篇文章写了python实现，大体的思路是对用户id添加Salt值，对其散列，并据此算出一个0-1之间的浮点数，同设定好的阈值比大小，从而分组。&lt;/p&gt;
&lt;p&gt;​			有兴趣的可以看看，该作者的思路很清晰： 随机分配里的Why and How。（统计学原理上，我没有找到均匀性这一要求的依据，其实双样本的假设检验并不要求两个样本的数量相等或相近。当然从直观上是可以理解，&lt;strong&gt;希望分出的用户组越相近越好，包括人数的相近。&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. A/B测试只能有两个版本么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;A/B test不是只能A方案和B方案，实际上一个测试可以包含A/B/C/D/E/……多个版本&lt;/strong&gt;，但是要&lt;strong&gt;保证单变量&lt;/strong&gt;，比如按钮的颜色赤/橙/黄/绿/青/蓝/紫，那么这七个方案是可以做A/B测试的。&lt;/p&gt;
&lt;p&gt;​		但如果某方案在旁边新增了另一个按钮，&lt;strong&gt;即便实验结果产生了显著差异，我们也无法判断这种差异的成因究竟是谁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 同一段时间内可以做不同的A/B测试么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		比如一个test抽取总体20%的流量做按钮颜色的实验，另一个test也抽取总体20%的流量做布局样式的实验。是否可行？&lt;/p&gt;
&lt;p&gt;​		我认为是可行的。但要求**多个方案并行测试，同层互斥。**如果从总体里，先后两次随机抽取20%流量，则很有可能会有重叠的用户，&lt;strong&gt;既无法满足控制单变量，又影响了用户的使用体验&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同层指的是在同一流量层中创建实验&lt;/strong&gt;，在此层中创建的实验共享此层中的100%流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;互斥指的是在此层中，一个设备有且只能分配到此层多个实验中的某一个实验&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;AB测试用法&lt;/h1&gt;
&lt;h2&gt;业务中的生效逻辑&lt;/h2&gt;
&lt;p&gt;​		AB试验，既可以做客户端试验，也可以做服务端试验，下面就根据客户端和推荐服务端和AB试验平台的试验流程来讲一下其中的区别和生效逻辑：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.woshipm.com/wp-files/2021/09/zU1HYSpI2CQXAzHQAws5.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;客户端试验&lt;/strong&gt;（左图），主要是说用户请求推荐时，&lt;strong&gt;客户端主动带着用户信息（app版本号、渠道号、新老用户、用户onlyid）去AB试验平台上获取用户的试验配置&lt;/strong&gt;，试验平台会&lt;strong&gt;根据用户的onlyid进行哈希分流（这个下面有讲到）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		然后&lt;strong&gt;将用户分进对应的试验组，客户端会把用户的试验信息存在本地，每次用户打开app时会再去拉取一次配置，然后带着用户配置请求推荐接口&lt;/strong&gt;，推荐会根据用户的试验配置返回对应的推荐列表。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;服务端试验&lt;/strong&gt;（右图），则是将&lt;strong&gt;客户端请求试验平台变成了服务端请求试验平台获取用户试验配置，再返回对应的推荐列表。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端：&lt;strong&gt;不需要再经过服务端获取用户配置就能直接请求AB试验平台，逻辑上相对简单些，但是缺点是&lt;/strong&gt;客户端依赖版本更新，版本迭代较慢，试验全量起来比较慢，不好控制。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端：&lt;/strong&gt; &lt;strong&gt;需要在逻辑上多加一层去请求AB试验平台获取用户配置，但发版较快且不受客户端版本更新限制，试验全量比较好控制。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;业务指标建设&lt;/h2&gt;
&lt;p&gt;​		通常，我们做AB试验的时候，都会根据当下试验新增几个试验指标，当然，所有的试验都会带上大盘指标。根据公司业务和规划的差异，各公司的大盘指标都会存在差异。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;业务指标建设的时候，主要会根据这个试验的初衷来设置&lt;/strong&gt;，比如，我这个试验的目的是想提升点击率，那么，&lt;strong&gt;点击率&lt;/strong&gt;的指标就是我此次试验的核心指标；如果试验是为了提升&lt;strong&gt;转化率&lt;/strong&gt;，那么从开始到结束的每一步转化率指标，就是我们试验的核心指标。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;一般都会关注的大盘指标就是留存&lt;/strong&gt;，留存又分进组留存和活跃留存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电商类产品多关注&lt;strong&gt;点击率、成交率、留存以及GMV&lt;/strong&gt;等指标。&lt;/li&gt;
&lt;li&gt;视频类产品多关注&lt;strong&gt;渗透率（完播率）、转化率&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;资讯类产品多关注&lt;strong&gt;点击率、转化率、留存&lt;/strong&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		并非所有的试验都需要大盘数据增长才是好试验，而一些代码重构，或换系统等试验，多数需要保证大盘指标数据无下降即可。&lt;/p&gt;
&lt;h2&gt;用户进组设置&lt;/h2&gt;
&lt;p&gt;​		试验平台是&lt;strong&gt;怎么将用户分配到某个试验组中的&lt;/strong&gt;？简单来说就是&lt;strong&gt;桶位算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		可以理解为&lt;strong&gt;将用户流量分为了100个桶位&lt;/strong&gt;（现实中会分成1000个桶位或更多），假设我们要开一个10%流量的试验，需要&lt;strong&gt;对用户onlyid进行哈希取余&lt;/strong&gt;，如果余数落在前10个桶位，用户就命中这10%的流量，否则就不命中实验，用户也就不会进这个实验组。&lt;/p&gt;
&lt;h2&gt;试验层流量控制&lt;/h2&gt;
&lt;p&gt;​		AB试验可以单层，也可以多层，通常&lt;strong&gt;根据产品的用户量&lt;/strong&gt;来决定是否采取多层试验**，用户量较大，业务较多时，需要做的试验也越多**，就需要通过多层试验模式去进行AB，实现&lt;strong&gt;流量最大化利用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）单层试验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.woshipm.com/wp-files/2021/09/XmwjfTZRTOH2DDi0QaAp.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		单层试验上，流量100%，每个试验的流量是&lt;strong&gt;互斥&lt;/strong&gt;的。举例，试验1的用户，命中试验1，就不会再进同一个试验层上的试验2或试验3，&lt;strong&gt;在单层试验上，用户只能进一个试验的一个组，即便是对照组流量，也是如此&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		每个试验的流量至少会分成2组，也有多组试验，有试验组和对照组，每个试验中的各试验组的流量分配可以均匀分配，也可以自定义分配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）多试验层——分层流量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.woshipm.com/wp-files/2021/09/wGgQMwUFssge8PmcKUtB.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;多层试验，可以理解是多个单层试验的组合&lt;/strong&gt;，每个试验层就是上面说的单层试验，而试验层与试验层之间的流量是&lt;strong&gt;正交&lt;/strong&gt;的，也就是说，在召回层的试验1和试验2的2个用户，在召回层是互斥的，但在粗排层，很有可能在一个试验中，而在其他层，可能又会中其他的试验，业务越复杂，试验层越多。&lt;/p&gt;
&lt;p&gt;​		当两个试验处于不同层时，需要保证试验内容互不相关，也就是相同的试验配置需要开在一个单层试验层上互斥，否则将会干扰试验数据。通常，用户量大一些的公司，都会采取多试验层，这样试验流量也多，且各试验之间互不干扰。&lt;/p&gt;
&lt;h1&gt;AB test数据控制&lt;/h1&gt;
&lt;h2&gt;原理-假设检验&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9f80526142e214556bef2a19f8e00c9e_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.给出零假设和备择假设：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;零假设和备择假设是参数空间的真子集，且不能相交。&lt;/p&gt;
&lt;p&gt;常把没有把握不能轻易肯定的命题作为备择假设 H1 ，而把没有充分理由不能轻易否定的命题作为零假设 H0 。&lt;/p&gt;
&lt;p&gt;或者说我们将希望通过实验结果推翻的假设记为零假设H0 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.根据备择假设确定检验方向：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;备择假设含≠则为双尾；含&amp;lt;或&amp;gt;则为单尾，含&amp;lt;为左尾，含&amp;gt;为右尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.判断抽样分布类型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要判断抽样分布是否近似正态分布&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.确定检验类型及检验统计量：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在判断用什么检验的时候，首要考虑的条件是&lt;strong&gt;样本量&lt;/strong&gt;，其次是&lt;strong&gt;总体服从的分布&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;样本容量大时（统计学上一般认为n≥30），总体的均值和标准差未知，不要求总体近似服从正态分布。根据中心极限定理，样本容量大，则样本均值的抽样分布服从正态分布，总体标准差可以用样本标准差来估计，可用&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=103244273&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=Z%E6%A3%80%E9%AA%8C&amp;amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQzNTk1ODYsInEiOiJa5qOA6aqMIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MTAzMjQ0MjczLCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.A2b6hOtlK3A_w_cZj4t-elurvOvvV-X4P8HKl0QfrE0&amp;amp;zhida_source=entity&quot;&gt;Z检验&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;当样本容量小于30，且满足总体近似服从正态分布时，如果总体标准差已知，可用Z检验；&lt;/li&gt;
&lt;li&gt;当样本容量小于30，且满足总体近似服从正态分布时，如果总体标准差未知，可以用样本标准差去估计总体标准差，由此可用&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=103244273&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=T%E6%A3%80%E9%AA%8C&amp;amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQzNTk1ODYsInEiOiJU5qOA6aqMIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MTAzMjQ0MjczLCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.wLUD4HmhDU0kcX6CHMr6nhtGJi6NvtqQCp6Eog7bGVQ&amp;amp;zhida_source=entity&quot;&gt;T检验&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;当样本容量小于30，且不满足总体近似服从正态分布，不能用Z检验和T检验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单地说其实就是，&lt;strong&gt;总体标准差怎么估计&lt;/strong&gt;的问题。检验类型确定了，检验统计量也就确定了。&lt;/p&gt;
&lt;p&gt;（不过现在的很多软件简化了上述步骤，改为，&lt;strong&gt;若总体标准差已知（无论样本大小）都用Z检验&lt;/strong&gt;；&lt;strong&gt;若总体标准差未知，都用T检验&lt;/strong&gt;。&lt;strong&gt;不过当样本量够大的时候，T分布也近似于Z分布了&lt;/strong&gt;，所以最后的结果不会差很多。T分布其实是小样本的Z分布。一个样本的自由度越大，样本方差就越接近总体方差，T分布也就越接近Z分布。因此T分布的形状随自由度的变化而变化，自由度越大，越接近正态分布。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.给定显著性水平α：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;α常取0.1、0.05、0.01，后文会再谈到显著性水平与两类错误。&lt;/p&gt;
</content:encoded></item><item><title>Tencent Product Law Reading Summary</title><link>https://echo-carrie.github.io/posts/tencent-product-law-reading-summary/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/tencent-product-law-reading-summary/</guid><description>腾讯产品法阅读笔记及总结</description><pubDate>Tue, 01 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;产品思维主要分为五个，分别是本质思维、相对思维、抽象思维、系统思维以及演化思维。&lt;/p&gt;
&lt;h1&gt;本质思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第一性原理思维&lt;/strong&gt;：抛开&quot;别人怎么做&quot;和&quot;过去怎么做&quot;的参考，直接回归初始问题推导，获得独特视角。&lt;/p&gt;
&lt;p&gt;​	大到城市村落的分布、道路交通、全球航线的设计，小到你身边一 个灯泡、一把牙刷、一块肥皂的设计。所有这些产品，背后都有它的设 计故事。**只有抛开“别人怎么做”“过去怎么做”的参考，直接回归初始问题去进行推导，才有可能获得与众不同的视角。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连环追问法&lt;/strong&gt;是实践第一性原理的最佳方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过对问题的连环追问，我们能发现表面问题背后的真正问题到底是什么。&lt;/li&gt;
&lt;li&gt;通过对人的连环追问，我们能弄清楚人们的真正需要是什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;回顾并深入理解这些思路和实践经验就是产品设计的基础。 我们可以试着提出下面的问题来厘清过去设计者的思路和发现新问题。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;连环追问法的两类应用&lt;/h2&gt;
&lt;h3&gt;1. 对问题的追问&lt;/h3&gt;
&lt;p&gt;​		某种程度上已成定式的思路和经验并 不一定是问题的唯一解决路径。尤其随着&lt;strong&gt;时间推移、环境变迁、技术变革&lt;/strong&gt;，&lt;strong&gt;解决同一个“元问题”的最佳方案有可能已悄然改变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		我们可以从以下角度对问题进行追问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q1：当初为何那样设计？&lt;/li&gt;
&lt;li&gt;Q2：基于何种前提条件？&lt;/li&gt;
&lt;li&gt;Q3：前提条件现在是否变化？&lt;/li&gt;
&lt;li&gt;Q4：有无引入新问题？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 对人的追问（&quot;苏格拉底助产式&quot;提问法）&lt;/h3&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;​	苏格拉底为我们示范了对人运用连环追问法的前提：**我们需要发自内心地理解对方，站在对方的立场上鼓励他讲出自己的真实想法。&lt;strong&gt;这种 提问的方法，也被称为&lt;/strong&gt;“助产式”提问法。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;​		我们往往无法通过连环追问法直接确认用户最本质的需求，这就像 &lt;strong&gt;马车时代的用户不可能提出想要一辆汽车的诉求，而是会表达为需要一 匹更快的马&lt;/strong&gt;——事实上用户想要的无疑是更快地到达目的地。&lt;/p&gt;
&lt;p&gt;​		通过连环追问，&lt;strong&gt;你能够搜集到的用户反馈质量是不同的，但它能够帮助你更清晰地看到用户提出某种需要背后的真实动机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;要特别珍视无法理解用户动机”的情况，因为这往往藏着被我们忽略掉的某种使用场景。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;我们可以参考以下角度对问题进行追问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q1:为什么你认为备份的通讯录和手机里的保持一致是无法接受的呢?&lt;/li&gt;
&lt;li&gt;A1:因为我备份就是为了让云端的通讯录尽可能全，不然我干吗要备份?&lt;/li&gt;
&lt;li&gt;Q2:好的，我理解你的意思是手机里存的联系人要比云端通讯录更少、更精简，这样用起来才觉得方便，对吗?&lt;/li&gt;
&lt;li&gt;A2:是的。&lt;/li&gt;
&lt;li&gt;Q3:为什么这样更好用呢?因为通讯录联系人太多了吗?还是出于其他的考虑呢?&lt;/li&gt;
&lt;li&gt;A3:是的。我是做大客户销售的。第一，我不希望手机通讯录一打开所有客户资料都能看到:其次，我存的联系人数量很多，但有些人我联系的频率极低，只希望有个备份，不希望他们一直驻留在我手机里。&lt;/li&gt;
&lt;li&gt;Q4:好的，你看我这么理解对不对?有一部分通讯录资料你不想让它显示在手机里;但同时，在某些情况下(偶尔)可以快捷地把它们
找回来。&lt;/li&gt;
&lt;li&gt;A4:是的，想找的时候通过你们软件能看到就行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;特别提醒&lt;/h2&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;对前人所运用方案的充分理解是“第一性原理”运用的基础，“拒绝被同类产品的设计影响”和“压根不懂同类产品的设计”是完全不同的两件事。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3&gt;成熟的定式大于一切&lt;/h3&gt;
&lt;p&gt;​		并不是所有“定式”都能被 优化。如果做设计全都另起炉灶从头来一遍，却不考虑成本问题，那无疑就走进了第一性原理的误区。**在大多数情况下，成熟的“定式”远比莫 名其妙的新点子来得高效。我们需要尽力避免“为颠覆而颠覆”，不 要“重复造轮子”。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;何时回归原点&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;​		什么时候应该回归原点重来，什么时候可以直接使用现成的“轮子”？&lt;/p&gt;
&lt;p&gt;​		最好的办法是时刻保有从源头思考的意识，充分理解过往思路和关键环节，关注旧模式的前提是否发生变化、是否存在新的优化空间，快 速判断是否存在全新的解决方案。&lt;/p&gt;
&lt;h2&gt;大数据时代的思考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大数据增强预测，但不替代逻辑思考&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初创团队应先聚焦核心数据，而非盲目依赖外部数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优秀设计=数据洞察+第一性原理推导&lt;/strong&gt;，二者缺一不可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		在大数据时代我们可以不再追究事物之间的因果联系了。因为当&lt;strong&gt;影响事件的因素无限多时，想要了解完整的因果关系几 乎是不可能的，耗时耗力还不一定有效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		大数据技术已经可以协助我们预测用户行为。比如，我们借助大数据可以知道在女装电商网页上展示男装广告的效果会很好，&lt;strong&gt;我们还能知道用户A行为和B行为的关联度极高，但也许这两个行为在常人眼里风马牛不相及&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		大数据的基础是数据，海量的数据，基于什么样的数据做判断至关重要，&lt;strong&gt;对于一个产品初创者，在没有可靠的量级数据前提下，直接使用 第三方数据做出的判断极有可能是错误的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		即使有了海量的大数据作为基础，**作为产品的设计者，在分析问题时，依然需要保有“第一性原理”的意识。**数据能够帮助我们测试模型、 发现意料外的事实，但如何使用和定义这些数据现象，又是另一回事。&lt;/p&gt;
&lt;h1&gt;相对思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;没有绝对的好坏，只有动态的平衡&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路径依赖可被设计，关键在主动塑造而非被动接受&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顶级产品=用户心智中的“条件反射触发器”&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		万事万物都在“相对”中寻找一种平衡。&lt;strong&gt;一个产品设计者首先要抱持“不下定义”的觉悟&lt;/strong&gt;，才能看到事物之间的“关系”和“变化”，而不是只瞧见那些暂时悬挂在事物身上的标签。&lt;/p&gt;
&lt;p&gt;​		**就像日光照射 的地球有阴面就必有阳面一样，“路径依赖”和“标签化”看问题同样也能 带来好处。**并且一般来说，某事物在所谓“坏”的程度上劣势越明显，在 另一个“好”的面向上，优势也会越明显。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;很多产品设计者和营销者因为深刻意识到条件反射、路径依赖对人们心理的影响&lt;/strong&gt;，从这一点出发逆向思考，发现了这一心理效应能为产品的营销和传播带来巨大价值。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;假如你能成功地在用户心里建立起“条件反射”“路径依赖”的联想机制，你的品牌建设大体上也就成功了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;拒绝绝对化，拥抱相对性&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不下定义，观察关系&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;事物价值取决于其关联与变化，而非固定标签。&lt;/li&gt;
&lt;li&gt;例：用户对“复杂功能”的评价可能因场景而异（专业用户 vs 新手）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日光与阴影法则&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;任何设计特性均有正反两面，优劣共存。&lt;/li&gt;
&lt;li&gt;例：极简设计降低认知负荷，但可能牺牲功能深度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;路径依赖的双面性&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;劣势即优势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户习惯（路径依赖）可能阻碍创新，却也是品牌粘性的基础。&lt;/li&gt;
&lt;li&gt;例：微信的“长按语音转文字”操作反直觉，但用户习惯后形成壁垒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逆向利用心理效应&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过刻意培养用户的条件反射（如“红包=微信”），强化品牌认知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;构建用户心智的“条件反射”&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;品牌即联想&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;成功的产品会在用户心智中建立“问题→解决方案”的自动链接。&lt;/li&gt;
&lt;li&gt;例：怕上火→王老吉；搜索→Google。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计策略&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：重复交互模式强化记忆（如抖音的无限下滑）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;情感锚点&lt;/strong&gt;：将功能与情绪关联（如“叮咚”声=外卖送达）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;抽象思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从本质出发，而不是模仿别人成功的套路。&lt;/li&gt;
&lt;li&gt;抽象思维赋能创新。&lt;/li&gt;
&lt;li&gt;在宏观架构与微观体验间保持平衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;产品认知的三个层次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表层体验&lt;/strong&gt;（肉眼模式）：
&lt;ul&gt;
&lt;li&gt;感知产品的色彩、形状、交互流畅度。&lt;/li&gt;
&lt;li&gt;关注使用时的直观感受和乐趣。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中层架构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;洞察产品的隐形框架和交互路径。&lt;/li&gt;
&lt;li&gt;分析设计逻辑的合理性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深层理念&lt;/strong&gt;（火眼金睛模式）：
&lt;ul&gt;
&lt;li&gt;把握产品的核心骨骼和设计哲学。&lt;/li&gt;
&lt;li&gt;理解产品的战略格局。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;产品人的双重视角&lt;/h2&gt;
&lt;p&gt;​		我们都是容易被表象迷惑的人。&lt;/p&gt;
&lt;p&gt;​		但从某种意义上来说，&lt;strong&gt;成为一名卓越产品设计者的过程，就是一个 不断训练自己眼力的过程&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​		从最开始&lt;strong&gt;只能看到一个产品的色彩形状、交互样式，感受它用起来是不是自然流畅、充满乐趣。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		到进一步觉&lt;strong&gt;察产品背后的隐形框架、交互路径，分析它是不是合理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		**直至最终抵达高度抽 象后的产品骨骼、设计理念，看懂它切入的格局。**产品人在实践中磨 砺，最高境界就是拥有一对大圣的火眼金睛。&lt;/p&gt;
&lt;p&gt;​		所以，最好的状态大概是这样的：&lt;strong&gt;既能用“火眼金睛”看骨骼，也能 切换到“肉眼”模式看体验。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		这种在“设计专家型”视角和“白痴级用户”视 角之间自由转换的能力，在腾讯内部被认为是产品经理必备的重要能力之一。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;专家模式&lt;/strong&gt;：用抽象思维看产品架构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;小白模式&lt;/strong&gt;：用具体体验感受产品&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键能力&lt;/strong&gt;：在两种视角间自如切换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;h2&gt;持续优化的方法论&lt;/h2&gt;
&lt;p&gt;​	**“一天发现一个问题，解决好，三个月后，产品就会慢慢逼近那个‘很有口碑’的点”。**在这句话里， 发现问题是前提。某种程度上说，那些自我感觉特别良好，认为自己的 产品已经“挺好了”的产品设计者，也许还不足以被称为称职的设计者。&quot;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每日发现并解决一个问题&lt;/li&gt;
&lt;li&gt;三个月持续优化可达到口碑临界点&lt;/li&gt;
&lt;li&gt;警惕&quot;产品已经很完美&quot;的思维定式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;抽象思维的培养&lt;/h2&gt;
&lt;p&gt;​	有一个特别的建议。&lt;strong&gt;当你搭乘飞机旅行的时候，请挑一个靠窗边的座位，在起飞过程中俯瞰大地并细心留意这一过程中的变化：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		原本特别清晰的屋顶、田地，会在飞机攀升的过程中不断变小、变模糊。不同屋顶、不同田地间清晰的边界线也会慢慢地消失，逐渐融为一体。随着你观察视角的不断升高，这种相近事物之间的“合并”会进行得越来越快。 抽象看问题的方法就和这个升高视角的过程极其相似。&lt;/p&gt;
&lt;h2&gt;产品设计的克制原则&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;好的产品设计，就是运用数量有限的基础能力，去实现高满意度的功能&lt;/strong&gt;（当然使用率频次也很重要，这和用户对产品的自然需求相关）。 &lt;strong&gt;而没信心的表现，往往是只要和产品沾点边，就这个功能也做，那个功能也上，不知道哪个功能效果好，做了一堆功能，最后却发现很多功能用户根本就不会去用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优秀设计：
&lt;ul&gt;
&lt;li&gt;用有限基础能力实现高满意度&lt;/li&gt;
&lt;li&gt;聚焦核心功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;失败设计：
&lt;ul&gt;
&lt;li&gt;功能堆砌&lt;/li&gt;
&lt;li&gt;用户需求不明确&lt;/li&gt;
&lt;li&gt;资源分散&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;迭代升级的正确姿势&lt;/h2&gt;
&lt;p&gt;​		一方面知道版本迭代升级、新增功能的重要性，但另一方面又为“新增功能”而苦恼。 因为有些功能加在现有架构上总像是硬生生装了一个义肢似的多余。&lt;/p&gt;
&lt;p&gt;​		该如何避免这种状况的发生呢？其实抽象思维这时候也能派上用场。 &lt;strong&gt;一个可行的建议是：不要考虑添加的新功能是什么，而去考虑添加的新能力（元素）是什么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免生硬添加功能&lt;/li&gt;
&lt;li&gt;关注新增&quot;能力元素&quot;而非功能&lt;/li&gt;
&lt;li&gt;保持架构的有机统一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1&gt;系统思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优秀产品是精心设计的反馈系统&lt;/li&gt;
&lt;li&gt;破局点往往简单而精准，而非复杂全面&lt;/li&gt;
&lt;li&gt;避免&quot;只见树木不见森林&quot;的局部优化&lt;/li&gt;
&lt;li&gt;用系统视角看待产品演化和用户行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持系统视角：看到要素间的相互影响、预期时滞效应&lt;/li&gt;
&lt;li&gt;验证方式：市场结果检验+数据持续监测&lt;/li&gt;
&lt;li&gt;平衡方法：既要细节执行、又要系统思考&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;镜子与变色龙效应&lt;/h2&gt;
&lt;p&gt;​		每一年，潘通会选择一个欧洲国家的首都举行一次秘密会议。这个 持续两天的会议被安排在“没有颜色”的房间里召开。由来自不同国家的 色彩标准工作组出席讨论并进行提案，他们综合评估各方数据趋势的变 化，从超过2000个备选方案中选出次年的年度色彩。&lt;/p&gt;
&lt;p&gt;​		 全球来自视觉、工业、时装等领域的设计师、零售商和制造商们用 他们的反馈影响着这次会议的提案。另一方面，潘通高管和客户组成的 委员会依据调查报告和色板销售情况做出他们的抉择。&lt;/p&gt;
&lt;p&gt;​		也就是说，&lt;strong&gt;流行色的源头是人们的行为数据，流行色是对数据趋势 进行预测的结果。&lt;strong&gt;但&lt;/strong&gt;与此同时，潘通向全球发布的流行色又会吸引人们 关注的目光，进而引发新一轮追随浪潮。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		多么奇妙！**人们制造的数据主导了设计源头，但又反过来作用于他们自身。**是不是像极了那只不断追逐镜中色彩的变色龙？&lt;/p&gt;
&lt;p&gt;​		 面对这种复杂的、各种因素相互影响的循环模式，我们会发现：&lt;strong&gt;线性思维失灵了！并不是套用一个固定的公式，就能够得到一个固定的答案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;流行色和潘通选色双向影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据决定设计源头 → 设计影响用户行为 → 产生新数据&lt;/li&gt;
&lt;li&gt;形成自我强化的循环系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;反馈系统模型&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;反馈系统模型是所有产品最基础的 抽象模型。我们常说的产品框架设计本质上都是在设计反馈。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		不过**设计反馈最终还是为了解决问题，为了从一团乱麻中找到最重要的那个线头。**而只要找对了线头，也就是系统中的“关键解”“破局点”，往往就能实现四两拨千斤的效果。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有产品本质都是反馈系统&lt;/li&gt;
&lt;li&gt;设计框架=设计反馈机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;寻找破局点&lt;/h2&gt;
&lt;p&gt;​		从微信红包案例我们可以看出，&lt;strong&gt;系统破局点往往不是一个大而全的方案，而是一个恰到好处的“锥子”，针对、聚焦于某一特定场景，并且 携带着“自下而上”的用户价值&lt;/strong&gt;。这样一锥下去，系统乾坤颠倒。&lt;/p&gt;
&lt;p&gt;​		不过&lt;strong&gt;要找到这种高强度的破局点确实不容易，它依赖强大的产品洞察力和一点刚刚好的运气&lt;/strong&gt;。所以，如果不具备深湛的系统思考力也没关 系，重要的是，&lt;strong&gt;我们已经开始意识到这类模型的存在，不再是一个纯线性的思考者了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		并且在复杂的系统面前，**有一件事是残酷且公平的：无论是经验丰富的产品人还是刚跨进门槛的初学者，无论我们系统思考后得到的答案是什么，最终也要看实际运行的结果。**只有结果才能够检验 系统思考的正确性。&lt;/p&gt;
&lt;p&gt;​		**有时滞的系统才是大自 然与商业环境中最为常见的系统模型。**而关于“反馈”，其实存在种种可能，它既有可能起到限制或约束的作用，也有可能起到扩大与增强的效果。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破局点特征：
&lt;ul&gt;
&lt;li&gt;小而精准，非大而全&lt;/li&gt;
&lt;li&gt;针对特定场景&lt;/li&gt;
&lt;li&gt;自带用户价值&lt;/li&gt;
&lt;li&gt;能引发系统级变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时滞效应：
&lt;ul&gt;
&lt;li&gt;反馈存在延迟&lt;/li&gt;
&lt;li&gt;商业系统的常态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;常见误区&lt;/h2&gt;
&lt;p&gt;第一类，被异常路径左右，抓不住重点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责开发工作的工程师们往往会很负责地追问所有极端和异常的路径。&lt;/li&gt;
&lt;li&gt;我发现一旦把状态调整 为“事无巨细”型，就容易过分地陷入细节泥潭——看起来结果变得周详 了，但却有类似“无论什么看起来都很重要”“无从抓取重点路径”的感 觉。这种感觉像是走进了一个巨大的迷宫，每一条路看起来离终点都很 接近，可又都差那么点儿意思。&lt;strong&gt;而面对那些枝枝节节的异常路径，也总会觉得“这个必须解决”“那个似乎也不该放弃”。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二类，头痛医头，脚痛医脚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也许昨天冒出了一个A问题，用最直接的解决方案去修补好了，今天却又冒出了B 问题，而B正是由A的解决方式引发的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在产品数据下降时，你设计了一个挽救数据的功能&lt;/strong&gt;——可能是一次特别的营销活动，也可能是一次品牌合作等，这个功能使得数 据短期提升了不少，但时间一长，你会发现数据下跌得更厉害了。&lt;/li&gt;
&lt;li&gt;你对产品模型的分析还不够透彻。&lt;strong&gt;最有效的做法是重新梳理产品中的反馈，进行系统思考，确定真正“治本”的解决方案，而不是忙着“治标”。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;异常路径陷阱：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过度关注边缘case、导致失去核心重点&lt;/li&gt;
&lt;li&gt;解决方案：区分主路径与异常路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;治标不治本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短期营销拉升数据、后续更剧烈下跌&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;根本解法：重新梳理反馈系统、寻找本质解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1&gt;演化思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;存活产品=持续进化+环境适应&lt;/li&gt;
&lt;li&gt;有效试错≠频繁更换目标&lt;/li&gt;
&lt;li&gt;清晰DNA=统一的产品选择&lt;/li&gt;
&lt;li&gt;极简框架（MVP）=演化的最佳基础&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;产品存活的关键要素&amp;amp;反脆弱系统&lt;/h2&gt;
&lt;p&gt;​	**“经济学关心的是存活的条件。一个人，一个组织，甚至一个制度，是怎么存活下来的？它有什么条件才能够存活下 来？如果条件发生了改变，存活的情况又会发生怎么样的改变。这才是 经济学关心的议题。” **&lt;/p&gt;
&lt;p&gt;​		站在时间的巨轮上回望，这一切就像数量众多的赌徒在进行一场前 赴后继的通关游戏。外部环境设置重重关卡，那些恰巧碰对关卡密码并 通关的生命，赶紧用DNA记录下通关密码，并把它传递给后一代。**生命通过这种方式代代积累着不同能力的DNA。 而生存下来的适者，是一开始计划好自己的演化策略的么？不是的，它们完全不知道哪种能力可以生存下去，它们只是刚好碰巧通关的幸存者而已。**这才是达尔文表达的真义。&lt;/p&gt;
&lt;p&gt;​		一个产品能否在现实中“存活”下去，它要面临的状况和阿尔奇安讲的“逃离芝加哥”很有些相似之处。&lt;strong&gt;产品所处的时代背景、产业环境、竞争对手、用户群体特征等众多因素，都影响着产品存活的可能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		设计者最关键的任务是“找出那条可以存活下去的路”。那么，这条可存活的路是一开始就高屋建瓴地规划出来的么？不是的。&lt;strong&gt;产品和生命体、组织、制度一样，也在不断调整、试错的过程中才能找到路活下来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		具有生命力的产品，和环境息息相关。环境变了，能够存活的条件 变了，它也会随之迭代更新、调整改变。因此，互联网市场变化极快， 互联网产品就成了最讲究“迭代”的产品。&lt;strong&gt;产品从最开始第一个版本发布，到后面不断地更新迭代，每次迭代都是在当时的环境下寻找最佳存活路径的结果。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;​		那么，我们要怎么才能找到那条“对”的路呢？简单来讲，&lt;strong&gt;需要赋予产品一种类生命的特性，一种多数量、多样化同时竞争的特性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		他们认为自己需要判断的只是“这个点子是不是靠谱”，只要点子靠谱，结果就是确定的了。你看，这就是“买彩票 式”的创业。&lt;strong&gt;他们没有意识到，令一个产品最终活下来的绝不是最初的那个好点子，而是，你构建了一个怎样的产品系统去做这件事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		现实世界确实充满了不确 定，但&lt;strong&gt;我们可以建立一个“反脆弱”的系统，这样性质的系统具有强大的韧性，可以从失败中汲取养分，从不确定性中获益。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		打个比方，大家都知道哆啦A梦吧？它可以说是“反脆弱”的典型代表。为什么？你看每次它遭遇危机的时候就在兜里掏啊掏，先拿出A道 具来试一下，如果没法应对又会继续掏出B道具来试。**它的兜兜里不仅 有Plan A、Plan B，还有N多种不同的应对方案。**我们形容某个人满肚鬼点子，可能会说他“一计不成，又生一计”，其实也是在讲这个意思。&lt;/p&gt;
&lt;p&gt;​		因为不能百分百确定存活条件是什么，必须以最小的成本、最大的数量积极试错——这样的系统就是类生命特性的系统，这样的企业、这 种类型的产品才不会轻易死掉。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;多维影响因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;竞争对手格局&lt;/li&gt;
&lt;li&gt;时代背景特征&lt;/li&gt;
&lt;li&gt;用户群体变迁&lt;/li&gt;
&lt;li&gt;产品自身特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;核心要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续进化能力、寻找最佳生存路径&lt;/li&gt;
&lt;li&gt;环境适应韧性&lt;/li&gt;
&lt;li&gt;赋予类生命特性、多数量、多样化竞争的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;企业的演化之路&lt;/h2&gt;
&lt;p&gt;​		**对初创型企业来说，运用精益创业思路，以最小成本快速迭代，积极试错，犯错的次数就是企业制造“生命”的数量。**当排除很多的错误路径后，产品就能不断向着对的方向前进。后文将谈到的最小可行性产品原型之所以有效，就在于它以非常小的成本获得了极大的可能性，是以小博大的典型工具。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;对成熟型企业来说，需要思考的是整个公司产品体系的稳定性以及 重点产品的架构稳定性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		通过思考整体布局，让处于不同生命周期的产品承担不同的任务目标，进而使企业获得更强的稳定性。&lt;/p&gt;
&lt;h2&gt;演化模型构建方法&lt;/h2&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;Q：怎样的产品框架结构才具有扩展性，符合演化（即产品迭代）的目标？&lt;/p&gt;
&lt;p&gt;A：答案是极简，极简是演化的基础，极简可以最大限度地兼容变化。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;​	不过，**极简并不是指“越简单越好”，而是“当前没有什么可以拿掉了”。**它是设计最终呈现的结果而非最初抱持的目标，它来自对产品元素充分、全面的考量、抽象、去芜存菁。 在思考框架结构的过程中，产品设计者需要充分实践我们前面提到的抽象思维。&lt;/p&gt;
&lt;p&gt;​		**好框架在每个阶段体现出来的核心任务只有一个。选出那个最重要的任务，聚焦再聚焦，利用产品框架去放大它，完成任务后再把 它收纳起来。**可以支撑上述这些行为的框架才算得上是好框架。&lt;/p&gt;
&lt;p&gt;​		例子：**Keep由提供单纯的健身训练教学这一核心功能起步，演化拓展到跑步、骑行等运动领域。**但是，在它刚推出跑步功能时，只是在首页左上角开辟了一个入口。框架重心依旧落在健身训练的主题上。直至最新的4.0版本，才将跑步和骑行提到了与训练并列的位置上。&lt;/p&gt;
&lt;p&gt;​		通过以上案例，相信大家已经大体了解了版本演化的重点。明白为什么&lt;strong&gt;糟糕的框架设计会让用户感觉“每次改版都在推倒重来”，而好的框架给用户的感觉是“没怎么变，但功能推陈出新，很有节奏感”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		所以，从抽象层面上说，&lt;strong&gt;好的框架和重点突出的思维导图相似—— 重点清晰，并且能够收放自如。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;从MPP出发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimum Possible Product（最小可能产品）、保留不可删减的核心&lt;/li&gt;
&lt;li&gt;好的框架迭代中保有节奏感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;迭代策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每代产品突出不同重点、满足阶段性需求&lt;/li&gt;
&lt;li&gt;及时响应市场反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;产品DNA构成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;核心要素：
&lt;ul&gt;
&lt;li&gt;品牌形象&lt;/li&gt;
&lt;li&gt;核心功能&lt;/li&gt;
&lt;li&gt;用户认知&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延伸维度：
&lt;ul&gt;
&lt;li&gt;设计理念&lt;/li&gt;
&lt;li&gt;设计规则&lt;/li&gt;
&lt;li&gt;价值主张&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演化思维实践案例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;精益创业：
&lt;ul&gt;
&lt;li&gt;MVP验证&lt;/li&gt;
&lt;li&gt;快速迭代&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;腾讯赛马：
&lt;ul&gt;
&lt;li&gt;内部团队PK&lt;/li&gt;
&lt;li&gt;自然选择最优解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;天使投资：
&lt;ul&gt;
&lt;li&gt;领域撒网策略&lt;/li&gt;
&lt;li&gt;提高成功概率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;构建反脆弱系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;核心特征：
&lt;ul&gt;
&lt;li&gt;多样化应对方案&lt;/li&gt;
&lt;li&gt;从失败中学习&lt;/li&gt;
&lt;li&gt;不确定性获益&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实施要点：
&lt;ul&gt;
&lt;li&gt;初创企业：低成本快速试错&lt;/li&gt;
&lt;li&gt;成熟企业：体系化产品布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;极简演化框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;设计原则：
&lt;ul&gt;
&lt;li&gt;&quot;无可删减&quot;的极简&lt;/li&gt;
&lt;li&gt;最大化兼容变化&lt;/li&gt;
&lt;li&gt;单阶段单重点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优秀案例：
&lt;ul&gt;
&lt;li&gt;Keep功能演进路径&lt;/li&gt;
&lt;li&gt;微信插件化设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Markdown Extended Features</title><link>https://echo-carrie.github.io/posts/markdown-extended/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/markdown-extended/</guid><description>Read more about Markdown features in Fuwari</description><pubDate>Wed, 01 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;GitHub Repository Cards&lt;/h2&gt;
&lt;p&gt;You can add dynamic cards that link to GitHub repositories, on page load, the repository information is pulled from the GitHub API.&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;Fabrizz/MMM-OnSpotify&quot;}&lt;/p&gt;
&lt;p&gt;Create a GitHub repository card with the code &lt;code&gt;::github{repo=&quot;&amp;lt;owner&amp;gt;/&amp;lt;repo&amp;gt;&quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::github{repo=&quot;saicaca/fuwari&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Admonitions&lt;/h2&gt;
&lt;p&gt;Following types of admonitions are supported: &lt;code&gt;note&lt;/code&gt; &lt;code&gt;tip&lt;/code&gt; &lt;code&gt;important&lt;/code&gt; &lt;code&gt;warning&lt;/code&gt; &lt;code&gt;caution&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::note
Highlights information that users should take into account, even when skimming.
:::&lt;/p&gt;
&lt;p&gt;:::tip
Optional information to help a user be more successful.
:::&lt;/p&gt;
&lt;p&gt;:::important
Crucial information necessary for users to succeed.
:::&lt;/p&gt;
&lt;p&gt;:::warning
Critical content demanding immediate user attention due to potential risks.
:::&lt;/p&gt;
&lt;p&gt;:::caution
Negative potential consequences of an action.
:::&lt;/p&gt;
&lt;h3&gt;Basic Syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;:::note
Highlights information that users should take into account, even when skimming.
:::

:::tip
Optional information to help a user be more successful.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Custom Titles&lt;/h3&gt;
&lt;p&gt;The title of the admonition can be customized.&lt;/p&gt;
&lt;p&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;GitHub Syntax&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]
&lt;a href=&quot;https://github.com/orgs/community/discussions/16925&quot;&gt;The GitHub syntax&lt;/a&gt; is also supported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; [!NOTE]
&amp;gt; The GitHub syntax is also supported.

&amp;gt; [!TIP]
&amp;gt; The GitHub syntax is also supported.
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Simple Guides for Fuwari</title><link>https://echo-carrie.github.io/posts/guide/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/guide/</guid><description>How to use this blog template.</description><pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Cover image source: &lt;a href=&quot;https://image.civitai.com/xG1nkqKTMzGDvpLrqFT7WA/208fc754-890d-4adb-9753-2c963332675d/width=2048/01651-1456859105-(colour_1.5),girl,_Blue,yellow,green,cyan,purple,red,pink,_best,8k,UHD,masterpiece,male%20focus,%201boy,gloves,%20ponytail,%20long%20hair,.jpeg&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This blog template is built with &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt;. For the things that are not mentioned in this guide, you may find the answers in the &lt;a href=&quot;https://docs.astro.build/&quot;&gt;Astro Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Front-matter of Posts&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
title: My First Blog Post
published: 2023-09-09
description: This is the first post of my new Astro blog.
image: ./cover.jpg
tags: [Foo, Bar]
category: Front-end
draft: false
---
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The title of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;published&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The date the post was published.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the post. Displayed on index page.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The cover image path of the post.&amp;lt;br/&amp;gt;1. Start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;: Use web image&amp;lt;br/&amp;gt;2. Start with &lt;code&gt;/&lt;/code&gt;: For image in &lt;code&gt;public&lt;/code&gt; dir&amp;lt;br/&amp;gt;3. With none of the prefixes: Relative to the markdown file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The tags of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The category of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;draft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If this post is still a draft, which won&apos;t be displayed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Where to Place the Post Files&lt;/h2&gt;
&lt;p&gt;Your post files should be placed in &lt;code&gt;src/content/posts/&lt;/code&gt; directory. You can also create sub-directories to better organize your posts and assets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/content/posts/
├── post-1.md
└── post-2/
    ├── cover.png
    └── index.md
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Markdown Example</title><link>https://echo-carrie.github.io/posts/markdown/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/markdown/</guid><description>A simple example of a Markdown blog post.</description><pubDate>Sun, 01 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;An h1 header&lt;/h1&gt;
&lt;p&gt;Paragraphs are separated by a blank line.&lt;/p&gt;
&lt;p&gt;2nd paragraph. &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, and &lt;code&gt;monospace&lt;/code&gt;. Itemized lists
look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this one&lt;/li&gt;
&lt;li&gt;that one&lt;/li&gt;
&lt;li&gt;the other one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Block quotes are
written like so.&lt;/p&gt;
&lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &quot;it&apos;s all
in chapters 12--14&quot;). Three dots ... will be converted to an ellipsis.
Unicode is supported. ☺&lt;/p&gt;
&lt;h2&gt;An h2 header&lt;/h2&gt;
&lt;p&gt;Here&apos;s a numbered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first item&lt;/li&gt;
&lt;li&gt;second item&lt;/li&gt;
&lt;li&gt;third item&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here&apos;s a code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(which makes copying &amp;amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;An h3 header&lt;/h3&gt;
&lt;p&gt;Now a nested list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, get these ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;carrots&lt;/li&gt;
&lt;li&gt;celery&lt;/li&gt;
&lt;li&gt;lentils&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boil some water.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump everything in the pot and follow
this algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; find wooden spoon
 uncover pot
 stir
 cover pot
 balance wooden spoon precariously on pot handle
 wait 10 minutes
 goto first step (or shut off burner when done)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not bump wooden spoon or it will fall.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).&lt;/p&gt;
&lt;p&gt;Here&apos;s a link to &lt;a href=&quot;http://foo.bar&quot;&gt;a website&lt;/a&gt;, to a &lt;a href=&quot;local-doc.html&quot;&gt;local
doc&lt;/a&gt;, and to a &lt;a href=&quot;#an-h2-header&quot;&gt;section heading in the current
doc&lt;/a&gt;. Here&apos;s a footnote [^1].&lt;/p&gt;
&lt;p&gt;[^1]: Footnote text goes here.&lt;/p&gt;
&lt;p&gt;Tables can look like this:&lt;/p&gt;
&lt;p&gt;size material color&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;9 leather brown
10 hemp canvas natural
11 glass transparent&lt;/p&gt;
&lt;p&gt;Table: Shoes, their sizes, and what they&apos;re made of&lt;/p&gt;
&lt;p&gt;(The above is the caption for the table.) Pandoc also supports
multi-line tables:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;keyword text&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;red Sunsets, apples, and
other red or reddish
things.&lt;/p&gt;
&lt;p&gt;green Leaves, grass, frogs
and other things it&apos;s
not easy being.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A horizontal rule follows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here&apos;s a definition list:&lt;/p&gt;
&lt;p&gt;apples
: Good for making applesauce.
oranges
: Citrus!
tomatoes
: There&apos;s no &quot;e&quot; in tomatoe.&lt;/p&gt;
&lt;p&gt;Again, text is indented 4 spaces. (Put a blank line between each
term/definition pair to spread things out more.)&lt;/p&gt;
&lt;p&gt;Here&apos;s a &quot;line block&quot;:&lt;/p&gt;
&lt;p&gt;| Line one
| Line too
| Line tree&lt;/p&gt;
&lt;p&gt;and images can be specified like so:&lt;/p&gt;
&lt;p&gt;Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:&lt;/p&gt;
&lt;p&gt;$$I = \int \rho R^{2} dV$$&lt;/p&gt;
&lt;p&gt;$$
\begin{equation*}
\pi
=3.1415926535
;8979323846;2643383279;5028841971;6939937510;5820974944
;5923078164;0628620899;8628034825;3421170679;\ldots
\end{equation*}
$$&lt;/p&gt;
&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;
</content:encoded></item><item><title>Include Video in the Posts</title><link>https://echo-carrie.github.io/posts/video/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/video/</guid><description>This post demonstrates how to include embedded video in a blog post.</description><pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Just copy the embed code from YouTube or other platforms, and paste it in the markdown file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Include Video in the Post
published: 2023-10-19
// ...
---

&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;h2&gt;Bilibili&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1fK4y1s7Qf&amp;amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content:encoded></item></channel></rss>