<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>echo-carrie</title><description>Blog</description><link>https://echo-carrie.github.io/</link><language>zh_CN</language><item><title>Recommender System</title><link>https://echo-carrie.github.io/posts/recommender-system/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/recommender-system/</guid><description>推荐系统入门&amp;ABtest</description><pubDate>Wed, 09 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;推荐系统入门&lt;/h1&gt;
&lt;h2&gt;推荐系统的必要条件&lt;/h2&gt;
&lt;p&gt;​		做推荐系统需要在业务发展现阶段满足三个必要条件，分别是&lt;strong&gt;有货、有人、有场景&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有货&lt;/strong&gt;：保证&lt;strong&gt;业务发展的现阶段供应链齐全，有足够的商品用于推荐&lt;/strong&gt;，可以让用户“逛”起来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有人&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户量要足够多，足够多的用户会带来足够多的用户行为&lt;/strong&gt;，这些是推荐系统的数据和特征的来源。&lt;/li&gt;
&lt;li&gt;有合适的人才来做这件事儿，最完整的配比是**“算法工程师 + 研发工程师 + 数据工程师 + 产品经理”**，当然 &lt;strong&gt;MVP 的推荐系统通过研发工程师 + 产品经理&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有场景&lt;/strong&gt;：&lt;strong&gt;做推荐系统要立足于业务的发展阶段&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;业务在发展初期阶段正忙于系统功能的建设，所以推荐系统这类偏前端流量玩法的工作的价值凸显不出来。&lt;/li&gt;
&lt;li&gt;有&lt;strong&gt;合适的产品场景以及完善的系统，才能“接住”这样的需求&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		因此，&lt;strong&gt;在推荐系统的建设上，你要考虑到人、货、场这三个因素&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		拿我们部门举个例子，当&lt;strong&gt;我们要做推荐的系统时候，我们正处在用户高速增长的阶段，各条业务线产品的基础建设、供应链，以及用户体验都有了一定的积累和沉淀，业务发展战略的工作重心也逐渐从后台的基础建设，转移到了前台的用户流量运营&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有人：用户高速增长阶段、团队完善。&lt;/li&gt;
&lt;li&gt;有货：构建了各条业务线产品的基础建设、供应链。&lt;/li&gt;
&lt;li&gt;有场景：
&lt;ul&gt;
&lt;li&gt;业务发展由后台建设转至前台的用户流量经营。&lt;/li&gt;
&lt;li&gt;现在需要提高长尾商品的曝光度、挖掘用户潜在意图、优化用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		&lt;strong&gt;为了提高长尾商品的曝光率、挖掘用户潜在意图、优化用户体验，以达到提高购买转化率的目的&lt;/strong&gt;，我才临时组建了推荐系统团队，去做一个基于旅行商品的个性化推荐系统。&lt;/p&gt;
&lt;h2&gt;推荐系统的三个步骤&lt;/h2&gt;
&lt;p&gt;​		推荐系统将一个物品/内容推荐给用户主要会经历三个步骤，即商品召回、商品排序和综合调整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/cb18f9b4154d429ba2b5b90d84db4828.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;召回&lt;/h3&gt;
&lt;p&gt;​		举个例子，如果你是一个女生，你在浏览京东商城的时候，可能会关注一些美妆品牌，收藏一些奢饰品包包或者加购一些零食。这一系列的行为反映了你对某些商品的偏好，此时推荐系统就会根据你的操作行为大致勾勒出你的兴趣偏好。&lt;/p&gt;
&lt;p&gt;​		与此同时，推荐系统发现京东网站上还有很多与你兴趣偏好相似的用户，你们有着类似的喜好，她们喜欢的东西大概率你也会觉得不错。因此，推荐系统就会统计你们在京东商城的操作行为（如浏览、收藏、加购、下单），计算出你们之间的相似度，这样推荐系统就筛选出那些同类用户喜欢而你还没有接触过的商品。&lt;strong&gt;像这样推荐系统根据算法帮你初步筛选出你可能喜欢的商品的过程，叫做推荐系统的召回，你也可以把召回简单理解为商品的粗筛过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		在召回的阶段中，有很多成熟的策略和算法供我们选择，比如基于用户行为的协同过滤召回算法，基于内容标签的召回算法，以及当今很火的基于深度学习的召回算法。但是，不管你选择哪一种召回算法，它们最终返回的结果都是一个商品列表。&lt;/p&gt;
&lt;p&gt;​		一般来说，采用一个召回算法，我们&lt;strong&gt;只能得到一个商品列表&lt;/strong&gt;，这对于一个个性化的推荐系统来说远远不够。因此在实际工作中，&lt;strong&gt;为了提高召回商品的覆盖率和多样性，我们往往会应用多种召回算法进行商品召回，这也叫做多路召回&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		那么问题就来了，采用多路召回得到多个商品列表之后，我们该怎么对这些列表进行排序呢？&lt;/p&gt;
&lt;h3&gt;排序&lt;/h3&gt;
&lt;p&gt;​		这时就进入了推荐系统的&lt;strong&gt;排序阶段&lt;/strong&gt;。具体来说就是&lt;strong&gt;将召回阶段获取到的多个商品列表，结合多种因素进行考量（比如业务指标CTR、CVR、GMV、UV、已经商品的多样性、覆盖率等）融合成一个列表&lt;/strong&gt;，并&lt;strong&gt;精细筛选出Top100甚至更少的商品列表&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;调整&lt;/h3&gt;
&lt;p&gt;​		不过，商品列表在被展示给用户之前，还需要经过一道&lt;strong&gt;调整的工序。其实就是对排序后的商品列表做运营策略上的调整&lt;/strong&gt;，如广告坑位填充、特定商品置顶，这部分就和实际业务策略息息相关了。&lt;/p&gt;
&lt;p&gt;​		在经过这三个步骤之后，推荐系统才能将最终的商品列表展示到用户页面。&lt;/p&gt;
&lt;h2&gt;产品经理的工作职责&lt;/h2&gt;
&lt;h3&gt;背景&lt;/h3&gt;
&lt;p&gt;​		假设，你正在一家电商公司工作，部门领导让你牵头做一个推荐系统，它会应用在你们公司App“猜你喜欢”的页面中。&lt;/p&gt;
&lt;p&gt;​		当你拿到任务的第一时间，应该是明确推荐系统的整体架构与职责分工，这其实和大多数的产品设计初期并无二致。&lt;/p&gt;
&lt;p&gt;​		作为推荐系统的产品经理，当然不需要像算法工程师一样死磕算法模型，也不需要像研发工程师一样专注代码开发，那我们的工作职责到底是什么呢？&lt;/p&gt;
&lt;h3&gt;召回阶段&lt;/h3&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		召回：推荐系统根据算法帮你初步筛选出你可能喜欢的商品的过程，叫做推荐系统的召回，你也可以把召回简单理解为商品的粗筛过程。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;在召回阶段，产品经理要对召回策略进行评估&lt;/strong&gt;。实际工作中不需要产品经理设计召回策略，但你要了解常用召回策略的优缺点，以便根据实际场景做出合理的选择。&lt;/p&gt;
&lt;p&gt;​		我们知道，召回就是对商品进行初步筛选，过滤出用户可能感兴趣的商品列表。之所以说“可能”是因为在召回这一步，为了提高覆盖率，我们通常会使用多个算法进行召回。在这些召回算法中，产品经理需要了解的召回算法有&lt;strong&gt;基于用户行为的协同过滤召回算法&lt;/strong&gt;和&lt;strong&gt;基于内容标签的召回算法&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;基于用户行为的协同过滤召回算法&lt;/h4&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;协同过滤的基本思想很简单，就是基于用户对商品的偏好找到和用户最相近的一批人，然后把这批人喜欢的商品推荐给当前用户&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		比如说，现在有三个用户，分别是用户 A、用户 B 和用户 C，以及四个商品，分别是商品 A、商品 B、商品 C 和商品 D。我们对三个用户的行为进行分析，发现用户A喜欢商品 A 和 C，用户 B 喜欢商品 B，用户 C 喜欢商品 A、C 和 D，我们把这些信息整理到一个表格中。&lt;/p&gt;
&lt;p&gt;​		通过这个表格，我们能很直观地看到，用户 A 和用户 C 都喜欢商品 A 和商品 C。由此，我们可以猜测用户 A 和用户 C 的兴趣偏好可能相同。这个时候，我们就可以把商品 D 推荐给用户A。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/24eb5fe63c7445c494194d56f5098764.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		协同过滤策略的基本原理，&lt;strong&gt;在算法的实现上就是将用户对商品的操作行为，如浏览、收藏、加购和下单，变成向量形式的数学表达方式&lt;/strong&gt;，然后通过&lt;strong&gt;相似度算法&lt;/strong&gt;，常见地有通过&lt;strong&gt;余弦相似度算法&lt;/strong&gt;计算这些行为的相似度，最后得出一个相似度分数的排序。这样，就能找到和你行为最相近的其他用户，并过滤出他们喜欢而你没有接触过的商品。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;通过相似度计算，我们可以得到和某个用户最相似的其他用户的一个列表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		举一反三，我们就能得出&lt;strong&gt;和某个商品最相似的一个商品列表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/e49bf0d762784f93a2d1e8694b1e7e60.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;协同过滤算法需要有用户行为数据作为基础，才能根据行为计算用户之间的相似度以及商品之间的相似度，在系统冷启动阶段很难实施，所以在冷启动阶段，我们还需要考虑其他的召回策略&lt;/strong&gt;，比如我接下来要说的基于内容标签的召回策略。&lt;/p&gt;
&lt;h4&gt;基于内容标签的召回策略&lt;/h4&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;基于内容标签的召回算法（Content-based Recommendations，CB）是最早被使用的召回算法&lt;/strong&gt;，在现在的工业界中仍然被广泛使用，因为它的效果很好。&lt;/p&gt;
&lt;p&gt;​		它的基本思想就是给用户和商品分别打标签，然后召回同类标签的商品，最终把它们推荐给用户。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		比如说，现在有两个用户，分别是用户 A 和用户 B，还有四部电影，分别是《钢铁侠》《蜘蛛侠》《蝙蝠侠》和《神奇女侠》。我们给每部电影打上标签，《钢铁侠》是“科幻片”和“漫威”，《蜘蛛侠》是“科幻”和“漫威”，《蝙蝠侠》是“科幻片”和“DC”，《神奇女侠》是“科幻片”和“DC”。&lt;/p&gt;
&lt;p&gt;​		为了方便你理解，我简化了标签的数量，&lt;strong&gt;在实际工作中，我们可能会给每一个电影打上几十甚至是几百个标签。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;给电影打完标签之后，我们还要给每一个用户打上兴趣偏好标签&lt;/strong&gt;，如用户 A 刚看完《钢铁侠》，就给用户 A 打上“科幻片”和“漫威”的标签，用户 B 看过《蝙蝠侠》，就给用户 B 打上“科幻片”和“DC”的标签，我们把这些信息都整理到了下面的表格中，你可以看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/86e67276dda04cfe864c5c3fc2c9817e.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		通过这个表格，我们能很直观地看到，用户 A的偏好标签为“科幻片”“漫威”，正好和《钢铁侠》《蜘蛛侠》的标签相同。很显然，我们应该把《蜘蛛侠》推荐给用户 A，再把《神奇女侠》推荐给用户 B。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;这就是内容标签召回算法的基本原理，具体的算法实现就是将用户的偏好标签和电影的标签，变成向量形式的数学表达方式，然后通过相似度算法，常见地会通过余弦相似度算法，去计算这些行为的相似度，最后得出一个相似度分数的排序&lt;/strong&gt;。这样，我们就能找到和用户偏好最相似的TopN部电影了。&lt;/p&gt;
&lt;h4&gt;优缺点&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/a6beb11b6211410c9d2045ab22ee64f9.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;排序阶段&lt;/h3&gt;
&lt;p&gt;​		&lt;strong&gt;在推荐系统的排序环节中，产品经理要以目标为导向来确定排序的目标&lt;/strong&gt;。如果产品是以提高 CTR 为目标，那么推荐系统可以使用 **CTR（Click-Through Rate，点击率）**预估的方式来构建排序模型，&lt;strong&gt;根据用户历史的浏览记录，来预测用户的点击行为&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		但在电商场景中，还存在 &lt;strong&gt;CVR、GMV、UV&lt;/strong&gt; 等多个核心指标，所以产品规则并不是一个指标所能决定的，要根据业务目标来优化排序模型。也就是说，如果公司追求的是 GMV，那么单纯地提升 CTR ，在一定程度上只能代表着用户体验的提升。&lt;/p&gt;
&lt;p&gt;​		当然，你可以把这些指标的诉求抛给算法工程师，让算法同学给出 CTR 或 CVR 预估的方案。这个时候，你需要关注的就是如何评估算法同学交付的算法模型的性能和稳定性。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;由于冷启动阶段用户个性化和行为化特征过少，如果我们把评估的重心定位在“针对用户的精准化预测”就是不合理的。&lt;strong&gt;这个时候，你可以让算法工程师给出冷启动阶段的排序模型，如果没有更优的方案，你也可以给出&lt;/strong&gt;一套打分策略来进行商品列表的排序融合&lt;/strong&gt;，这也是面向策略的产品经理必须要具备的能力。&lt;/p&gt;
&lt;p&gt;​		我们使用了3种召回策略，分别得到了3个商品列表，以及每个商品所在列表中的评分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/81c4286ba6b84e309e0758fe56621b05.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;有3种排序策略可以供我们参考，它们分别是&lt;strong&gt;加权平均法、CTR 动态加权平均法和CTR 预估加权平均法。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;加权平均法&lt;/h4&gt;
&lt;p&gt;​		加权平均法是统计领域内常用来综合指标的基本方法，它的计算方法最简单。以商品A为例，我们根据专家经验，预先定义三种召回策略的权重：0.4、0.3、0.2，然后结合上面的评分列表，让商品的权重分别乘上每一种策略的权重，再除以策略权重之和，就能得到商品的评分。那么，商品A的评分就是：(\left(0.9^{\star} 0.4+0^{\star} 0.3+0^{\star} 0.2\right) /(0.4+0.3+0.2)=0.4)。同理，我们能够得到其他商品的评分，按照字母顺序分别是0.62、0.66、0.29、0.09。&lt;/p&gt;
&lt;p&gt;​		最终，根据分数排序，我们可以得到：C&amp;gt;B&amp;gt;A&amp;gt;D&amp;gt;E。这种排序策略的特点简单明确，每种排序策略可以根据业务规则预设权重。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;CTR 动态加权平均法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​		使用这种方法，&lt;strong&gt;我们需要每天离线计算三种召回策略的 CTR，把它们作为每天更新的动态权重，最终根据动态的权重做加权平均&lt;/strong&gt;。CTR 动态加权平均法可以看成是&lt;strong&gt;加权平均法的一种改进，每种召回策略的 CTR =每种召回源的点击数 / 每种召回源的展现数&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;CTR 预估加权平均法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​		&lt;strong&gt;通过 CTR 预估三种召回策略的权重，然后做加权平均&lt;/strong&gt;。因为需要用到前两种方法，所以它的实现方法是最复杂的。&lt;/p&gt;
&lt;p&gt;​		作为一个完整的推荐系统，它还要包括最后的调整的步骤，产品经理要与业务和运营人员充分沟通，以及结合实际的业务场景，把如广告商品、流量坑位、特殊扶持等相关的运营策略结合到推荐系统中。&lt;/p&gt;
&lt;p&gt;​		因此，产品经理还有一个非常重要的工作职责，那就是评估一个推荐系统的好坏。&lt;/p&gt;
&lt;h3&gt;推荐系统的评估&lt;/h3&gt;
&lt;p&gt;​		评估一个推荐系统有很多指标，比如准确率、召回率、覆盖率、多样性、体验度等等。这些指标看起来多，但是常用的有4个。&lt;/p&gt;
&lt;p&gt;​		首先是&lt;strong&gt;准确率&lt;/strong&gt;，它&lt;strong&gt;用来判断模型预测的商品列表有多少是用户感兴趣的&lt;/strong&gt;。举个例子，我们认为用户点击该商品，就表示用户对其感兴趣。通过推荐系统，我们给用户推荐了10个商品，其中用户点击了5个商品，那么，推荐系统的准确率就是5/10=50%&lt;/p&gt;
&lt;p&gt;​		其次是&lt;strong&gt;召回率&lt;/strong&gt;，即&lt;strong&gt;用户感兴趣的商品有多少是模型预测出来的商品&lt;/strong&gt;。举个例子，用户一共点击 了10个商品，其中有8个是通过推荐系统推送给用户的，那么推荐系统的召回率就是8/10=80%。&lt;/p&gt;
&lt;p&gt;​		然后是&lt;strong&gt;覆盖率&lt;/strong&gt;，是说&lt;strong&gt;推荐系统可以覆盖到多少用户&lt;/strong&gt;，或者说&lt;strong&gt;推荐系统可以给多少用户进行商品推荐&lt;/strong&gt;。假设我们有1000万的旅行用户，推荐系统可以为其中900万用户进行推荐，那么覆盖率就是900/1000=90%&lt;/p&gt;
&lt;p&gt;​		最后是&lt;strong&gt;多样性&lt;/strong&gt;，&lt;strong&gt;推荐系统为用户推荐商品的类型应该保持多样性&lt;/strong&gt;。这怎么理解呢？ 我们会发现，如果我们在某电商平台购买了薯片，这个电商平台后续就会一直给我们推荐薯片或者薯条产品。**从短期来看，这种推荐结果有助于提高用户转化，但从长期来看，它牺牲了用户的整体体验。**因此，我们在保证短期收益的基础上也要考虑长期的用户体验。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;产品经理还需要根据业务现状提出预期收益，大多数的推荐系统衡量指标都是CTR&lt;/strong&gt;，但是我不建议你直接使用这个指标来定义预期收益。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;你可以从业务的建设阶段来设定收益指标，我在下面给出了业务发展的三个阶段，提出推荐系统的预期收益的一般方法&lt;/strong&gt;，你可以作为参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对于业务建设阶段&lt;/strong&gt;，可以从&lt;strong&gt;流量的增长&lt;/strong&gt;入手，比如以DAU、MAU为核心指标衡量业务的增长；
&lt;ul&gt;
&lt;li&gt;DAU：&lt;strong&gt;日活跃用户数&lt;/strong&gt;；单日使用服务的独立用户数（去重）&lt;/li&gt;
&lt;li&gt;MAU：&lt;strong&gt;月活跃用户数&lt;/strong&gt;；单月使用服务的独立用户数（去重）
&lt;ul&gt;
&lt;li&gt;粘性指数 = DAU/MAU（健康值&amp;gt;0.3）&lt;/li&gt;
&lt;li&gt;流失率 = 1 - (当月MAU ∩ 次月MAU)/当月MAU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需定义&quot;活跃&quot;标准（如停留&amp;gt;30秒/触发点击）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于业务发展阶段&lt;/strong&gt;，可以从&lt;strong&gt;流量的转化&lt;/strong&gt;入手，比如以CTR、CVR为核心指标衡量流量的转化率；
&lt;ul&gt;
&lt;li&gt;CTR：点击量/曝光量 ×100%&lt;/li&gt;
&lt;li&gt;CVR：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转化率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;漏斗模型&lt;/strong&gt;：曝光→点击→详情页停留→转化（各环节流失分析）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于业务成熟阶段&lt;/strong&gt;，可以从GMV入手，比如以UV价值、RPM等为核心指标衡量用户价值。
&lt;ul&gt;
&lt;li&gt;GMV**（Gross Merchandise Volume）**：&lt;strong&gt;成交总额&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;含未支付订单，通常需配合&lt;strong&gt;支付成功率&lt;/strong&gt;使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UV（每用户价值）**：GMV/独立访客数&lt;/li&gt;
&lt;li&gt;RPM：&lt;strong&gt;千次展示收益&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实战项目&lt;/h2&gt;
&lt;p&gt;​		假设，你是一家电商平台公司的产品经理，公司经过一年多的供应链打造和用户运营的投入，业务已经发展到了一个高速增长的阶段。&lt;/p&gt;
&lt;p&gt;​		但问题也随之暴露了出来：之前产品首页是人工配置选品的，每个用户在浏览 App 的时候，看到的都是千篇一律的商品。这种无法体现用户对于商品兴趣的偏好情况，不但削减了用户的体验，也没法让供应商满意，因为随着接入的供应链多了起来，供应商也希望自己的商品能有更多的曝光。&lt;/p&gt;
&lt;p&gt;​		为了尽快解决这个问题，老板决定让你牵头打造一个个性化电商MVP推荐系统 （Minimum Viable Product，最小可行性产品）。已知，推荐系统的建设可以分为 4 个重要的阶段，分别是&lt;strong&gt;需求定义、数据准备、技术实现和评价标准&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;需求定义&lt;/h3&gt;
&lt;p&gt;​		&lt;strong&gt;在需求定义环节，我们最重要的工作就是产出需求文档&lt;/strong&gt;。具体来说，产品经理需要做的有3件事，分别是&lt;strong&gt;交代需求背景、描述交互逻辑，以及明确预期目标&lt;/strong&gt;。下面，我们一一来说。&lt;/p&gt;
&lt;h4&gt;构建需求背景&lt;/h4&gt;
&lt;p&gt;​		在需求背景部分，&lt;strong&gt;我们要重点交代清楚为什么要建设推荐系统，让协同部门能够理解背景，和我们对齐这个项目的价值&lt;/strong&gt;。一般来说，我们会和业务方进行频繁沟通，发掘他们最核心的诉求。&lt;/p&gt;
&lt;p&gt;​		那么，今天这个例子中的核心诉求其实就是要&lt;strong&gt;展现所有用户对商品的偏好，避免“千人一面”。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;描述交互逻辑&lt;/h4&gt;
&lt;p&gt;​		接下来，我们要&lt;strong&gt;对推荐系统的交互逻辑进行描述，主要包括描述用户的动线流程、模型诉求和产品功能上的逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		因为我们这次构建的是&lt;strong&gt;MVP推荐系统&lt;/strong&gt;，所以不需要通过算法模型来实现所有的推荐逻辑，而是分成两部分，&lt;strong&gt;一部分通过算法进行推荐，另一部分通过运营系统配置进行推荐。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首先，当用户进入商品主页的时候，推荐系统会检查是否已存在当前用户的画像信息。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如果存在就&lt;strong&gt;获取用户的商品偏好标签，执行商品召回的算法逻辑&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果不存在就把&lt;strong&gt;运营系统配置的商品数据&lt;/strong&gt;展示给用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**然后进入商品召回模块，由于只需要打造一个 MVP 的推荐系统，因此我们只设计一种召回策略就可以了，如“基于协同过滤的召回策略”。**这样，推荐系统就不涉及多路召回融合的问题，在产品需求中也就不用涉及“排序阶段”的需求了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所以我们直接进入“调整阶段”。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;这一阶段，推荐系统需要&lt;strong&gt;通过规则，将算法召回的商品列表和运营系统配置的商品列表进行融合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;常见的运营配置有，商品在第一周上新期内需要在展示列表中置顶等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最终，&lt;strong&gt;推荐系统会将融合后的商品列表展示给用户&lt;/strong&gt;。完整的交互逻辑如下，你可以看看。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/236dc9ad72ce4262bdbc08f335799de9.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;制定预期目标&lt;/h4&gt;
&lt;p&gt;​		&lt;strong&gt;最后就是制定电商推荐系统的预期目标了，这个目标是根据业务的实际情况而设定的。有了目标就要有衡量目标的指标，&lt;/strong&gt; 虽然大多数推荐系统的衡量指标都是 CTR，但我建议你从业务的建设阶段来设定衡量指标，就像我上节课讲的那样。这里，因为我们的业务发展属于成熟阶段，所以设定的衡量指标为 CVR。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/493cd1e0772e4f7cb31d930f9a0f1577.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		总的来说，产品经理要能够清晰地设计需求，&lt;strong&gt;需求定义要明确需求背景、描述交互逻辑，以及制定预期目标&lt;/strong&gt;，那么如何做才是清晰的设计需求呢？我为你准备了一份推荐系统需求模板，你可以作为参考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/02c26da0d8944c77a5456fefd75c72bd.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;数据准备&lt;/h3&gt;
&lt;p&gt;​		&lt;strong&gt;在推荐系统中，如果用户在某个环境下对某个商品做了某种操作，我们就认为这个操作表达了用户对这个商品的兴趣偏好。&lt;strong&gt;推荐系统要做的就是&lt;/strong&gt;挖掘这个偏好&lt;/strong&gt;，然后给这个用户推荐相同偏好的其他商品。&lt;/p&gt;
&lt;p&gt;​		**这些数据的来源一般包含三类：业务数据、埋点日志和外部数据。**并且每个来源的数据都有着详细的数据分类，这些数据会应用于机器学习的离线预估模型训练和实时模型预估计算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/187f9f6336754359b4bf9996c272d9ea.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;像是“用户数据”、“商品数据”和“上下文环境数据”本来就是存在于数据库中&lt;/strong&gt;的，产品经理只需告诉算法同学&lt;strong&gt;数据源在哪里即可&lt;/strong&gt;，后续算法同学会自行抽数。&lt;/p&gt;
&lt;p&gt;​		我们唯一提前要进行&lt;strong&gt;收集的就是用户的前端埋点日志&lt;/strong&gt;，如果系统之前没有做过埋点，那么势必会影响推荐系统的准确性。&lt;/p&gt;
&lt;p&gt;!!!warning&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在搭建推荐系统之前，我们要通过埋点尽可能地收集用户的前端行为日志。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;​		我们都需要埋哪些数据，把它们埋在哪些页面呢？这需要产品经理根据自己对业务的理解，整理出一套页面埋点文档，为算法同学提供数据支持。&lt;/p&gt;
&lt;p&gt;​		虽然根据业务的不同，具体的埋点策略会有差别，但我还是根据经验梳理出了一些用户行为与商品信息的数据埋点字段。&lt;/p&gt;
&lt;p&gt;​		首先是&lt;strong&gt;用户行为数据埋点字段&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/52e9f31193a84cb49b8cb5e5bb17ee12.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;然后是&lt;strong&gt;商品信息数据埋点字段&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/8b6daa94eeff4301a73f8774a81b40a0.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		有了数据之后，算法同学就可以根据数据建立特征工程，然后我们就可以进入到模型构建的环节了。&lt;/p&gt;
&lt;h3&gt;技术实现&lt;/h3&gt;
&lt;p&gt;​		从项目管控上来看，在推荐系统的项目建设过程中会涉及两波技术团队，分别是算法团队和工程团队，他们是并行进行的。&lt;/p&gt;
&lt;p&gt;​		 算法工程师在构建模型的同时，研发工程师也在进行系统功能的开发，最终系统工程与算法模型会通过 API 接口进行通信，这需要双方提前约定好接口协议。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;因此作为产品经理，我们除了要关注算法同学的模型构建，同时也要关注推荐系统工程的整体设计。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		对于系统工程的整体设计，产品经理要&lt;strong&gt;关注推荐系统进行一次完整推荐会涉及哪些系统模块，它们和算法模型是怎么交互的，数据流向什么样，产品的关键逻辑是在哪个模块中实现的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面，我们就来看下工程系统和算法模型的&lt;strong&gt;数据架构图，图中的箭头都是数据流向，方向是从左往右。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/746ee2bfd4224b378c7ae95a8deee39c.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		从架构图中，我们可以看到&lt;strong&gt;工程系统在进行推荐的时候，先后经过3个模块分别是召回模块、排序模块和调整模块，每个模块都调用了算法模型对应训练好的机器模型提供的服务。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;召回模块&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实时召回：&lt;/strong&gt;(用于用户召回信息计算；秒级)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时召回模型&lt;strong&gt;根据历史的用户行为数据，集合当前用户实时的浏览行为，计算并更新用户召回商品的列表信息。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时召回的计算是秒级运算&lt;/strong&gt;，比如你在京东 App 上&lt;strong&gt;搜索华为手机后，Feed 流就会推荐给你很多其他品牌手机。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;离线召回：&lt;/strong&gt;（用于用户偏好信息、热度榜单计算；定时脚本；存储到数据库）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每天通过定时脚本触发模型的计算&lt;/strong&gt;，如全量&lt;strong&gt;更新用户的偏好信息，计算热度榜单&lt;/strong&gt;等等不要求实时性的数据，&lt;strong&gt;这些数据会被存储到数据库中。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当工程系统调用某个用户的召回商品列表的时候，推荐系统&lt;strong&gt;直接查询数据库就能得到，不需要再计算一遍，从而提高了系统性能。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;排序模块&lt;/h4&gt;
&lt;p&gt;​		推荐系统会直接调用模型提供的排序服务。这&lt;/p&gt;
&lt;p&gt;​		里我们需要注意的是，在系统工程中排序服务可以&lt;strong&gt;通过规则（如加权平均、CTR 动态加权平均）的方式&lt;/strong&gt;实现，也可以&lt;strong&gt;基于机器学习模型的 CTR 预估方式&lt;/strong&gt;实现。&lt;/p&gt;
&lt;h4&gt;调整模块&lt;/h4&gt;
&lt;p&gt;​		调整模块是&lt;strong&gt;对排好序的商品列表进行运营策略上的调整&lt;/strong&gt;，它&lt;strong&gt;和业务规则强相关。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		最后，推荐系统会把最终的商品列表返回给产品客户端。&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;p&gt;​		在实际情况下，技术同学还需要考虑很多非功能性的需求，比如系统响应时长、系统稳定性等等，但产品经理的重点还是要放在“召回”、“排序”和“调整”上面。&lt;/p&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;h3&gt;评价标准&lt;/h3&gt;
&lt;p&gt;产品经理可以通过 AB 测试的方式进行评估，推荐系统要想做 AB 测试，有三点我们必须要注意：&lt;/p&gt;
&lt;p&gt;!!!tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，&lt;strong&gt;推荐系统的工程代码要提前准备两套实现方案&lt;/strong&gt;，一套千人一面，一套千人千面；&lt;/li&gt;
&lt;li&gt;第二，&lt;strong&gt;推荐系统要能进行 AB 测试的切量配置&lt;/strong&gt;，也就是多少流量流向改造前的系统，多少流量流向改造后的系统，当然这个功能要让系统工程研发同学给予支持；&lt;/li&gt;
&lt;li&gt;第三，为了查看 AB 测试的效果，对比 &lt;strong&gt;CTR、UCTR、转化率&lt;/strong&gt;等指标，我们要生成最终的效果统计报表。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;但在 AB 测试切量的时候，我们要注意打上流量标志位，标识是哪种方案。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这样在统计报表的时候，我们才能分别计算指标，进而比较推荐系统在原有系统之上做到了多少提升。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/c8feb67214604f518ce4bedb80a8708d.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;实际的难点在于产品经理对指标的分析过程，以及最终给出的迭代计划，下面我们就来详细讲讲。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		因为我们的业务比较成熟，并且业务方的 &lt;strong&gt;PKI 是 GMV（Gross Merchandise Volume，成交总额）&lt;/strong&gt;，所以我们选用了 CVR 作为推荐系统的衡量标准。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;CVR的计算方式是转化数/点击数，也就是最终点击商品并且购买的转化率&lt;/strong&gt;，它通常在广告领域用的比较多。&lt;/p&gt;
&lt;p&gt;​		下表就是推荐指标的汇总，我们按照 0~3、3~6、6~9 对商品进行了分段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/9510c289cd1a42698be1649743654ee0.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		“传统方式”的 0~3 分的长尾商品没有曝光，这是因为我们之前一味地追求 GMV，所以运营同学对于低评分的长尾商品不做展示，把所有资源都倾向于头部品牌商的商品，让中小商家在平台上无法生存。&lt;strong&gt;因此，从长远的角度来看，一味的追求GMV并不健康。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		在对于推荐系统的迭代计划中，产品经理&lt;strong&gt;至少还要对不同人群、不同位置设置不同的评价指标&lt;/strong&gt;，最后&lt;strong&gt;再综合所有的评估指标来优化整体数据指标。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;整理&lt;/h3&gt;
&lt;p&gt;产品经理需要关注的内容可以从三方面概括，分别是能力、技术和岗位。&lt;/p&gt;
&lt;h4&gt;能力&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;能力可以总结为三点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，我们要能够清晰地设计需求：需求定义要明确需求背景、功能描述，以及预期的收益。&lt;/li&gt;
&lt;li&gt;第二，我们要能够理解数据：在推荐系统的数据准备阶段，产品经理要关注用户前端的埋点日志，提前设计埋点，以及给研发工程师提需求收集行为日志。&lt;/li&gt;
&lt;li&gt;第三，我们要能够对通过 AB 测试来评估推荐系统的效果，然后做出分析再给予持续的迭代计划。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;技术&lt;/h4&gt;
&lt;p&gt;​		&lt;strong&gt;我们要重点掌握推荐系统中召回和排序模块的策略。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		这不仅包括我们这节课说的，工程系统进行一次完整推荐的时候各个系统模块的&lt;strong&gt;工作原理、交互逻辑&lt;/strong&gt;，还有我们上节课讲的常用&lt;strong&gt;协同过滤算法和相似度算法&lt;/strong&gt;的原理。&lt;/p&gt;
&lt;h4&gt;岗位&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/e293039a89df44b18c3a4c58a4e86057.jpg&quot; alt=&quot;img&quot; style=&quot;zoom: 67%;&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/%e6%88%90%e4%b8%baAI%e4%ba%a7%e5%93%81%e7%bb%8f%e7%90%86/assets/410efd9b2e1d46868f8c691cad655355.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;冷启动&lt;/h1&gt;
&lt;p&gt;冷启动是指&lt;strong&gt;系统（如推荐系统、广告系统、用户增长等）在缺乏足够历史数据时，无法有效个性化推荐或决策的问题&lt;/strong&gt;。在推荐系统中，冷启动主要分为三类：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;用户冷启动&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;新用户无历史行为数据，难以个性化推荐&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;OPPO应用商店的新注册用户&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;物品（内容）冷启动&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;新上架的商品/内容无曝光或互动数据&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;应用商店新发布的游戏&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;系统冷启动&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;全新平台或业务，无任何用户或内容数据&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;OPPO新推出的车机推荐系统&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户冷启动&lt;/strong&gt;：无法准确预测兴趣，可能导致推荐不相关，&lt;strong&gt;影响留存率。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物品冷启动&lt;/strong&gt;：新内容曝光少，难以进入推荐池，&lt;strong&gt;导致“马太效应”&lt;/strong&gt;（热门更热，冷门更冷）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统冷启动&lt;/strong&gt;：完全无数据，&lt;strong&gt;需依赖人工规则或外部数据&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;解决方案&lt;/h2&gt;
&lt;p&gt;总的来说主流冷启动策略可分为以下几类：&lt;/p&gt;
&lt;h3&gt;基于规则的冷启动&lt;/h3&gt;
&lt;p&gt;​		由于数据缺乏，个性化推荐引擎无法有效工作，自然可以让系统回退到“前推荐系统”时代，采用基于规则的方法。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;基于规则的冷启动方法更多依赖的是领域专家对业务的洞察。&lt;strong&gt;在制定冷启动规则时，需&lt;/strong&gt;充分了解公司的业务特点，充分利用已有数据&lt;/strong&gt;，才能让冷启动规则合理且高效。&lt;/p&gt;
&lt;h3&gt;丰富冷启动过程中获得的用户和物品特征&lt;/h3&gt;
&lt;p&gt;​		在历史数据特征缺失的情况下，推荐系统仍然可以凭借用户和物品的属性特征完成较粗粒度的推荐。这类属性特征包括以下几类：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;用户的注册信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.第三方DMP（&lt;strong&gt;Data Management Platform,数据管理平台&lt;/strong&gt;）提供的用户信息&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;物品的内容特征&lt;/strong&gt;（元数据）&lt;/p&gt;
&lt;p&gt;4.&lt;strong&gt;引导用户输入&lt;/strong&gt;的冷启动特征&lt;/p&gt;
&lt;h3&gt;“探索和利用机制”&lt;/h3&gt;
&lt;p&gt;​		探索和利用是在**“探索新数据”和“利用旧数据”之间进行平衡，使系统既能利用旧数据（捞鱼），又能高效地探索冷启动物品是否是优质物品（放鱼苗）。**&lt;/p&gt;
&lt;p&gt;​		这里以最经典的探索与&lt;strong&gt;利用方法UCB（Upper Confidence Bound，置信区间上界）为例&lt;/strong&gt;说明探索与利用的原理。&lt;/p&gt;
&lt;p&gt;​		使用UCB方法计算每个物品的得分的公式如下：&lt;/p&gt;
&lt;p&gt;$$UCB(j) = \overline{x_{j}} + \sqrt{\frac{2ln\ n}{n_{j}}}$$&lt;/p&gt;
&lt;p&gt;​		其中$x_{j}$为观测到的第j个物品的平均回报（这里平均回报可以是点击率、转化率、播放率等），$n_{j}$目前为止向用户曝光第$j$个物品的次数，$n$为到目前为止曝光所有物品的次数之和。&lt;/p&gt;
&lt;p&gt;​		通过简单的计算可知，**当物品的平均回报高时，UCB的得分会高；同时，当物品的曝光次数低时，UCB的得分也会高。**也就是说，&lt;strong&gt;使用UCB方法进行推荐，推荐系统会倾向于推荐“效果好”或者“冷启动”的物品。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;AB试验&lt;/h1&gt;
&lt;h2&gt;定义&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;A/B实验，又称为对照实验或随机实验，是一种在实验设计中常用的方法，用于比较两个或多个样本（通常是A和B）之间的差异。&lt;strong&gt;AB测试的&lt;/strong&gt;目的是评估不同变量对特定指标（转化率）的影响&lt;/strong&gt;，并确定哪个变量在给定条件下表现更好。&lt;/p&gt;
&lt;p&gt;​		现实业务使用中，我认为AB test就是&lt;strong&gt;保证2组或多组根据条件限制划分的用户在只有1个变量条件情况下，对分组用户的各项数据指标进行汇总，对比指标变化涨幅来确定试验好坏，并且伴随数据分析去发现问题，解决问题的一个过程&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;​		在AB测试中，&lt;strong&gt;参与者被随机分配到不同的组，每个组展示不同的变量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;统计功效组是对照组，通常是现有产品或设计的标准版本（如A）&lt;/strong&gt;，而&lt;strong&gt;其他组是实验组，展示不同产品或设计的其他版本（如B）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		通过在实验组和对照组之间比较特定指标**（如点击率、转化率、用户满意度等）**，可以评估不同版本之间的差异。&lt;/p&gt;
&lt;h2&gt;应用领域&lt;/h2&gt;
&lt;h3&gt;互联网&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;**内容推荐系统：**流媒体平台可以使用AB实验来优化推荐算法。
&lt;ul&gt;
&lt;li&gt;例如，一个推荐系统可能基于用户的历史观看记录（A组），而另一个则基于社交网络数据（B组）。通过比较两组用户的观看时长和满意度评分，可以确定哪种推荐方法更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**优化店铺网页设计：**在电子商务网站中，AB实验可以测试不同的网页布局、按钮颜色、导航栏设置等。
&lt;ul&gt;
&lt;li&gt;例如，A组使用现有的网页设计，B组使用修改后的版本，通过比较两组用户的购买率和页面停留时间来评估设计改进的有效性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;广告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优化广告图文效果：&lt;strong&gt;AB实验可以用于&lt;/strong&gt;测试不同广告文案、图像或视频的效果。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个版本的广告可能侧重于折扣信息（A组），而另一个版本则侧重于产品质量（B组）。通过比较两个广告版本的点击率和转化率，营销人员可以找到最能吸引目标受众的广告内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**广告播放策略： ** &lt;strong&gt;媒体公司可以测试不同的广告播放频率和时长&lt;/strong&gt;，A组用户可能看到较少的长广告，而B组看到较多的短广告。
&lt;ul&gt;
&lt;li&gt;通过观察用户的离开率和互动率，可以找出最佳的广告播放策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;政府&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;公共政策研究中，AB实验用于评估不同政策措施的效果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		例如，一组城市可能实施新的交通法规（A组），而另一组城市继续使用旧法规（B组）。通过比较两组城市的交通事故率和市民满意度，可以评估新法规的有效性。&lt;/p&gt;
&lt;h1&gt;A/B实验流程&lt;/h1&gt;
&lt;p&gt;1、分析现状，建立假设：分析业务，确定最高优先级的改进点，作出假设，提出优化建议。&lt;/p&gt;
&lt;p&gt;2、设定指标：设置主要指标来衡量版本的优劣；设置辅助指标来评估其他影响。&lt;/p&gt;
&lt;p&gt;3、设计与开发：设计优化版本的原型并完成开发。&lt;/p&gt;
&lt;p&gt;4、确定测试时长：确定测试进行的时长。&lt;/p&gt;
&lt;p&gt;5、确定分流方案：确定每个测试版本的分流比例及其他分流细节。&lt;/p&gt;
&lt;p&gt;6、采集并分析数据：收集实验数据，进行有效性和效果判断。&lt;/p&gt;
&lt;p&gt;7、给出结论：①确定发布新版本；②调整分流比例继续测试；③优化迭代方案重新开发，回到步骤1。&lt;/p&gt;
&lt;h2&gt;注意&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 测试时长：&lt;/strong&gt;  &lt;strong&gt;测试的时长不宜过短&lt;/strong&gt;，否则参与试验的用户几乎都是产品的高频用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 分流（或者说抽样）：&lt;strong&gt;应该保证&lt;/strong&gt;样本的同时性、同质性、唯一性、均匀性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;①同时性：&lt;/strong&gt;  &lt;strong&gt;分流应该是同时的，测试的进行也应该是同时的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;②同质性：&lt;strong&gt;也可以说是相似性，是要求&lt;/strong&gt;分出的用户群，在各维度的特征都相似&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​				可以基于&lt;strong&gt;用户的设备特征&lt;/strong&gt;（例如手机机型、操作系统版本号、手机语言等）和&lt;strong&gt;用户的其他标签&lt;/strong&gt;（例如性别、年龄、新老用户、会员等级等）进行分群，每一个A/B测试试验都可以选定特定的用户群进行试验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思考：如何判断是不是真的同质？&lt;strong&gt;可以采用AAB测试。抽出两份流量进行A版本的测试，进行AA测试，并分别与B版本进行AB测试。通过&lt;/strong&gt;考察A1和A2组是否存在显著性差异&lt;/strong&gt;，就可以确定试验的分流是否同质了。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;③唯一性：&lt;strong&gt;即要求用户&lt;/strong&gt;不被重复计入测试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;④均匀性：&lt;strong&gt;要求&lt;/strong&gt;各组流量是均匀的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​				Hash算法。现在一般由专用的A/B测试工具负责。也有看到一篇文章写了python实现，大体的思路是对用户id添加Salt值，对其散列，并据此算出一个0-1之间的浮点数，同设定好的阈值比大小，从而分组。&lt;/p&gt;
&lt;p&gt;​			有兴趣的可以看看，该作者的思路很清晰： 随机分配里的Why and How。（统计学原理上，我没有找到均匀性这一要求的依据，其实双样本的假设检验并不要求两个样本的数量相等或相近。当然从直观上是可以理解，&lt;strong&gt;希望分出的用户组越相近越好，包括人数的相近。&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. A/B测试只能有两个版本么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;A/B test不是只能A方案和B方案，实际上一个测试可以包含A/B/C/D/E/……多个版本&lt;/strong&gt;，但是要&lt;strong&gt;保证单变量&lt;/strong&gt;，比如按钮的颜色赤/橙/黄/绿/青/蓝/紫，那么这七个方案是可以做A/B测试的。&lt;/p&gt;
&lt;p&gt;​		但如果某方案在旁边新增了另一个按钮，&lt;strong&gt;即便实验结果产生了显著差异，我们也无法判断这种差异的成因究竟是谁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 同一段时间内可以做不同的A/B测试么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		比如一个test抽取总体20%的流量做按钮颜色的实验，另一个test也抽取总体20%的流量做布局样式的实验。是否可行？&lt;/p&gt;
&lt;p&gt;​		我认为是可行的。但要求**多个方案并行测试，同层互斥。**如果从总体里，先后两次随机抽取20%流量，则很有可能会有重叠的用户，&lt;strong&gt;既无法满足控制单变量，又影响了用户的使用体验&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同层指的是在同一流量层中创建实验&lt;/strong&gt;，在此层中创建的实验共享此层中的100%流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;互斥指的是在此层中，一个设备有且只能分配到此层多个实验中的某一个实验&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;AB测试用法&lt;/h1&gt;
&lt;h2&gt;业务中的生效逻辑&lt;/h2&gt;
&lt;p&gt;​		AB试验，既可以做客户端试验，也可以做服务端试验，下面就根据客户端和推荐服务端和AB试验平台的试验流程来讲一下其中的区别和生效逻辑：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.woshipm.com/wp-files/2021/09/zU1HYSpI2CQXAzHQAws5.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;客户端试验&lt;/strong&gt;（左图），主要是说用户请求推荐时，&lt;strong&gt;客户端主动带着用户信息（app版本号、渠道号、新老用户、用户onlyid）去AB试验平台上获取用户的试验配置&lt;/strong&gt;，试验平台会&lt;strong&gt;根据用户的onlyid进行哈希分流（这个下面有讲到）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		然后&lt;strong&gt;将用户分进对应的试验组，客户端会把用户的试验信息存在本地，每次用户打开app时会再去拉取一次配置，然后带着用户配置请求推荐接口&lt;/strong&gt;，推荐会根据用户的试验配置返回对应的推荐列表。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;服务端试验&lt;/strong&gt;（右图），则是将&lt;strong&gt;客户端请求试验平台变成了服务端请求试验平台获取用户试验配置，再返回对应的推荐列表。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端：&lt;strong&gt;不需要再经过服务端获取用户配置就能直接请求AB试验平台，逻辑上相对简单些，但是缺点是&lt;/strong&gt;客户端依赖版本更新，版本迭代较慢，试验全量起来比较慢，不好控制。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端：&lt;/strong&gt; &lt;strong&gt;需要在逻辑上多加一层去请求AB试验平台获取用户配置，但发版较快且不受客户端版本更新限制，试验全量比较好控制。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;业务指标建设&lt;/h2&gt;
&lt;p&gt;​		通常，我们做AB试验的时候，都会根据当下试验新增几个试验指标，当然，所有的试验都会带上大盘指标。根据公司业务和规划的差异，各公司的大盘指标都会存在差异。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;业务指标建设的时候，主要会根据这个试验的初衷来设置&lt;/strong&gt;，比如，我这个试验的目的是想提升点击率，那么，&lt;strong&gt;点击率&lt;/strong&gt;的指标就是我此次试验的核心指标；如果试验是为了提升&lt;strong&gt;转化率&lt;/strong&gt;，那么从开始到结束的每一步转化率指标，就是我们试验的核心指标。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;一般都会关注的大盘指标就是留存&lt;/strong&gt;，留存又分进组留存和活跃留存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电商类产品多关注&lt;strong&gt;点击率、成交率、留存以及GMV&lt;/strong&gt;等指标。&lt;/li&gt;
&lt;li&gt;视频类产品多关注&lt;strong&gt;渗透率（完播率）、转化率&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;资讯类产品多关注&lt;strong&gt;点击率、转化率、留存&lt;/strong&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		并非所有的试验都需要大盘数据增长才是好试验，而一些代码重构，或换系统等试验，多数需要保证大盘指标数据无下降即可。&lt;/p&gt;
&lt;h2&gt;用户进组设置&lt;/h2&gt;
&lt;p&gt;​		试验平台是&lt;strong&gt;怎么将用户分配到某个试验组中的&lt;/strong&gt;？简单来说就是&lt;strong&gt;桶位算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		可以理解为&lt;strong&gt;将用户流量分为了100个桶位&lt;/strong&gt;（现实中会分成1000个桶位或更多），假设我们要开一个10%流量的试验，需要&lt;strong&gt;对用户onlyid进行哈希取余&lt;/strong&gt;，如果余数落在前10个桶位，用户就命中这10%的流量，否则就不命中实验，用户也就不会进这个实验组。&lt;/p&gt;
&lt;h2&gt;试验层流量控制&lt;/h2&gt;
&lt;p&gt;​		AB试验可以单层，也可以多层，通常&lt;strong&gt;根据产品的用户量&lt;/strong&gt;来决定是否采取多层试验**，用户量较大，业务较多时，需要做的试验也越多**，就需要通过多层试验模式去进行AB，实现&lt;strong&gt;流量最大化利用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）单层试验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.woshipm.com/wp-files/2021/09/XmwjfTZRTOH2DDi0QaAp.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		单层试验上，流量100%，每个试验的流量是&lt;strong&gt;互斥&lt;/strong&gt;的。举例，试验1的用户，命中试验1，就不会再进同一个试验层上的试验2或试验3，&lt;strong&gt;在单层试验上，用户只能进一个试验的一个组，即便是对照组流量，也是如此&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		每个试验的流量至少会分成2组，也有多组试验，有试验组和对照组，每个试验中的各试验组的流量分配可以均匀分配，也可以自定义分配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）多试验层——分层流量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.woshipm.com/wp-files/2021/09/wGgQMwUFssge8PmcKUtB.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;多层试验，可以理解是多个单层试验的组合&lt;/strong&gt;，每个试验层就是上面说的单层试验，而试验层与试验层之间的流量是&lt;strong&gt;正交&lt;/strong&gt;的，也就是说，在召回层的试验1和试验2的2个用户，在召回层是互斥的，但在粗排层，很有可能在一个试验中，而在其他层，可能又会中其他的试验，业务越复杂，试验层越多。&lt;/p&gt;
&lt;p&gt;​		当两个试验处于不同层时，需要保证试验内容互不相关，也就是相同的试验配置需要开在一个单层试验层上互斥，否则将会干扰试验数据。通常，用户量大一些的公司，都会采取多试验层，这样试验流量也多，且各试验之间互不干扰。&lt;/p&gt;
&lt;h1&gt;AB test数据控制&lt;/h1&gt;
&lt;h2&gt;原理-假设检验&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9f80526142e214556bef2a19f8e00c9e_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.给出零假设和备择假设：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;零假设和备择假设是参数空间的真子集，且不能相交。&lt;/p&gt;
&lt;p&gt;常把没有把握不能轻易肯定的命题作为备择假设 H1 ，而把没有充分理由不能轻易否定的命题作为零假设 H0 。&lt;/p&gt;
&lt;p&gt;或者说我们将希望通过实验结果推翻的假设记为零假设H0 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.根据备择假设确定检验方向：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;备择假设含≠则为双尾；含&amp;lt;或&amp;gt;则为单尾，含&amp;lt;为左尾，含&amp;gt;为右尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.判断抽样分布类型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要判断抽样分布是否近似正态分布&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.确定检验类型及检验统计量：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在判断用什么检验的时候，首要考虑的条件是&lt;strong&gt;样本量&lt;/strong&gt;，其次是&lt;strong&gt;总体服从的分布&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;样本容量大时（统计学上一般认为n≥30），总体的均值和标准差未知，不要求总体近似服从正态分布。根据中心极限定理，样本容量大，则样本均值的抽样分布服从正态分布，总体标准差可以用样本标准差来估计，可用&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=103244273&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=Z%E6%A3%80%E9%AA%8C&amp;amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQzNTk1ODYsInEiOiJa5qOA6aqMIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MTAzMjQ0MjczLCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.A2b6hOtlK3A_w_cZj4t-elurvOvvV-X4P8HKl0QfrE0&amp;amp;zhida_source=entity&quot;&gt;Z检验&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;当样本容量小于30，且满足总体近似服从正态分布时，如果总体标准差已知，可用Z检验；&lt;/li&gt;
&lt;li&gt;当样本容量小于30，且满足总体近似服从正态分布时，如果总体标准差未知，可以用样本标准差去估计总体标准差，由此可用&lt;a href=&quot;https://zhida.zhihu.com/search?content_id=103244273&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=T%E6%A3%80%E9%AA%8C&amp;amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDQzNTk1ODYsInEiOiJU5qOA6aqMIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MTAzMjQ0MjczLCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.wLUD4HmhDU0kcX6CHMr6nhtGJi6NvtqQCp6Eog7bGVQ&amp;amp;zhida_source=entity&quot;&gt;T检验&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;当样本容量小于30，且不满足总体近似服从正态分布，不能用Z检验和T检验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单地说其实就是，&lt;strong&gt;总体标准差怎么估计&lt;/strong&gt;的问题。检验类型确定了，检验统计量也就确定了。&lt;/p&gt;
&lt;p&gt;（不过现在的很多软件简化了上述步骤，改为，&lt;strong&gt;若总体标准差已知（无论样本大小）都用Z检验&lt;/strong&gt;；&lt;strong&gt;若总体标准差未知，都用T检验&lt;/strong&gt;。&lt;strong&gt;不过当样本量够大的时候，T分布也近似于Z分布了&lt;/strong&gt;，所以最后的结果不会差很多。T分布其实是小样本的Z分布。一个样本的自由度越大，样本方差就越接近总体方差，T分布也就越接近Z分布。因此T分布的形状随自由度的变化而变化，自由度越大，越接近正态分布。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.给定显著性水平α：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;α常取0.1、0.05、0.01，后文会再谈到显著性水平与两类错误。&lt;/p&gt;
</content:encoded></item><item><title>ai-coursev1</title><link>https://echo-carrie.github.io/posts/ai-coursev1/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/ai-coursev1/</guid><description>aicourse</description><pubDate>Tue, 08 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;ai actor studio-for beginner&lt;/h1&gt;
&lt;p&gt;&lt;img alt=&quot;image-20250408173942157&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;1. 课程核心设计思路&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结合AI双师功能&lt;/strong&gt;：利用编程猫的【视频积木】和【分类AI】模块，让学生通过图形化编程控制视频播放，并加入AI互动元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;情境化学习&lt;/strong&gt;：以“小导演”为主题，让学生创作自己的视频互动作品。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分层任务设计&lt;/strong&gt;：从基础操作（播放/暂停）到高级功能（AI标签分类），逐步提升难度。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;&lt;strong&gt;2. 课程分阶段设计（15分钟Demo）&lt;/strong&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;strong&gt;阶段1：情境导入（2分钟）&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互动提问&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;“如果你是一个导演，如何让视频里的角色听从你的指令？”&lt;/li&gt;
&lt;li&gt;引出编程猫的【视频积木】可以像“遥控器”一样控制视频。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;阶段2：基础任务 - 制作视频播放器（5分钟）&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;学生操作&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;使用【视频积木】上传一段本地视频（如卡通短片）。&lt;/li&gt;
&lt;li&gt;拖拽积木实现功能：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;当绿旗被点击 → 播放视频&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;当按下空格键 → 暂停视频&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;当角色碰到边缘 → 停止视频&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI双师支持&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;学生遇到问题时，AI助手弹出提示（如“试试‘停止视频’积木！”）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;阶段3：进阶任务 - AI视频分类互动（5分钟）&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;学生操作&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用【分类AI】模块，训练一个简单的分类器（如区分“动物”和“交通工具”视频片段）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编程逻辑：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当 [视频画面被AI识别为“动物”] → 播放欢呼音效  
当 [视频画面被AI识别为“交通工具”] → 背景变红色  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AI双师支持&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AI自动检测分类模型的准确率，并建议优化数据（如“多上传一些汽车图片试试！”）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;阶段4：创意扩展（3分钟）&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;挑战任务&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;“让你的视频能和观众互动！比如当观众挥手（通过摄像头识别），视频就快进。”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提示&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用【AR积木】或【GameAI】检测动作，结合【视频积木】控制播放速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Tencent Product Law Reading Summary</title><link>https://echo-carrie.github.io/posts/tencent-product-law-reading-summary/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/tencent-product-law-reading-summary/</guid><description>腾讯产品法阅读笔记及总结</description><pubDate>Tue, 01 Apr 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;产品思维主要分为五个，分别是本质思维、相对思维、抽象思维、系统思维以及演化思维。&lt;/p&gt;
&lt;h1&gt;本质思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第一性原理思维&lt;/strong&gt;：抛开&quot;别人怎么做&quot;和&quot;过去怎么做&quot;的参考，直接回归初始问题推导，获得独特视角。&lt;/p&gt;
&lt;p&gt;​	大到城市村落的分布、道路交通、全球航线的设计，小到你身边一 个灯泡、一把牙刷、一块肥皂的设计。所有这些产品，背后都有它的设 计故事。**只有抛开“别人怎么做”“过去怎么做”的参考，直接回归初始问题去进行推导，才有可能获得与众不同的视角。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连环追问法&lt;/strong&gt;是实践第一性原理的最佳方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过对问题的连环追问，我们能发现表面问题背后的真正问题到底是什么。&lt;/li&gt;
&lt;li&gt;通过对人的连环追问，我们能弄清楚人们的真正需要是什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;回顾并深入理解这些思路和实践经验就是产品设计的基础。 我们可以试着提出下面的问题来厘清过去设计者的思路和发现新问题。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;连环追问法的两类应用&lt;/h2&gt;
&lt;h3&gt;1. 对问题的追问&lt;/h3&gt;
&lt;p&gt;​		某种程度上已成定式的思路和经验并 不一定是问题的唯一解决路径。尤其随着&lt;strong&gt;时间推移、环境变迁、技术变革&lt;/strong&gt;，&lt;strong&gt;解决同一个“元问题”的最佳方案有可能已悄然改变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		我们可以从以下角度对问题进行追问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q1：当初为何那样设计？&lt;/li&gt;
&lt;li&gt;Q2：基于何种前提条件？&lt;/li&gt;
&lt;li&gt;Q3：前提条件现在是否变化？&lt;/li&gt;
&lt;li&gt;Q4：有无引入新问题？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 对人的追问（&quot;苏格拉底助产式&quot;提问法）&lt;/h3&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;​	苏格拉底为我们示范了对人运用连环追问法的前提：**我们需要发自内心地理解对方，站在对方的立场上鼓励他讲出自己的真实想法。&lt;strong&gt;这种 提问的方法，也被称为&lt;/strong&gt;“助产式”提问法。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;​		我们往往无法通过连环追问法直接确认用户最本质的需求，这就像 &lt;strong&gt;马车时代的用户不可能提出想要一辆汽车的诉求，而是会表达为需要一 匹更快的马&lt;/strong&gt;——事实上用户想要的无疑是更快地到达目的地。&lt;/p&gt;
&lt;p&gt;​		通过连环追问，&lt;strong&gt;你能够搜集到的用户反馈质量是不同的，但它能够帮助你更清晰地看到用户提出某种需要背后的真实动机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;要特别珍视无法理解用户动机”的情况，因为这往往藏着被我们忽略掉的某种使用场景。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;我们可以参考以下角度对问题进行追问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q1:为什么你认为备份的通讯录和手机里的保持一致是无法接受的呢?&lt;/li&gt;
&lt;li&gt;A1:因为我备份就是为了让云端的通讯录尽可能全，不然我干吗要备份?&lt;/li&gt;
&lt;li&gt;Q2:好的，我理解你的意思是手机里存的联系人要比云端通讯录更少、更精简，这样用起来才觉得方便，对吗?&lt;/li&gt;
&lt;li&gt;A2:是的。&lt;/li&gt;
&lt;li&gt;Q3:为什么这样更好用呢?因为通讯录联系人太多了吗?还是出于其他的考虑呢?&lt;/li&gt;
&lt;li&gt;A3:是的。我是做大客户销售的。第一，我不希望手机通讯录一打开所有客户资料都能看到:其次，我存的联系人数量很多，但有些人我联系的频率极低，只希望有个备份，不希望他们一直驻留在我手机里。&lt;/li&gt;
&lt;li&gt;Q4:好的，你看我这么理解对不对?有一部分通讯录资料你不想让它显示在手机里;但同时，在某些情况下(偶尔)可以快捷地把它们
找回来。&lt;/li&gt;
&lt;li&gt;A4:是的，想找的时候通过你们软件能看到就行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;特别提醒&lt;/h2&gt;
&lt;p&gt;:::warning&lt;/p&gt;
&lt;p&gt;对前人所运用方案的充分理解是“第一性原理”运用的基础，“拒绝被同类产品的设计影响”和“压根不懂同类产品的设计”是完全不同的两件事。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h3&gt;成熟的定式大于一切&lt;/h3&gt;
&lt;p&gt;​		并不是所有“定式”都能被 优化。如果做设计全都另起炉灶从头来一遍，却不考虑成本问题，那无疑就走进了第一性原理的误区。**在大多数情况下，成熟的“定式”远比莫 名其妙的新点子来得高效。我们需要尽力避免“为颠覆而颠覆”，不 要“重复造轮子”。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;何时回归原点&lt;/strong&gt;：&lt;/h3&gt;
&lt;p&gt;​		什么时候应该回归原点重来，什么时候可以直接使用现成的“轮子”？&lt;/p&gt;
&lt;p&gt;​		最好的办法是时刻保有从源头思考的意识，充分理解过往思路和关键环节，关注旧模式的前提是否发生变化、是否存在新的优化空间，快 速判断是否存在全新的解决方案。&lt;/p&gt;
&lt;h2&gt;大数据时代的思考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大数据增强预测，但不替代逻辑思考&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初创团队应先聚焦核心数据，而非盲目依赖外部数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优秀设计=数据洞察+第一性原理推导&lt;/strong&gt;，二者缺一不可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		在大数据时代我们可以不再追究事物之间的因果联系了。因为当&lt;strong&gt;影响事件的因素无限多时，想要了解完整的因果关系几 乎是不可能的，耗时耗力还不一定有效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		大数据技术已经可以协助我们预测用户行为。比如，我们借助大数据可以知道在女装电商网页上展示男装广告的效果会很好，&lt;strong&gt;我们还能知道用户A行为和B行为的关联度极高，但也许这两个行为在常人眼里风马牛不相及&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		大数据的基础是数据，海量的数据，基于什么样的数据做判断至关重要，&lt;strong&gt;对于一个产品初创者，在没有可靠的量级数据前提下，直接使用 第三方数据做出的判断极有可能是错误的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		即使有了海量的大数据作为基础，**作为产品的设计者，在分析问题时，依然需要保有“第一性原理”的意识。**数据能够帮助我们测试模型、 发现意料外的事实，但如何使用和定义这些数据现象，又是另一回事。&lt;/p&gt;
&lt;h1&gt;相对思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;没有绝对的好坏，只有动态的平衡&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路径依赖可被设计，关键在主动塑造而非被动接受&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顶级产品=用户心智中的“条件反射触发器”&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		万事万物都在“相对”中寻找一种平衡。&lt;strong&gt;一个产品设计者首先要抱持“不下定义”的觉悟&lt;/strong&gt;，才能看到事物之间的“关系”和“变化”，而不是只瞧见那些暂时悬挂在事物身上的标签。&lt;/p&gt;
&lt;p&gt;​		**就像日光照射 的地球有阴面就必有阳面一样，“路径依赖”和“标签化”看问题同样也能 带来好处。**并且一般来说，某事物在所谓“坏”的程度上劣势越明显，在 另一个“好”的面向上，优势也会越明显。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;很多产品设计者和营销者因为深刻意识到条件反射、路径依赖对人们心理的影响&lt;/strong&gt;，从这一点出发逆向思考，发现了这一心理效应能为产品的营销和传播带来巨大价值。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;假如你能成功地在用户心里建立起“条件反射”“路径依赖”的联想机制，你的品牌建设大体上也就成功了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;拒绝绝对化，拥抱相对性&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不下定义，观察关系&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;事物价值取决于其关联与变化，而非固定标签。&lt;/li&gt;
&lt;li&gt;例：用户对“复杂功能”的评价可能因场景而异（专业用户 vs 新手）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日光与阴影法则&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;任何设计特性均有正反两面，优劣共存。&lt;/li&gt;
&lt;li&gt;例：极简设计降低认知负荷，但可能牺牲功能深度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;路径依赖的双面性&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;劣势即优势&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;用户习惯（路径依赖）可能阻碍创新，却也是品牌粘性的基础。&lt;/li&gt;
&lt;li&gt;例：微信的“长按语音转文字”操作反直觉，但用户习惯后形成壁垒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逆向利用心理效应&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过刻意培养用户的条件反射（如“红包=微信”），强化品牌认知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;构建用户心智的“条件反射”&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;品牌即联想&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;成功的产品会在用户心智中建立“问题→解决方案”的自动链接。&lt;/li&gt;
&lt;li&gt;例：怕上火→王老吉；搜索→Google。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计策略&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;：重复交互模式强化记忆（如抖音的无限下滑）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;情感锚点&lt;/strong&gt;：将功能与情绪关联（如“叮咚”声=外卖送达）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;抽象思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从本质出发，而不是模仿别人成功的套路。&lt;/li&gt;
&lt;li&gt;抽象思维赋能创新。&lt;/li&gt;
&lt;li&gt;在宏观架构与微观体验间保持平衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;产品认知的三个层次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表层体验&lt;/strong&gt;（肉眼模式）：
&lt;ul&gt;
&lt;li&gt;感知产品的色彩、形状、交互流畅度。&lt;/li&gt;
&lt;li&gt;关注使用时的直观感受和乐趣。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中层架构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;洞察产品的隐形框架和交互路径。&lt;/li&gt;
&lt;li&gt;分析设计逻辑的合理性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;深层理念&lt;/strong&gt;（火眼金睛模式）：
&lt;ul&gt;
&lt;li&gt;把握产品的核心骨骼和设计哲学。&lt;/li&gt;
&lt;li&gt;理解产品的战略格局。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;产品人的双重视角&lt;/h2&gt;
&lt;p&gt;​		我们都是容易被表象迷惑的人。&lt;/p&gt;
&lt;p&gt;​		但从某种意义上来说，&lt;strong&gt;成为一名卓越产品设计者的过程，就是一个 不断训练自己眼力的过程&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​		从最开始&lt;strong&gt;只能看到一个产品的色彩形状、交互样式，感受它用起来是不是自然流畅、充满乐趣。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		到进一步觉&lt;strong&gt;察产品背后的隐形框架、交互路径，分析它是不是合理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		**直至最终抵达高度抽 象后的产品骨骼、设计理念，看懂它切入的格局。**产品人在实践中磨 砺，最高境界就是拥有一对大圣的火眼金睛。&lt;/p&gt;
&lt;p&gt;​		所以，最好的状态大概是这样的：&lt;strong&gt;既能用“火眼金睛”看骨骼，也能 切换到“肉眼”模式看体验。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		这种在“设计专家型”视角和“白痴级用户”视 角之间自由转换的能力，在腾讯内部被认为是产品经理必备的重要能力之一。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;专家模式&lt;/strong&gt;：用抽象思维看产品架构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;小白模式&lt;/strong&gt;：用具体体验感受产品&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键能力&lt;/strong&gt;：在两种视角间自如切换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;h2&gt;持续优化的方法论&lt;/h2&gt;
&lt;p&gt;​	**“一天发现一个问题，解决好，三个月后，产品就会慢慢逼近那个‘很有口碑’的点”。**在这句话里， 发现问题是前提。某种程度上说，那些自我感觉特别良好，认为自己的 产品已经“挺好了”的产品设计者，也许还不足以被称为称职的设计者。&quot;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每日发现并解决一个问题&lt;/li&gt;
&lt;li&gt;三个月持续优化可达到口碑临界点&lt;/li&gt;
&lt;li&gt;警惕&quot;产品已经很完美&quot;的思维定式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;抽象思维的培养&lt;/h2&gt;
&lt;p&gt;​	有一个特别的建议。&lt;strong&gt;当你搭乘飞机旅行的时候，请挑一个靠窗边的座位，在起飞过程中俯瞰大地并细心留意这一过程中的变化：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		原本特别清晰的屋顶、田地，会在飞机攀升的过程中不断变小、变模糊。不同屋顶、不同田地间清晰的边界线也会慢慢地消失，逐渐融为一体。随着你观察视角的不断升高，这种相近事物之间的“合并”会进行得越来越快。 抽象看问题的方法就和这个升高视角的过程极其相似。&lt;/p&gt;
&lt;h2&gt;产品设计的克制原则&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;好的产品设计，就是运用数量有限的基础能力，去实现高满意度的功能&lt;/strong&gt;（当然使用率频次也很重要，这和用户对产品的自然需求相关）。 &lt;strong&gt;而没信心的表现，往往是只要和产品沾点边，就这个功能也做，那个功能也上，不知道哪个功能效果好，做了一堆功能，最后却发现很多功能用户根本就不会去用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优秀设计：
&lt;ul&gt;
&lt;li&gt;用有限基础能力实现高满意度&lt;/li&gt;
&lt;li&gt;聚焦核心功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;失败设计：
&lt;ul&gt;
&lt;li&gt;功能堆砌&lt;/li&gt;
&lt;li&gt;用户需求不明确&lt;/li&gt;
&lt;li&gt;资源分散&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;迭代升级的正确姿势&lt;/h2&gt;
&lt;p&gt;​		一方面知道版本迭代升级、新增功能的重要性，但另一方面又为“新增功能”而苦恼。 因为有些功能加在现有架构上总像是硬生生装了一个义肢似的多余。&lt;/p&gt;
&lt;p&gt;​		该如何避免这种状况的发生呢？其实抽象思维这时候也能派上用场。 &lt;strong&gt;一个可行的建议是：不要考虑添加的新功能是什么，而去考虑添加的新能力（元素）是什么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免生硬添加功能&lt;/li&gt;
&lt;li&gt;关注新增&quot;能力元素&quot;而非功能&lt;/li&gt;
&lt;li&gt;保持架构的有机统一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1&gt;系统思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优秀产品是精心设计的反馈系统&lt;/li&gt;
&lt;li&gt;破局点往往简单而精准，而非复杂全面&lt;/li&gt;
&lt;li&gt;避免&quot;只见树木不见森林&quot;的局部优化&lt;/li&gt;
&lt;li&gt;用系统视角看待产品演化和用户行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持系统视角：看到要素间的相互影响、预期时滞效应&lt;/li&gt;
&lt;li&gt;验证方式：市场结果检验+数据持续监测&lt;/li&gt;
&lt;li&gt;平衡方法：既要细节执行、又要系统思考&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;镜子与变色龙效应&lt;/h2&gt;
&lt;p&gt;​		每一年，潘通会选择一个欧洲国家的首都举行一次秘密会议。这个 持续两天的会议被安排在“没有颜色”的房间里召开。由来自不同国家的 色彩标准工作组出席讨论并进行提案，他们综合评估各方数据趋势的变 化，从超过2000个备选方案中选出次年的年度色彩。&lt;/p&gt;
&lt;p&gt;​		 全球来自视觉、工业、时装等领域的设计师、零售商和制造商们用 他们的反馈影响着这次会议的提案。另一方面，潘通高管和客户组成的 委员会依据调查报告和色板销售情况做出他们的抉择。&lt;/p&gt;
&lt;p&gt;​		也就是说，&lt;strong&gt;流行色的源头是人们的行为数据，流行色是对数据趋势 进行预测的结果。&lt;strong&gt;但&lt;/strong&gt;与此同时，潘通向全球发布的流行色又会吸引人们 关注的目光，进而引发新一轮追随浪潮。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		多么奇妙！**人们制造的数据主导了设计源头，但又反过来作用于他们自身。**是不是像极了那只不断追逐镜中色彩的变色龙？&lt;/p&gt;
&lt;p&gt;​		 面对这种复杂的、各种因素相互影响的循环模式，我们会发现：&lt;strong&gt;线性思维失灵了！并不是套用一个固定的公式，就能够得到一个固定的答案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;流行色和潘通选色双向影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据决定设计源头 → 设计影响用户行为 → 产生新数据&lt;/li&gt;
&lt;li&gt;形成自我强化的循环系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;反馈系统模型&lt;/h2&gt;
&lt;p&gt;​		&lt;strong&gt;反馈系统模型是所有产品最基础的 抽象模型。我们常说的产品框架设计本质上都是在设计反馈。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		不过**设计反馈最终还是为了解决问题，为了从一团乱麻中找到最重要的那个线头。**而只要找对了线头，也就是系统中的“关键解”“破局点”，往往就能实现四两拨千斤的效果。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有产品本质都是反馈系统&lt;/li&gt;
&lt;li&gt;设计框架=设计反馈机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;寻找破局点&lt;/h2&gt;
&lt;p&gt;​		从微信红包案例我们可以看出，&lt;strong&gt;系统破局点往往不是一个大而全的方案，而是一个恰到好处的“锥子”，针对、聚焦于某一特定场景，并且 携带着“自下而上”的用户价值&lt;/strong&gt;。这样一锥下去，系统乾坤颠倒。&lt;/p&gt;
&lt;p&gt;​		不过&lt;strong&gt;要找到这种高强度的破局点确实不容易，它依赖强大的产品洞察力和一点刚刚好的运气&lt;/strong&gt;。所以，如果不具备深湛的系统思考力也没关 系，重要的是，&lt;strong&gt;我们已经开始意识到这类模型的存在，不再是一个纯线性的思考者了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		并且在复杂的系统面前，**有一件事是残酷且公平的：无论是经验丰富的产品人还是刚跨进门槛的初学者，无论我们系统思考后得到的答案是什么，最终也要看实际运行的结果。**只有结果才能够检验 系统思考的正确性。&lt;/p&gt;
&lt;p&gt;​		**有时滞的系统才是大自 然与商业环境中最为常见的系统模型。**而关于“反馈”，其实存在种种可能，它既有可能起到限制或约束的作用，也有可能起到扩大与增强的效果。&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破局点特征：
&lt;ul&gt;
&lt;li&gt;小而精准，非大而全&lt;/li&gt;
&lt;li&gt;针对特定场景&lt;/li&gt;
&lt;li&gt;自带用户价值&lt;/li&gt;
&lt;li&gt;能引发系统级变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时滞效应：
&lt;ul&gt;
&lt;li&gt;反馈存在延迟&lt;/li&gt;
&lt;li&gt;商业系统的常态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;常见误区&lt;/h2&gt;
&lt;p&gt;第一类，被异常路径左右，抓不住重点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负责开发工作的工程师们往往会很负责地追问所有极端和异常的路径。&lt;/li&gt;
&lt;li&gt;我发现一旦把状态调整 为“事无巨细”型，就容易过分地陷入细节泥潭——看起来结果变得周详 了，但却有类似“无论什么看起来都很重要”“无从抓取重点路径”的感 觉。这种感觉像是走进了一个巨大的迷宫，每一条路看起来离终点都很 接近，可又都差那么点儿意思。&lt;strong&gt;而面对那些枝枝节节的异常路径，也总会觉得“这个必须解决”“那个似乎也不该放弃”。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二类，头痛医头，脚痛医脚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也许昨天冒出了一个A问题，用最直接的解决方案去修补好了，今天却又冒出了B 问题，而B正是由A的解决方式引发的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在产品数据下降时，你设计了一个挽救数据的功能&lt;/strong&gt;——可能是一次特别的营销活动，也可能是一次品牌合作等，这个功能使得数 据短期提升了不少，但时间一长，你会发现数据下跌得更厉害了。&lt;/li&gt;
&lt;li&gt;你对产品模型的分析还不够透彻。&lt;strong&gt;最有效的做法是重新梳理产品中的反馈，进行系统思考，确定真正“治本”的解决方案，而不是忙着“治标”。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;异常路径陷阱：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过度关注边缘case、导致失去核心重点&lt;/li&gt;
&lt;li&gt;解决方案：区分主路径与异常路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;治标不治本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短期营销拉升数据、后续更剧烈下跌&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;根本解法：重新梳理反馈系统、寻找本质解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h1&gt;演化思维&lt;/h1&gt;
&lt;h2&gt;核心观点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;存活产品=持续进化+环境适应&lt;/li&gt;
&lt;li&gt;有效试错≠频繁更换目标&lt;/li&gt;
&lt;li&gt;清晰DNA=统一的产品选择&lt;/li&gt;
&lt;li&gt;极简框架（MVP）=演化的最佳基础&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;产品存活的关键要素&amp;amp;反脆弱系统&lt;/h2&gt;
&lt;p&gt;​	**“经济学关心的是存活的条件。一个人，一个组织，甚至一个制度，是怎么存活下来的？它有什么条件才能够存活下 来？如果条件发生了改变，存活的情况又会发生怎么样的改变。这才是 经济学关心的议题。” **&lt;/p&gt;
&lt;p&gt;​		站在时间的巨轮上回望，这一切就像数量众多的赌徒在进行一场前 赴后继的通关游戏。外部环境设置重重关卡，那些恰巧碰对关卡密码并 通关的生命，赶紧用DNA记录下通关密码，并把它传递给后一代。**生命通过这种方式代代积累着不同能力的DNA。 而生存下来的适者，是一开始计划好自己的演化策略的么？不是的，它们完全不知道哪种能力可以生存下去，它们只是刚好碰巧通关的幸存者而已。**这才是达尔文表达的真义。&lt;/p&gt;
&lt;p&gt;​		一个产品能否在现实中“存活”下去，它要面临的状况和阿尔奇安讲的“逃离芝加哥”很有些相似之处。&lt;strong&gt;产品所处的时代背景、产业环境、竞争对手、用户群体特征等众多因素，都影响着产品存活的可能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		设计者最关键的任务是“找出那条可以存活下去的路”。那么，这条可存活的路是一开始就高屋建瓴地规划出来的么？不是的。&lt;strong&gt;产品和生命体、组织、制度一样，也在不断调整、试错的过程中才能找到路活下来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		具有生命力的产品，和环境息息相关。环境变了，能够存活的条件 变了，它也会随之迭代更新、调整改变。因此，互联网市场变化极快， 互联网产品就成了最讲究“迭代”的产品。&lt;strong&gt;产品从最开始第一个版本发布，到后面不断地更新迭代，每次迭代都是在当时的环境下寻找最佳存活路径的结果。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;​		那么，我们要怎么才能找到那条“对”的路呢？简单来讲，&lt;strong&gt;需要赋予产品一种类生命的特性，一种多数量、多样化同时竞争的特性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		他们认为自己需要判断的只是“这个点子是不是靠谱”，只要点子靠谱，结果就是确定的了。你看，这就是“买彩票 式”的创业。&lt;strong&gt;他们没有意识到，令一个产品最终活下来的绝不是最初的那个好点子，而是，你构建了一个怎样的产品系统去做这件事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		现实世界确实充满了不确 定，但&lt;strong&gt;我们可以建立一个“反脆弱”的系统，这样性质的系统具有强大的韧性，可以从失败中汲取养分，从不确定性中获益。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		打个比方，大家都知道哆啦A梦吧？它可以说是“反脆弱”的典型代表。为什么？你看每次它遭遇危机的时候就在兜里掏啊掏，先拿出A道 具来试一下，如果没法应对又会继续掏出B道具来试。**它的兜兜里不仅 有Plan A、Plan B，还有N多种不同的应对方案。**我们形容某个人满肚鬼点子，可能会说他“一计不成，又生一计”，其实也是在讲这个意思。&lt;/p&gt;
&lt;p&gt;​		因为不能百分百确定存活条件是什么，必须以最小的成本、最大的数量积极试错——这样的系统就是类生命特性的系统，这样的企业、这 种类型的产品才不会轻易死掉。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;多维影响因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;竞争对手格局&lt;/li&gt;
&lt;li&gt;时代背景特征&lt;/li&gt;
&lt;li&gt;用户群体变迁&lt;/li&gt;
&lt;li&gt;产品自身特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;核心要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续进化能力、寻找最佳生存路径&lt;/li&gt;
&lt;li&gt;环境适应韧性&lt;/li&gt;
&lt;li&gt;赋予类生命特性、多数量、多样化竞争的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;企业的演化之路&lt;/h2&gt;
&lt;p&gt;​		**对初创型企业来说，运用精益创业思路，以最小成本快速迭代，积极试错，犯错的次数就是企业制造“生命”的数量。**当排除很多的错误路径后，产品就能不断向着对的方向前进。后文将谈到的最小可行性产品原型之所以有效，就在于它以非常小的成本获得了极大的可能性，是以小博大的典型工具。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;对成熟型企业来说，需要思考的是整个公司产品体系的稳定性以及 重点产品的架构稳定性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		通过思考整体布局，让处于不同生命周期的产品承担不同的任务目标，进而使企业获得更强的稳定性。&lt;/p&gt;
&lt;h2&gt;演化模型构建方法&lt;/h2&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;Q：怎样的产品框架结构才具有扩展性，符合演化（即产品迭代）的目标？&lt;/p&gt;
&lt;p&gt;A：答案是极简，极简是演化的基础，极简可以最大限度地兼容变化。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;​	不过，**极简并不是指“越简单越好”，而是“当前没有什么可以拿掉了”。**它是设计最终呈现的结果而非最初抱持的目标，它来自对产品元素充分、全面的考量、抽象、去芜存菁。 在思考框架结构的过程中，产品设计者需要充分实践我们前面提到的抽象思维。&lt;/p&gt;
&lt;p&gt;​		**好框架在每个阶段体现出来的核心任务只有一个。选出那个最重要的任务，聚焦再聚焦，利用产品框架去放大它，完成任务后再把 它收纳起来。**可以支撑上述这些行为的框架才算得上是好框架。&lt;/p&gt;
&lt;p&gt;​		例子：**Keep由提供单纯的健身训练教学这一核心功能起步，演化拓展到跑步、骑行等运动领域。**但是，在它刚推出跑步功能时，只是在首页左上角开辟了一个入口。框架重心依旧落在健身训练的主题上。直至最新的4.0版本，才将跑步和骑行提到了与训练并列的位置上。&lt;/p&gt;
&lt;p&gt;​		通过以上案例，相信大家已经大体了解了版本演化的重点。明白为什么&lt;strong&gt;糟糕的框架设计会让用户感觉“每次改版都在推倒重来”，而好的框架给用户的感觉是“没怎么变，但功能推陈出新，很有节奏感”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		所以，从抽象层面上说，&lt;strong&gt;好的框架和重点突出的思维导图相似—— 重点清晰，并且能够收放自如。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;p&gt;从MPP出发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimum Possible Product（最小可能产品）、保留不可删减的核心&lt;/li&gt;
&lt;li&gt;好的框架迭代中保有节奏感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;迭代策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每代产品突出不同重点、满足阶段性需求&lt;/li&gt;
&lt;li&gt;及时响应市场反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2&gt;产品DNA构成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;核心要素：
&lt;ul&gt;
&lt;li&gt;品牌形象&lt;/li&gt;
&lt;li&gt;核心功能&lt;/li&gt;
&lt;li&gt;用户认知&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延伸维度：
&lt;ul&gt;
&lt;li&gt;设计理念&lt;/li&gt;
&lt;li&gt;设计规则&lt;/li&gt;
&lt;li&gt;价值主张&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演化思维实践案例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;精益创业：
&lt;ul&gt;
&lt;li&gt;MVP验证&lt;/li&gt;
&lt;li&gt;快速迭代&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;腾讯赛马：
&lt;ul&gt;
&lt;li&gt;内部团队PK&lt;/li&gt;
&lt;li&gt;自然选择最优解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;天使投资：
&lt;ul&gt;
&lt;li&gt;领域撒网策略&lt;/li&gt;
&lt;li&gt;提高成功概率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;构建反脆弱系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;核心特征：
&lt;ul&gt;
&lt;li&gt;多样化应对方案&lt;/li&gt;
&lt;li&gt;从失败中学习&lt;/li&gt;
&lt;li&gt;不确定性获益&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实施要点：
&lt;ul&gt;
&lt;li&gt;初创企业：低成本快速试错&lt;/li&gt;
&lt;li&gt;成熟企业：体系化产品布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;极简演化框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;设计原则：
&lt;ul&gt;
&lt;li&gt;&quot;无可删减&quot;的极简&lt;/li&gt;
&lt;li&gt;最大化兼容变化&lt;/li&gt;
&lt;li&gt;单阶段单重点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优秀案例：
&lt;ul&gt;
&lt;li&gt;Keep功能演进路径&lt;/li&gt;
&lt;li&gt;微信插件化设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Markdown Extended Features</title><link>https://echo-carrie.github.io/posts/markdown-extended/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/markdown-extended/</guid><description>Read more about Markdown features in Fuwari</description><pubDate>Wed, 01 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;GitHub Repository Cards&lt;/h2&gt;
&lt;p&gt;You can add dynamic cards that link to GitHub repositories, on page load, the repository information is pulled from the GitHub API.&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;Fabrizz/MMM-OnSpotify&quot;}&lt;/p&gt;
&lt;p&gt;Create a GitHub repository card with the code &lt;code&gt;::github{repo=&quot;&amp;lt;owner&amp;gt;/&amp;lt;repo&amp;gt;&quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::github{repo=&quot;saicaca/fuwari&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Admonitions&lt;/h2&gt;
&lt;p&gt;Following types of admonitions are supported: &lt;code&gt;note&lt;/code&gt; &lt;code&gt;tip&lt;/code&gt; &lt;code&gt;important&lt;/code&gt; &lt;code&gt;warning&lt;/code&gt; &lt;code&gt;caution&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::note
Highlights information that users should take into account, even when skimming.
:::&lt;/p&gt;
&lt;p&gt;:::tip
Optional information to help a user be more successful.
:::&lt;/p&gt;
&lt;p&gt;:::important
Crucial information necessary for users to succeed.
:::&lt;/p&gt;
&lt;p&gt;:::warning
Critical content demanding immediate user attention due to potential risks.
:::&lt;/p&gt;
&lt;p&gt;:::caution
Negative potential consequences of an action.
:::&lt;/p&gt;
&lt;h3&gt;Basic Syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;:::note
Highlights information that users should take into account, even when skimming.
:::

:::tip
Optional information to help a user be more successful.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Custom Titles&lt;/h3&gt;
&lt;p&gt;The title of the admonition can be customized.&lt;/p&gt;
&lt;p&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;GitHub Syntax&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]
&lt;a href=&quot;https://github.com/orgs/community/discussions/16925&quot;&gt;The GitHub syntax&lt;/a&gt; is also supported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; [!NOTE]
&amp;gt; The GitHub syntax is also supported.

&amp;gt; [!TIP]
&amp;gt; The GitHub syntax is also supported.
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Simple Guides for Fuwari</title><link>https://echo-carrie.github.io/posts/guide/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/guide/</guid><description>How to use this blog template.</description><pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Cover image source: &lt;a href=&quot;https://image.civitai.com/xG1nkqKTMzGDvpLrqFT7WA/208fc754-890d-4adb-9753-2c963332675d/width=2048/01651-1456859105-(colour_1.5),girl,_Blue,yellow,green,cyan,purple,red,pink,_best,8k,UHD,masterpiece,male%20focus,%201boy,gloves,%20ponytail,%20long%20hair,.jpeg&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This blog template is built with &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt;. For the things that are not mentioned in this guide, you may find the answers in the &lt;a href=&quot;https://docs.astro.build/&quot;&gt;Astro Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Front-matter of Posts&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
title: My First Blog Post
published: 2023-09-09
description: This is the first post of my new Astro blog.
image: ./cover.jpg
tags: [Foo, Bar]
category: Front-end
draft: false
---
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The title of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;published&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The date the post was published.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the post. Displayed on index page.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The cover image path of the post.&amp;lt;br/&amp;gt;1. Start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;: Use web image&amp;lt;br/&amp;gt;2. Start with &lt;code&gt;/&lt;/code&gt;: For image in &lt;code&gt;public&lt;/code&gt; dir&amp;lt;br/&amp;gt;3. With none of the prefixes: Relative to the markdown file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The tags of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The category of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;draft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If this post is still a draft, which won&apos;t be displayed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Where to Place the Post Files&lt;/h2&gt;
&lt;p&gt;Your post files should be placed in &lt;code&gt;src/content/posts/&lt;/code&gt; directory. You can also create sub-directories to better organize your posts and assets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/content/posts/
├── post-1.md
└── post-2/
    ├── cover.png
    └── index.md
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Markdown Example</title><link>https://echo-carrie.github.io/posts/markdown/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/markdown/</guid><description>A simple example of a Markdown blog post.</description><pubDate>Sun, 01 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;An h1 header&lt;/h1&gt;
&lt;p&gt;Paragraphs are separated by a blank line.&lt;/p&gt;
&lt;p&gt;2nd paragraph. &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, and &lt;code&gt;monospace&lt;/code&gt;. Itemized lists
look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this one&lt;/li&gt;
&lt;li&gt;that one&lt;/li&gt;
&lt;li&gt;the other one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Block quotes are
written like so.&lt;/p&gt;
&lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &quot;it&apos;s all
in chapters 12--14&quot;). Three dots ... will be converted to an ellipsis.
Unicode is supported. ☺&lt;/p&gt;
&lt;h2&gt;An h2 header&lt;/h2&gt;
&lt;p&gt;Here&apos;s a numbered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first item&lt;/li&gt;
&lt;li&gt;second item&lt;/li&gt;
&lt;li&gt;third item&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here&apos;s a code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(which makes copying &amp;amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;An h3 header&lt;/h3&gt;
&lt;p&gt;Now a nested list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, get these ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;carrots&lt;/li&gt;
&lt;li&gt;celery&lt;/li&gt;
&lt;li&gt;lentils&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boil some water.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump everything in the pot and follow
this algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; find wooden spoon
 uncover pot
 stir
 cover pot
 balance wooden spoon precariously on pot handle
 wait 10 minutes
 goto first step (or shut off burner when done)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not bump wooden spoon or it will fall.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).&lt;/p&gt;
&lt;p&gt;Here&apos;s a link to &lt;a href=&quot;http://foo.bar&quot;&gt;a website&lt;/a&gt;, to a &lt;a href=&quot;local-doc.html&quot;&gt;local
doc&lt;/a&gt;, and to a &lt;a href=&quot;#an-h2-header&quot;&gt;section heading in the current
doc&lt;/a&gt;. Here&apos;s a footnote [^1].&lt;/p&gt;
&lt;p&gt;[^1]: Footnote text goes here.&lt;/p&gt;
&lt;p&gt;Tables can look like this:&lt;/p&gt;
&lt;p&gt;size material color&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;9 leather brown
10 hemp canvas natural
11 glass transparent&lt;/p&gt;
&lt;p&gt;Table: Shoes, their sizes, and what they&apos;re made of&lt;/p&gt;
&lt;p&gt;(The above is the caption for the table.) Pandoc also supports
multi-line tables:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;keyword text&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;red Sunsets, apples, and
other red or reddish
things.&lt;/p&gt;
&lt;p&gt;green Leaves, grass, frogs
and other things it&apos;s
not easy being.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A horizontal rule follows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here&apos;s a definition list:&lt;/p&gt;
&lt;p&gt;apples
: Good for making applesauce.
oranges
: Citrus!
tomatoes
: There&apos;s no &quot;e&quot; in tomatoe.&lt;/p&gt;
&lt;p&gt;Again, text is indented 4 spaces. (Put a blank line between each
term/definition pair to spread things out more.)&lt;/p&gt;
&lt;p&gt;Here&apos;s a &quot;line block&quot;:&lt;/p&gt;
&lt;p&gt;| Line one
| Line too
| Line tree&lt;/p&gt;
&lt;p&gt;and images can be specified like so:&lt;/p&gt;
&lt;p&gt;Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:&lt;/p&gt;
&lt;p&gt;$$I = \int \rho R^{2} dV$$&lt;/p&gt;
&lt;p&gt;$$
\begin{equation*}
\pi
=3.1415926535
;8979323846;2643383279;5028841971;6939937510;5820974944
;5923078164;0628620899;8628034825;3421170679;\ldots
\end{equation*}
$$&lt;/p&gt;
&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;
</content:encoded></item><item><title>Include Video in the Posts</title><link>https://echo-carrie.github.io/posts/video/</link><guid isPermaLink="true">https://echo-carrie.github.io/posts/video/</guid><description>This post demonstrates how to include embedded video in a blog post.</description><pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Just copy the embed code from YouTube or other platforms, and paste it in the markdown file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Include Video in the Post
published: 2023-10-19
// ...
---

&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;h2&gt;Bilibili&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1fK4y1s7Qf&amp;amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content:encoded></item></channel></rss>